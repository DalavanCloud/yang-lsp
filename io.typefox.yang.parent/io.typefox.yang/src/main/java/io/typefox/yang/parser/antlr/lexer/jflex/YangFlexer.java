/* The following code was generated by JFlex 1.4.3 on 6/5/17 12:20 PM */

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/5/17 12:20 PM from the specification file
 * <tt>./src/main/java/io/typefox/yang/parser/antlr/lexer/jflex/YangFlexer.flex</tt>
 */
public class YangFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_EXPRESSION_STRING = 4;
  public static final int AWAITING_EXPRESSION = 2;
  public static final int YYINITIAL = 0;
  public static final int ID_EXPECTED = 8;
  public static final int BLACK_BOX_STRING = 10;
  public static final int COLON_EXPECTED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\2\0\1\5\22\0\1\1\1\31\1\12\4\0"+
    "\1\11\1\34\1\35\1\3\1\26\1\40\1\27\1\15\1\2\12\14"+
    "\1\33\1\62\1\32\1\30\1\32\2\0\32\6\1\36\1\13\1\37"+
    "\1\0\1\7\1\0\1\16\1\51\1\41\1\20\1\50\1\54\1\46"+
    "\1\53\1\24\1\6\1\56\1\45\1\23\1\17\1\21\1\55\1\60"+
    "\1\22\1\52\1\42\1\47\1\25\1\61\1\44\1\43\1\57\1\63"+
    "\1\26\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\25\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\0"+
    "\1\15\1\16\4\12\1\0\1\11\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\3\13\1\27\1\0"+
    "\57\2\1\13\2\0\1\15\1\30\2\12\1\11\2\13"+
    "\1\0\1\27\2\0\20\2\1\31\33\2\1\32\10\2"+
    "\1\33\1\2\2\13\1\34\26\2\1\35\6\2\1\36"+
    "\3\2\1\37\2\2\1\40\1\41\4\2\1\42\1\43"+
    "\2\2\1\44\6\2\1\45\3\2\1\46\15\2\1\47"+
    "\11\2\1\50\3\2\1\51\11\2\1\52\15\2\1\53"+
    "\1\2\1\54\10\2\1\55\1\2\1\56\4\2\1\57"+
    "\3\2\1\60\3\2\1\61\1\62\4\2\1\63\1\2"+
    "\1\64\3\2\1\65\6\2\1\66\1\67\1\2\1\70"+
    "\3\2\1\71\1\2\1\72\10\2\1\73\3\2\1\74"+
    "\1\75\12\2\1\76\1\77\2\2\1\100\6\2\1\101"+
    "\5\2\1\102\5\2\1\103\6\2\1\104\1\105\1\106"+
    "\1\2\1\107\4\2\1\110\1\2\1\111\3\2\1\112"+
    "\2\2\1\113\2\2\1\114\1\2\1\115\3\2\1\116"+
    "\5\2\1\117\4\2\1\120\2\2\1\121\6\2\1\122"+
    "\3\2\1\123\1\124\2\2\1\125\1\126\1\127\3\2"+
    "\1\130\1\2\1\131\1\132\4\2\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[471];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u01d4"+
    "\0\u01d4\0\u064c\0\u01d4\0\u01d4\0\u01d4\0\u0680\0\u06b4\0\u01d4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0854\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u01d4\0\u134c\0\u1380"+
    "\0\u1380\0\u01d4\0\u13b4\0\u13e8\0\u0680\0\u141c\0\u1450\0\u1484"+
    "\0\u01d4\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u01a0\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u01a0"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u01a0\0\u1f7c\0\u1fb0\0\u1fe4\0\u01d4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220"+
    "\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0"+
    "\0\u23f4\0\u2428\0\u245c\0\u01a0\0\u2490\0\u24c4\0\u24f8\0\u252c"+
    "\0\u2560\0\u2594\0\u01a0\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\u01a0\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u01a0"+
    "\0\u01a0\0\u2804\0\u2838\0\u01a0\0\u286c\0\u28a0\0\u28d4\0\u2908"+
    "\0\u293c\0\u2970\0\u01a0\0\u29a4\0\u29d8\0\u2a0c\0\u01a0\0\u2a40"+
    "\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0"+
    "\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u01a0\0\u2ce4\0\u2d18\0\u2d4c"+
    "\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u01a0\0\u2eb8"+
    "\0\u2eec\0\u2f20\0\u01a0\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024"+
    "\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u01a0\0\u3128\0\u315c\0\u3190"+
    "\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330"+
    "\0\u3364\0\u3398\0\u01a0\0\u33cc\0\u01a0\0\u3400\0\u3434\0\u3468"+
    "\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u01a0\0\u35a0\0\u01a0"+
    "\0\u35d4\0\u3608\0\u363c\0\u3670\0\u01a0\0\u36a4\0\u36d8\0\u370c"+
    "\0\u01a0\0\u3740\0\u3774\0\u37a8\0\u01a0\0\u01a0\0\u37dc\0\u3810"+
    "\0\u3844\0\u3878\0\u01a0\0\u38ac\0\u01a0\0\u38e0\0\u3914\0\u3948"+
    "\0\u01a0\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u01a0"+
    "\0\u01a0\0\u3ab4\0\u01a0\0\u3ae8\0\u3b1c\0\u3b50\0\u01a0\0\u3b84"+
    "\0\u01a0\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0"+
    "\0\u3d24\0\u01a0\0\u3d58\0\u3d8c\0\u3dc0\0\u01a0\0\u01a0\0\u3df4"+
    "\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94"+
    "\0\u3fc8\0\u01a0\0\u01a0\0\u3ffc\0\u4030\0\u01a0\0\u4064\0\u4098"+
    "\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238"+
    "\0\u426c\0\u42a0\0\u01a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4"+
    "\0\u01a0\0\u43d8\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc\0\u01a0"+
    "\0\u01a0\0\u01a0\0\u4510\0\u01a0\0\u4544\0\u4578\0\u45ac\0\u45e0"+
    "\0\u01a0\0\u4614\0\u01a0\0\u4648\0\u467c\0\u46b0\0\u01a0\0\u46e4"+
    "\0\u4718\0\u01a0\0\u474c\0\u4780\0\u01a0\0\u47b4\0\u01a0\0\u47e8"+
    "\0\u481c\0\u4850\0\u01a0\0\u4884\0\u48b8\0\u48ec\0\u4920\0\u4954"+
    "\0\u01a0\0\u4988\0\u49bc\0\u49f0\0\u4a24\0\u01a0\0\u4a58\0\u4a8c"+
    "\0\u01a0\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\u4b90\0\u4bc4\0\u01a0"+
    "\0\u4bf8\0\u4c2c\0\u4c60\0\u01a0\0\u01a0\0\u4c94\0\u4cc8\0\u01a0"+
    "\0\u01a0\0\u01a0\0\u4cfc\0\u4d30\0\u4d64\0\u01a0\0\u4d98\0\u01a0"+
    "\0\u01a0\0\u4dcc\0\u4e00\0\u4e34\0\u4e68\0\u01a0\0\u01a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[471];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\7\1\10\1\0\2\7\1\11\1\0\1\12"+
    "\5\0\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\13\0\1\23\1\24\1\25\1\11\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\11\1\34\1\35\1\36"+
    "\2\11\1\37\1\40\1\41\1\0\1\7\1\10\1\0"+
    "\2\7\1\42\1\0\1\12\1\0\1\43\3\0\10\42"+
    "\13\0\21\42\1\40\1\41\1\0\1\7\1\44\1\45"+
    "\2\7\1\46\1\0\1\12\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\46\1\55\1\56\1\46\1\57\2\46"+
    "\3\45\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\21\46\1\40\1\41\1\0\1\7\2\0\2\7"+
    "\2\0\1\12\22\0\1\70\26\0\1\40\1\41\1\0"+
    "\1\7\2\0\2\7\1\71\1\0\1\12\5\0\10\71"+
    "\13\0\21\71\1\40\1\41\1\72\1\7\1\73\1\72"+
    "\2\7\2\72\1\12\1\47\1\74\47\72\1\40\1\41"+
    "\1\0\1\7\2\0\2\7\60\0\1\75\1\76\66\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\21\11\74\0"+
    "\2\11\4\0\3\11\1\77\2\11\1\100\3\11\1\0"+
    "\1\11\11\0\1\101\5\11\1\102\12\11\10\0\2\11"+
    "\4\0\2\11\1\103\2\11\1\104\4\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\7\11\1\105\11\11\10\0\2\11\4\0\6\11"+
    "\1\106\3\11\1\0\1\11\11\0\6\11\1\107\12\11"+
    "\10\0\2\11\4\0\2\11\1\110\7\11\1\0\1\11"+
    "\11\0\7\11\1\111\4\11\1\112\4\11\10\0\2\11"+
    "\4\0\2\11\1\113\2\11\1\114\2\11\1\115\1\11"+
    "\1\0\1\11\11\0\6\11\1\116\12\11\10\0\2\11"+
    "\4\0\3\11\1\117\1\120\2\11\1\121\2\11\1\0"+
    "\1\11\11\0\13\11\1\122\5\11\10\0\2\11\4\0"+
    "\2\11\1\123\7\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\2\11\1\124\2\11\1\125\4\11\1\0"+
    "\1\11\11\0\12\11\1\126\6\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\2\11\1\127\16\11\10\0"+
    "\2\11\4\0\2\11\1\130\5\11\1\131\1\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\10\11\1\132"+
    "\1\11\1\0\1\11\11\0\7\11\1\133\11\11\10\0"+
    "\2\11\4\0\6\11\1\134\3\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\3\11\1\135\6\11\1\0"+
    "\1\11\11\0\11\11\1\136\7\11\10\0\2\11\4\0"+
    "\3\11\1\137\2\11\1\140\3\11\1\0\1\11\11\0"+
    "\3\11\1\141\15\11\10\0\2\11\4\0\2\11\1\142"+
    "\5\11\1\143\1\11\1\0\1\11\11\0\7\11\1\144"+
    "\11\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\1\11\1\145\4\11\1\146\12\11\10\0\2\11\4\0"+
    "\6\11\1\147\3\11\1\0\1\11\11\0\7\11\1\150"+
    "\11\11\10\0\2\11\4\0\2\11\1\151\2\11\1\152"+
    "\1\153\3\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\154\11\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\12\11"+
    "\1\155\6\11\10\0\2\42\4\0\12\42\1\0\1\42"+
    "\11\0\21\42\10\0\2\46\4\0\12\46\1\0\1\46"+
    "\11\0\21\46\2\0\11\47\1\156\52\47\12\0\1\157"+
    "\65\0\1\52\1\160\62\0\1\161\1\162\54\0\2\46"+
    "\4\0\3\46\1\163\6\46\1\0\1\46\11\0\21\46"+
    "\10\0\2\46\4\0\10\46\1\164\1\46\1\0\1\46"+
    "\11\0\21\46\10\0\2\46\4\0\6\46\1\165\3\46"+
    "\1\0\1\46\11\0\21\46\10\0\2\46\4\0\5\46"+
    "\1\163\4\46\1\0\1\46\11\0\21\46\32\0\1\45"+
    "\41\0\2\71\4\0\12\71\1\0\1\71\11\0\21\71"+
    "\2\0\1\72\1\0\2\72\2\0\2\72\3\0\47\72"+
    "\2\0\1\72\1\0\1\166\1\167\2\0\2\72\3\0"+
    "\47\72\2\0\12\74\1\156\1\170\50\74\4\75\1\171"+
    "\1\172\56\75\3\76\1\173\60\76\6\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\2\11\1\174\16\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\5\11\1\175"+
    "\13\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\1\11\1\176\17\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\5\11\1\177\13\11\10\0\2\11\4\0"+
    "\7\11\1\200\2\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\1\11\1\201"+
    "\17\11\10\0\2\11\4\0\11\11\1\202\1\0\1\11"+
    "\11\0\11\11\1\203\1\11\1\204\5\11\10\0\2\11"+
    "\4\0\4\11\1\205\5\11\1\0\1\11\11\0\5\11"+
    "\1\206\13\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\207\17\11\10\0\2\11\4\0\3\11"+
    "\1\210\6\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\11\11\1\211\1\0\1\11\11\0\13\11\1\212"+
    "\3\11\1\213\1\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\214\20\11\10\0\2\11\4\0\3\11"+
    "\1\215\6\11\1\0\1\11\11\0\3\11\1\216\15\11"+
    "\10\0\2\11\4\0\4\11\1\217\5\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\3\11\1\220\6\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\11\11\1\221\7\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\222\13\11\1\223"+
    "\4\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\7\11\1\224\11\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\14\11\1\225\4\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\226\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\4\11\1\227\14\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\11\11\1\230"+
    "\7\11\10\0\2\11\4\0\3\11\1\231\6\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\5\11\1\232"+
    "\4\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\14\11\1\233\4\11\10\0"+
    "\2\11\4\0\3\11\1\234\6\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\3\11\1\235\6\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\11\11\1\236\7\11\10\0\2\11\4\0"+
    "\2\11\1\237\1\240\6\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\5\11\1\241\4\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\10\11\1\242\1\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\7\11\1\243\11\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\6\11\1\244\12\11"+
    "\10\0\2\11\4\0\6\11\1\245\3\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\246\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\11\11\1\247\7\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\11\1\250\17\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\4\11"+
    "\1\251\14\11\10\0\2\11\4\0\2\11\1\252\7\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\10\11\1\253\10\11\10\0\2\11"+
    "\4\0\2\11\1\254\7\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\2\11\1\255\7\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\256\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\11\11\1\257\7\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\260\11\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\2\11"+
    "\1\261\16\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\7\11\1\262\11\11\2\0\12\157\1\0\1\263"+
    "\50\157\14\0\1\161\55\0\2\46\4\0\4\46\1\165"+
    "\5\46\1\0\1\46\11\0\21\46\10\0\2\46\4\0"+
    "\11\46\1\165\1\0\1\46\11\0\21\46\2\0\1\166"+
    "\1\75\2\166\1\171\1\172\2\166\3\75\47\166\2\75"+
    "\1\167\1\76\1\167\1\264\2\76\2\167\3\76\47\167"+
    "\2\76\4\74\1\0\57\74\4\0\1\171\57\0\2\76"+
    "\1\265\1\173\60\76\6\0\2\11\4\0\4\11\1\266"+
    "\5\11\1\0\1\11\11\0\3\11\1\267\15\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\6\11\1\270"+
    "\12\11\10\0\2\11\4\0\10\11\1\271\1\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\7\11\1\272"+
    "\2\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\7\11\1\273\11\11\10\0"+
    "\2\11\4\0\10\11\1\274\1\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\10\11\1\275\1\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\276\20\11\10\0\2\11\4\0\2\11"+
    "\1\277\7\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\300\11\11"+
    "\10\0\2\11\4\0\2\11\1\301\7\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\14\11\1\302\4\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\5\11\1\303\13\11\10\0\2\11"+
    "\4\0\10\11\1\304\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\10\11\1\305\1\11\1\0\1\11"+
    "\11\0\7\11\1\306\11\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\6\11\1\307\12\11\10\0\2\11"+
    "\4\0\4\11\1\310\5\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\311\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\6\11"+
    "\1\312\12\11\10\0\2\11\4\0\12\11\1\0\1\313"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\314\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\4\11\1\315\14\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\6\11\1\316\12\11"+
    "\10\0\2\11\4\0\3\11\1\317\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\5\11\1\320\4\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\13\11\1\321\5\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\6\11\1\322\12\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\323\11\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\324\11\11\1\325\5\11\10\0\2\11"+
    "\4\0\10\11\1\326\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\327\11\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\5\11\1\330\13\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\331\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\332\17\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\13\11\1\333\5\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\5\11"+
    "\1\334\13\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\6\11\1\335\12\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\336\15\11\1\337\1\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\11\11"+
    "\1\340\7\11\10\0\2\11\4\0\7\11\1\341\2\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\5\11"+
    "\1\342\4\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\343\11\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\344\11\11\10\0\2\11\4\0\5\11\1\345\4\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\346\17\11\10\0\2\11"+
    "\4\0\7\11\1\347\2\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\1\350"+
    "\20\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\1\11\1\351\17\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\11\1\352\10\11\1\353\6\11\10\0"+
    "\2\11\4\0\10\11\1\354\1\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\11\11\1\355\1\11\1\356\5\11\10\0\2\11\4\0"+
    "\3\11\1\357\6\11\1\0\1\11\11\0\21\11\14\0"+
    "\1\156\51\0\1\167\1\76\1\72\1\264\2\76\2\167"+
    "\3\76\47\167\2\76\6\0\2\11\4\0\2\11\1\360"+
    "\7\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\7\11\1\361\2\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\7\11\1\362\2\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\5\11\1\363\4\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\7\11\1\364\11\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\11\11\1\365\7\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\13\11\1\366"+
    "\5\11\10\0\2\11\4\0\2\11\1\367\7\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\6\11\1\370"+
    "\3\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\6\11\1\371\12\11\10\0"+
    "\2\11\4\0\6\11\1\372\3\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\3\11\1\373\6\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\6\11\1\374\12\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\7\11\1\375\11\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\11\11\1\376"+
    "\7\11\10\0\2\11\4\0\3\11\1\377\6\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\6\11\1\u0100"+
    "\3\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\10\11\1\u0101\1\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\2\11\1\u0102\7\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\7\11\1\u0103\11\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\4\11\1\u0104\14\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\7\11\1\u0105\11\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\6\11\1\u0106"+
    "\12\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\1\11\1\u0107\17\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\11\1\u0108\17\11\10\0\2\11\4\0"+
    "\6\11\1\u0109\3\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\7\11\1\u010a"+
    "\11\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\7\11\1\u010b\11\11\10\0\2\11\4\0\2\11\1\u010c"+
    "\7\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\10\11\1\u010d\1\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\1\u010e\20\11"+
    "\10\0\2\11\4\0\4\11\1\u010f\5\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\u0110"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\7\11\1\u0111\11\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\u0112\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\u0113\17\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\14\11\1\u0114\4\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\11\11"+
    "\1\u0115\7\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\6\11\1\u0116\12\11\10\0\2\11\4\0\6\11"+
    "\1\u0117\3\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\3\11\1\u0118\6\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\3\11\1\u0119\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\6\11\1\u011a\12\11\10\0\2\11\4\0\5\11"+
    "\1\u011b\4\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\11\1\u011c\17\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\6\11"+
    "\1\u011d\12\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\7\11\1\u011e\11\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\u011f\17\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u0120\11\11"+
    "\10\0\2\11\4\0\10\11\1\u0121\1\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\u0122\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\4\11\1\u0123\14\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u0124\11\11"+
    "\10\0\2\11\4\0\3\11\1\u0125\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\3\11\1\u0126\6\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\14\11\1\u0127\4\11\10\0\2\11"+
    "\4\0\10\11\1\u0128\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\1\11"+
    "\1\u0129\17\11\10\0\2\11\4\0\10\11\1\u012a\1\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\4\11\1\u012b\14\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u012c\11\11"+
    "\10\0\2\11\4\0\10\11\1\u012d\1\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\u012e\17\11\10\0\2\11\4\0\10\11"+
    "\1\u012f\1\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u0130\11\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\u0131\11\11\10\0\2\11\4\0\6\11\1\u0132\3\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\u0133\17\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\4\11\1\u0134\14\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\u0135\11\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\4\11\1\u0136\14\11\10\0\2\11\4\0\4\11"+
    "\1\u0137\5\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\10\11\1\u0138\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\1\11"+
    "\1\u0139\17\11\10\0\2\11\4\0\2\11\1\u013a\7\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\10\11"+
    "\1\u013b\1\11\1\0\1\11\11\0\1\u013c\20\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\5\11\1\u013d"+
    "\13\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\7\11\1\u013e\11\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\7\11\1\u013f\11\11\10\0\2\11\4\0"+
    "\11\11\1\u0140\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\4\11\1\u0141\14\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\4\11"+
    "\1\u0142\14\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\12\11\1\u0143\6\11\10\0\2\11\4\0\10\11"+
    "\1\u0144\1\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u0145\11\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\u0146\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\11\11"+
    "\1\u0147\7\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\5\11\1\u0148\13\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\11\11\1\u0149\7\11\10\0\2\11"+
    "\4\0\4\11\1\u014a\5\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\10\11\1\u014b\1\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\6\11\1\u014c\3\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\6\11"+
    "\1\u014d\3\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\10\11\1\u014e\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\3\11\1\u014f\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\3\11\1\u0150\15\11\10\0\2\11\4\0\2\11"+
    "\1\u0151\7\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\3\11\1\u0152\6\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\1\11"+
    "\1\u0153\17\11\10\0\2\11\4\0\2\11\1\u0154\7\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\u0155\20\11\10\0\2\11\4\0"+
    "\10\11\1\u0156\1\11\1\0\1\11\11\0\7\11\1\u0157"+
    "\11\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\14\11\1\u0158\4\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\11\1\u0159\17\11\10\0\2\11\4\0"+
    "\4\11\1\u015a\5\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\16\11\1\u015b"+
    "\2\11\10\0\2\11\4\0\5\11\1\u015c\4\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\3\11\1\u015d"+
    "\6\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\7\11\1\u015e\11\11\10\0"+
    "\2\11\4\0\5\11\1\u015f\4\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\7\11\1\u0160\11\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\7\11\1\u0161\11\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\7\11\1\u0162\11\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\1\11\1\u0163"+
    "\17\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\1\11\1\u0164\17\11\10\0\2\11\4\0\3\11\1\u0165"+
    "\6\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\1\11\1\u0166\17\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\13\11\1\u0167"+
    "\5\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\7\11\1\u0168\11\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\7\11\1\u0169\11\11\10\0\2\11\4\0"+
    "\10\11\1\u016a\1\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\3\11\1\u016b\6\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\2\11\1\u016c\4\11\1\u016d"+
    "\2\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\10\11\1\u016e\1\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\11\11\1\u016f"+
    "\7\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\6\11\1\u0170\12\11\10\0\2\11\4\0\5\11\1\u0171"+
    "\4\11\1\0\1\11\11\0\21\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\7\11\1\u0172\11\11\10\0"+
    "\2\11\4\0\3\11\1\u0173\6\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\5\11\1\u0174\4\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\u0175\20\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\u0176\17\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\u0177\20\11\10\0"+
    "\2\11\4\0\2\11\1\u0178\7\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\5\11\1\u0179\4\11\1\0"+
    "\1\11\11\0\21\11\10\0\2\11\4\0\12\11\1\0"+
    "\1\11\11\0\1\11\1\u017a\17\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\u017b\11\0\21\11\10\0\2\11\4\0"+
    "\2\11\1\u017c\7\11\1\0\1\11\11\0\21\11\10\0"+
    "\2\11\4\0\3\11\1\u017d\6\11\1\0\1\11\11\0"+
    "\21\11\10\0\2\11\4\0\12\11\1\0\1\11\11\0"+
    "\1\u017e\20\11\10\0\2\11\4\0\12\11\1\0\1\u017f"+
    "\11\0\21\11\10\0\2\11\4\0\6\11\1\u0180\3\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\7\11"+
    "\1\u0181\2\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\7\11\1\u0182\2\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\2\11"+
    "\1\u0183\16\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\6\11\1\u0184\12\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\7\11\1\u0185\11\11\10\0\2\11"+
    "\4\0\6\11\1\u0186\3\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\7\11\1\u0187\2\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\11\11\1\u0188\7\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\5\11\1\u0189\13\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\14\11\1\u018a\4\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\u018b\11\11\10\0\2\11\4\0\5\11\1\u018c\4\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\u018d\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\4\11\1\u018e\14\11\10\0\2\11"+
    "\4\0\3\11\1\u018f\6\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\3\11\1\u0190\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\7\11\1\u0191\11\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\7\11\1\u0192\11\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\11\1\u0193\17\11"+
    "\10\0\2\11\4\0\3\11\1\u0194\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\10\11\1\u0195\1\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\10\11\1\u0196\10\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\11\1\u0197\17\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\u0198\11\0\21\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\u0199\11\11\10\0\2\11\4\0\10\11\1\u019a\1\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\2\11\1\u019b\16\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u019c\11\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\u019d\11\11\10\0\2\11\4\0\6\11\1\u019e\3\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\6\11"+
    "\1\u019f\3\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\11\11\1\u01a0\7\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\7\11"+
    "\1\u01a1\11\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\u01a2\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\14\11\1\u01a3\4\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\11\11\1\u01a4\7\11"+
    "\10\0\2\11\4\0\3\11\1\u01a5\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\u01a6\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\7\11\1\u01a7\11\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\u01a8\11\0\21\11\10\0\2\11"+
    "\4\0\10\11\1\u01a9\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\5\11\1\u01aa\4\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\2\11\1\u01ab\16\11\10\0\2\11\4\0\10\11"+
    "\1\u01ac\1\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\4\11\1\u01ad\5\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\3\11\1\u01ae\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\3\11\1\u01af\6\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\3\11"+
    "\1\u01b0\6\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u01b1\11\11"+
    "\10\0\2\11\4\0\10\11\1\u01b2\1\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\3\11\1\u01b3\6\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\u01b4\11\0\21\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\11\11\1\u01b5\7\11\10\0\2\11"+
    "\4\0\5\11\1\u01b6\4\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\4\11\1\u01b7\5\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\5\11\1\u01b8\4\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\3\11"+
    "\1\u01b9\6\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\5\11\1\u01ba\4\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\2\11\1\u01bb\7\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\11\11\1\u01bc\7\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\u01bd\17\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\11\1\u01be\17\11"+
    "\10\0\2\11\4\0\5\11\1\u01bf\4\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\u01c0\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\11\1\u01c1\17\11\10\0\2\11"+
    "\4\0\2\11\1\u01c2\7\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\10\11\1\u01c3\1\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\3\11\1\u01c4\6\11"+
    "\1\0\1\11\11\0\21\11\10\0\2\11\4\0\3\11"+
    "\1\u01c5\6\11\1\0\1\11\11\0\21\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\1\11\1\u01c6\17\11"+
    "\10\0\2\11\4\0\12\11\1\0\1\11\11\0\1\11"+
    "\1\u01c7\17\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\11\11\1\u01c8\7\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\11\11\1\u01c9\7\11\10\0\2\11"+
    "\4\0\3\11\1\u01ca\6\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\2\11\1\u01cb\7\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\5\11\1\u01cc\13\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\5\11\1\u01cd\13\11\10\0\2\11"+
    "\4\0\12\11\1\0\1\11\11\0\7\11\1\u01ce\11\11"+
    "\10\0\2\11\4\0\2\11\1\u01cf\7\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\5\11\1\u01d0\13\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\7\11\1\u01d1\11\11\10\0\2\11"+
    "\4\0\10\11\1\u01d2\1\11\1\0\1\11\11\0\21\11"+
    "\10\0\2\11\4\0\3\11\1\u01d3\6\11\1\0\1\11"+
    "\11\0\21\11\10\0\2\11\4\0\12\11\1\0\1\11"+
    "\11\0\1\11\1\u01d4\17\11\10\0\2\11\4\0\12\11"+
    "\1\0\1\11\11\0\1\u01d5\20\11\10\0\2\11\4\0"+
    "\12\11\1\0\1\11\11\0\11\11\1\u01d6\7\11\10\0"+
    "\2\11\4\0\12\11\1\0\1\11\11\0\7\11\1\u01d7"+
    "\11\11\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\1\1\11\25\1\2\11\1\1"+
    "\3\11\2\1\1\11\1\0\6\1\1\0\1\1\7\11"+
    "\5\1\1\0\57\1\1\11\2\0\1\1\1\11\5\1"+
    "\1\0\1\11\2\0\71\1\1\11\u0122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[471];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public YangFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 78: 
          { yybegin(BLACK_BOX_STRING); return OrderedBy;
          }
        case 93: break;
        case 25: 
          { yybegin(BLACK_BOX_STRING); return Rpc;
          }
        case 94: break;
        case 45: 
          { yybegin(BLACK_BOX_STRING); return Output;
          }
        case 95: break;
        case 26: 
          { yybegin(BLACK_BOX_STRING); return Bit;
          }
        case 96: break;
        case 82: 
          { yybegin(BLACK_BOX_STRING); return YinElement;
          }
        case 97: break;
        case 40: 
          { yybegin(BLACK_BOX_STRING); return Input;
          }
        case 98: break;
        case 83: 
          { yybegin(BLACK_BOX_STRING); return Notification;
          }
        case 99: break;
        case 63: 
          { yybegin(BLACK_BOX_STRING); return Pattern;
          }
        case 100: break;
        case 46: 
          { yybegin(BLACK_BOX_STRING); return Refine;
          }
        case 101: break;
        case 12: 
          { yybegin(YYINITIAL); return QuotationMark;
          }
        case 102: break;
        case 90: 
          { yybegin(BLACK_BOX_STRING); return ErrorMessage;
          }
        case 103: break;
        case 74: 
          { yybegin(BLACK_BOX_STRING); return Container;
          }
        case 104: break;
        case 30: 
          { yybegin(BLACK_BOX_STRING); return Case;
          }
        case 105: break;
        case 73: 
          { yybegin(BLACK_BOX_STRING); return Mandatory;
          }
        case 106: break;
        case 88: 
          { yybegin(BLACK_BOX_STRING); return RevisionDate;
          }
        case 107: break;
        case 21: 
          { yybegin(ID_EXPECTED); return Colon;
          }
        case 108: break;
        case 7: 
          { yybegin(IN_EXPRESSION_STRING); return QuotationMark;
          }
        case 109: break;
        case 17: 
          { return RightParenthesis;
          }
        case 110: break;
        case 64: 
          { yybegin(BLACK_BOX_STRING); return Argument;
          }
        case 111: break;
        case 32: 
          { yybegin(BLACK_BOX_STRING); return List;
          }
        case 112: break;
        case 76: 
          { yybegin(BLACK_BOX_STRING); return Extension;
          }
        case 113: break;
        case 13: 
          { return RULE_NUMBER;
          }
        case 114: break;
        case 77: 
          { yybegin(BLACK_BOX_STRING); return Submodule;
          }
        case 115: break;
        case 75: 
          { yybegin(BLACK_BOX_STRING); return LeafList;
          }
        case 116: break;
        case 43: 
          { yybegin(BLACK_BOX_STRING); return Anyxml;
          }
        case 117: break;
        case 67: 
          { yybegin(BLACK_BOX_STRING); return Grouping;
          }
        case 118: break;
        case 47: 
          { yybegin(BLACK_BOX_STRING); return Module;
          }
        case 119: break;
        case 36: 
          { yybegin(BLACK_BOX_STRING); return Base;
          }
        case 120: break;
        case 89: 
          { yybegin(BLACK_BOX_STRING); return ErrorAppTag;
          }
        case 121: break;
        case 10: 
          { return RULE_ID;
          }
        case 122: break;
        case 86: 
          { yybegin(BLACK_BOX_STRING); return MinElements;
          }
        case 123: break;
        case 23: 
          { return RULE_SL_COMMENT;
          }
        case 124: break;
        case 34: 
          { yybegin(BLACK_BOX_STRING); return Uses;
          }
        case 125: break;
        case 80: 
          { yybegin(BLACK_BOX_STRING); return BelongsTo;
          }
        case 126: break;
        case 55: 
          { yybegin(BLACK_BOX_STRING); return Anydata;
          }
        case 127: break;
        case 84: 
          { yybegin(BLACK_BOX_STRING); return Organization;
          }
        case 128: break;
        case 2: 
          { yybegin(COLON_EXPECTED);  return RULE_ID;
          }
        case 129: break;
        case 57: 
          { yybegin(BLACK_BOX_STRING); return Deviate;
          }
        case 130: break;
        case 61: 
          { yybegin(BLACK_BOX_STRING); return Typedef;
          }
        case 131: break;
        case 66: 
          { yybegin(BLACK_BOX_STRING); return Identity;
          }
        case 132: break;
        case 1: 
          { return RULE_WS;
          }
        case 133: break;
        case 85: 
          { yybegin(BLACK_BOX_STRING); return MaxElements;
          }
        case 134: break;
        case 8: 
          { return Solidus;
          }
        case 135: break;
        case 65: 
          { yybegin(BLACK_BOX_STRING); return Revision;
          }
        case 136: break;
        case 14: 
          { return FullStop;
          }
        case 137: break;
        case 68: 
          { yybegin(BLACK_BOX_STRING); return Position;
          }
        case 138: break;
        case 52: 
          { yybegin(AWAITING_EXPRESSION); return Unique;
          }
        case 139: break;
        case 37: 
          { yybegin(AWAITING_EXPRESSION); return Path;
          }
        case 140: break;
        case 62: 
          { yybegin(BLACK_BOX_STRING); return Feature;
          }
        case 141: break;
        case 49: 
          { yybegin(BLACK_BOX_STRING); return Config;
          }
        case 142: break;
        case 71: 
          { yybegin(AWAITING_EXPRESSION); return Deviation;
          }
        case 143: break;
        case 54: 
          { yybegin(BLACK_BOX_STRING); return Prefix;
          }
        case 144: break;
        case 48: 
          { yybegin(BLACK_BOX_STRING); return Import;
          }
        case 145: break;
        case 59: 
          { yybegin(BLACK_BOX_STRING); return Include;
          }
        case 146: break;
        case 16: 
          { return LeftParenthesis;
          }
        case 147: break;
        case 22: 
          { yybegin(BLACK_BOX_STRING); return RULE_ID;
          }
        case 148: break;
        case 31: 
          { yybegin(BLACK_BOX_STRING); return Type;
          }
        case 149: break;
        case 9: 
          { return RULE_OPERATOR;
          }
        case 150: break;
        case 44: 
          { yybegin(BLACK_BOX_STRING); return Action;
          }
        case 151: break;
        case 79: 
          { yybegin(AWAITING_EXPRESSION); return IfFeature;
          }
        case 152: break;
        case 29: 
          { yybegin(AWAITING_EXPRESSION); return Must;
          }
        case 153: break;
        case 87: 
          { yybegin(BLACK_BOX_STRING); return YangVersion;
          }
        case 154: break;
        case 35: 
          { yybegin(BLACK_BOX_STRING); return Enum;
          }
        case 155: break;
        case 15: 
          { return Colon;
          }
        case 156: break;
        case 39: 
          { yybegin(BLACK_BOX_STRING); return Range;
          }
        case 157: break;
        case 4: 
          { yybegin(YYINITIAL); return Semicolon;
          }
        case 158: break;
        case 92: 
          { yybegin(BLACK_BOX_STRING); return RequireInstance;
          }
        case 159: break;
        case 58: 
          { yybegin(BLACK_BOX_STRING); return Default;
          }
        case 160: break;
        case 6: 
          { yybegin(YYINITIAL); return RULE_ID;
          }
        case 161: break;
        case 91: 
          { yybegin(BLACK_BOX_STRING); return FractionDigits;
          }
        case 162: break;
        case 27: 
          { yybegin(AWAITING_EXPRESSION); return Key;
          }
        case 163: break;
        case 3: 
          { yybegin(YYINITIAL); return RightCurlyBracket;
          }
        case 164: break;
        case 69: 
          { yybegin(BLACK_BOX_STRING); return Presence;
          }
        case 165: break;
        case 81: 
          { yybegin(BLACK_BOX_STRING); return Description;
          }
        case 166: break;
        case 18: 
          { return LeftSquareBracket;
          }
        case 167: break;
        case 50: 
          { yybegin(BLACK_BOX_STRING); return Choice;
          }
        case 168: break;
        case 60: 
          { yybegin(BLACK_BOX_STRING); return Contact;
          }
        case 169: break;
        case 51: 
          { yybegin(BLACK_BOX_STRING); return Length;
          }
        case 170: break;
        case 41: 
          { yybegin(BLACK_BOX_STRING); return Value;
          }
        case 171: break;
        case 70: 
          { yybegin(BLACK_BOX_STRING); return Namespace;
          }
        case 172: break;
        case 38: 
          { yybegin(AWAITING_EXPRESSION); return When;
          }
        case 173: break;
        case 19: 
          { return RightSquareBracket;
          }
        case 174: break;
        case 11: 
          { return RULE_STRING;
          }
        case 175: break;
        case 72: 
          { yybegin(BLACK_BOX_STRING); return Reference;
          }
        case 176: break;
        case 33: 
          { yybegin(BLACK_BOX_STRING); return Leaf;
          }
        case 177: break;
        case 20: 
          { return Comma;
          }
        case 178: break;
        case 24: 
          { return FullStopFullStop;
          }
        case 179: break;
        case 5: 
          { yybegin(YYINITIAL); return LeftCurlyBracket;
          }
        case 180: break;
        case 56: 
          { yybegin(BLACK_BOX_STRING); return Augment;
          }
        case 181: break;
        case 53: 
          { yybegin(BLACK_BOX_STRING); return Status;
          }
        case 182: break;
        case 42: 
          { yybegin(BLACK_BOX_STRING); return Units;
          }
        case 183: break;
        case 28: 
          { return RULE_ML_COMMENT;
          }
        case 184: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
