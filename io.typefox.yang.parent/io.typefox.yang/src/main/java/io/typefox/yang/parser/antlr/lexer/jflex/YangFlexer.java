/* The following code was generated by JFlex 1.4.3 on 6/5/17 10:39 AM */

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/5/17 10:39 AM from the specification file
 * <tt>./src/main/java/io/typefox/yang/parser/antlr/lexer/jflex/YangFlexer.flex</tt>
 */
public class YangFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_EXPRESSION_STRING = 4;
  public static final int AWAITING_EXPRESSION = 2;
  public static final int YYINITIAL = 0;
  public static final int ID_EXPECTED = 8;
  public static final int BLACK_BOX_STRING = 10;
  public static final int COLON_EXPECTED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\2\0\1\5\22\0\1\1\1\0\1\12\4\0"+
    "\1\11\2\0\1\3\2\0\1\36\1\7\1\2\12\7\1\14\1\47"+
    "\5\0\32\6\1\0\1\13\2\0\1\7\1\0\1\15\1\34\1\16"+
    "\1\24\1\33\1\40\1\31\1\37\1\20\1\6\1\43\1\27\1\26"+
    "\1\22\1\21\1\41\1\45\1\30\1\35\1\17\1\32\1\42\1\46"+
    "\1\25\1\23\1\44\1\50\1\0\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\25\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\3\11"+
    "\1\15\1\0\57\2\3\11\1\0\1\15\2\0\43\2"+
    "\1\16\7\2\1\17\11\2\1\20\1\2\1\11\1\21"+
    "\5\2\1\22\3\2\1\23\23\2\1\24\1\25\1\26"+
    "\11\2\1\27\1\30\2\2\1\31\6\2\1\32\4\2"+
    "\1\33\12\2\1\34\23\2\1\35\5\2\1\36\14\2"+
    "\1\37\1\40\1\2\1\41\4\2\1\42\1\43\3\2"+
    "\1\44\3\2\1\45\12\2\1\46\1\2\1\47\1\50"+
    "\4\2\1\51\3\2\1\52\6\2\1\53\1\54\1\2"+
    "\1\55\1\56\1\2\1\57\1\60\11\2\1\61\1\2"+
    "\1\62\16\2\1\63\1\64\2\2\1\65\1\2\1\66"+
    "\16\2\1\67\1\2\1\70\6\2\1\71\1\72\1\73"+
    "\3\2\1\74\4\2\1\75\1\76\2\2\1\77\1\100"+
    "\2\2\1\101\3\2\1\102\1\2\1\103\1\104\13\2"+
    "\1\105\4\2\1\106\1\107\7\2\1\110\1\111\1\112"+
    "\1\113\1\114\5\2\1\115\1\2\1\116\1\117\4\2"+
    "\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u0171"+
    "\0\u0171\0\u04f7\0\u0171\0\u0520\0\u0549\0\u0171\0\u0171\0\u0572"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0171\0\u0def\0\u0e18\0\u0e41"+
    "\0\u0171\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u0148\0\u1457"+
    "\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u0148\0\u1576"+
    "\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be"+
    "\0\u0148\0\u16e7\0\u1710\0\u0171\0\u1739\0\u1762\0\u178b\0\u17b4"+
    "\0\u17dd\0\u0148\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3"+
    "\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b"+
    "\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63"+
    "\0\u1b8c\0\u0148\0\u0148\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59"+
    "\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u0148\0\u0148\0\u1d4f"+
    "\0\u1d78\0\u0148\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e"+
    "\0\u0148\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u0148\0\u1f3b\0\u1f64"+
    "\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac"+
    "\0\u0148\0\u20d5\0\u20fe\0\u2127\0\u2150\0\u2179\0\u21a2\0\u21cb"+
    "\0\u21f4\0\u221d\0\u2246\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313"+
    "\0\u233c\0\u2365\0\u238e\0\u23b7\0\u0148\0\u23e0\0\u2409\0\u2432"+
    "\0\u245b\0\u2484\0\u0148\0\u24ad\0\u24d6\0\u24ff\0\u2528\0\u2551"+
    "\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670\0\u0148"+
    "\0\u0148\0\u2699\0\u0148\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u0148"+
    "\0\u0148\0\u2766\0\u278f\0\u27b8\0\u0148\0\u27e1\0\u280a\0\u2833"+
    "\0\u0148\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900\0\u2929\0\u2952"+
    "\0\u297b\0\u29a4\0\u29cd\0\u0148\0\u29f6\0\u0148\0\u0148\0\u2a1f"+
    "\0\u2a48\0\u2a71\0\u2a9a\0\u0148\0\u2ac3\0\u2aec\0\u2b15\0\u0148"+
    "\0\u2b3e\0\u2b67\0\u2b90\0\u2bb9\0\u2be2\0\u2c0b\0\u0148\0\u0148"+
    "\0\u2c34\0\u0148\0\u0148\0\u2c5d\0\u0148\0\u0148\0\u2c86\0\u2caf"+
    "\0\u2cd8\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u0148"+
    "\0\u2df7\0\u0148\0\u2e20\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed"+
    "\0\u2f16\0\u2f3f\0\u2f68\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035"+
    "\0\u0148\0\u0148\0\u305e\0\u3087\0\u0148\0\u30b0\0\u0148\0\u30d9"+
    "\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf\0\u31f8\0\u3221"+
    "\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317\0\u3340\0\u0148"+
    "\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u0148\0\u0148"+
    "\0\u0148\0\u345f\0\u3488\0\u34b1\0\u0148\0\u34da\0\u3503\0\u352c"+
    "\0\u3555\0\u0148\0\u0148\0\u357e\0\u35a7\0\u0148\0\u0148\0\u35d0"+
    "\0\u35f9\0\u0148\0\u3622\0\u364b\0\u3674\0\u0148\0\u369d\0\u0148"+
    "\0\u0148\0\u36c6\0\u36ef\0\u3718\0\u3741\0\u376a\0\u3793\0\u37bc"+
    "\0\u37e5\0\u380e\0\u3837\0\u3860\0\u0148\0\u3889\0\u38b2\0\u38db"+
    "\0\u3904\0\u0148\0\u0148\0\u392d\0\u3956\0\u397f\0\u39a8\0\u39d1"+
    "\0\u39fa\0\u3a23\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u3a4c"+
    "\0\u3a75\0\u3a9e\0\u3ac7\0\u3af0\0\u0148\0\u3b19\0\u0148\0\u0148"+
    "\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd\0\u0148\0\u0148";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\7\1\10\1\0\2\7\1\11\1\0\1\12"+
    "\4\0\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\11\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\0\1\11\1\33\1\34\1\35\1\36"+
    "\2\11\1\37\1\40\1\41\1\0\1\7\1\10\1\0"+
    "\2\7\1\42\1\0\1\12\1\0\1\43\2\0\21\42"+
    "\1\0\10\42\1\40\1\41\1\0\1\7\2\0\2\7"+
    "\1\44\1\0\1\12\1\45\1\46\2\0\21\44\1\0"+
    "\10\44\1\40\1\41\1\0\1\7\2\0\2\7\2\0"+
    "\1\12\3\0\1\47\32\0\1\40\1\41\1\0\1\7"+
    "\2\0\2\7\1\50\1\0\1\12\4\0\21\50\1\0"+
    "\10\50\1\40\1\41\1\51\1\7\1\52\1\51\2\7"+
    "\2\51\1\12\1\45\1\53\34\51\1\40\1\41\1\0"+
    "\1\7\2\0\2\7\45\0\1\54\1\55\53\0\2\11"+
    "\5\0\32\11\61\0\2\11\5\0\1\11\1\56\3\11"+
    "\1\57\5\11\1\60\1\11\1\61\14\11\10\0\2\11"+
    "\5\0\1\62\3\11\1\63\15\11\1\64\7\11\10\0"+
    "\2\11\5\0\6\11\1\65\23\11\10\0\2\11\5\0"+
    "\5\11\1\66\1\11\1\67\1\11\1\70\11\11\1\71"+
    "\6\11\10\0\2\11\5\0\13\11\1\72\1\11\1\73"+
    "\14\11\10\0\2\11\5\0\1\74\3\11\1\75\25\11"+
    "\10\0\2\11\5\0\1\76\2\11\1\77\26\11\10\0"+
    "\2\11\5\0\16\11\1\100\13\11\10\0\2\11\5\0"+
    "\1\101\2\11\1\102\1\103\10\11\1\104\14\11\10\0"+
    "\2\11\5\0\3\11\1\105\12\11\1\106\13\11\10\0"+
    "\2\11\5\0\1\107\15\11\1\110\5\11\1\111\5\11"+
    "\10\0\2\11\5\0\13\11\1\112\16\11\10\0\2\11"+
    "\5\0\5\11\1\113\12\11\1\114\11\11\10\0\2\11"+
    "\5\0\5\11\1\115\2\11\1\116\2\11\1\117\16\11"+
    "\10\0\2\11\5\0\1\120\2\11\1\121\12\11\1\122"+
    "\13\11\10\0\2\11\5\0\2\11\1\123\12\11\1\124"+
    "\14\11\10\0\2\11\5\0\13\11\1\125\2\11\1\126"+
    "\13\11\10\0\2\11\5\0\1\127\3\11\1\130\6\11"+
    "\1\131\16\11\10\0\2\11\5\0\1\132\31\11\10\0"+
    "\2\11\5\0\16\11\1\133\13\11\10\0\2\11\5\0"+
    "\22\11\1\134\7\11\10\0\2\42\5\0\32\42\10\0"+
    "\2\44\5\0\32\44\2\0\11\45\1\135\37\45\6\0"+
    "\2\50\5\0\32\50\2\0\1\51\1\0\2\51\2\0"+
    "\2\51\3\0\34\51\2\0\1\51\1\0\1\136\1\137"+
    "\2\0\2\51\3\0\34\51\2\0\12\53\1\135\1\140"+
    "\35\53\4\54\1\141\1\142\43\54\3\55\1\143\45\55"+
    "\6\0\2\11\5\0\2\11\1\144\27\11\10\0\2\11"+
    "\5\0\6\11\1\145\23\11\10\0\2\11\5\0\14\11"+
    "\1\146\15\11\10\0\2\11\5\0\14\11\1\147\15\11"+
    "\10\0\2\11\5\0\20\11\1\150\11\11\10\0\2\11"+
    "\5\0\5\11\1\151\24\11\10\0\2\11\5\0\4\11"+
    "\1\152\25\11\10\0\2\11\5\0\24\11\1\153\5\11"+
    "\10\0\2\11\5\0\1\11\1\154\22\11\1\155\5\11"+
    "\10\0\2\11\5\0\16\11\1\156\13\11\10\0\2\11"+
    "\5\0\24\11\1\157\5\11\10\0\2\11\5\0\21\11"+
    "\1\160\10\11\10\0\2\11\5\0\7\11\1\161\4\11"+
    "\1\162\15\11\10\0\2\11\5\0\2\11\1\163\27\11"+
    "\10\0\2\11\5\0\11\11\1\164\20\11\10\0\2\11"+
    "\5\0\2\11\1\165\27\11\10\0\2\11\5\0\5\11"+
    "\1\166\24\11\10\0\2\11\5\0\5\11\1\167\24\11"+
    "\10\0\2\11\5\0\20\11\1\170\2\11\1\171\1\11"+
    "\1\172\4\11\10\0\2\11\5\0\5\11\1\173\2\11"+
    "\1\174\21\11\10\0\2\11\5\0\5\11\1\175\24\11"+
    "\10\0\2\11\5\0\7\11\1\176\22\11\10\0\2\11"+
    "\5\0\20\11\1\177\11\11\10\0\2\11\5\0\20\11"+
    "\1\200\11\11\10\0\2\11\5\0\1\201\4\11\1\202"+
    "\24\11\10\0\2\11\5\0\5\11\1\203\24\11\10\0"+
    "\2\11\5\0\23\11\1\204\1\11\1\205\2\11\1\206"+
    "\1\11\10\0\2\11\5\0\1\11\1\207\30\11\10\0"+
    "\2\11\5\0\4\11\1\210\25\11\10\0\2\11\5\0"+
    "\3\11\1\211\26\11\10\0\2\11\5\0\16\11\1\212"+
    "\13\11\10\0\2\11\5\0\15\11\1\213\14\11\10\0"+
    "\2\11\5\0\2\11\1\214\27\11\10\0\2\11\5\0"+
    "\13\11\1\215\16\11\10\0\2\11\5\0\20\11\1\216"+
    "\11\11\10\0\2\11\5\0\2\11\1\217\27\11\10\0"+
    "\2\11\5\0\12\11\1\220\17\11\10\0\2\11\5\0"+
    "\1\221\31\11\10\0\2\11\5\0\17\11\1\222\12\11"+
    "\10\0\2\11\5\0\1\223\31\11\10\0\2\11\5\0"+
    "\1\224\31\11\10\0\2\11\5\0\2\11\1\225\27\11"+
    "\10\0\2\11\5\0\20\11\1\226\11\11\10\0\2\11"+
    "\5\0\16\11\1\227\13\11\10\0\2\11\5\0\12\11"+
    "\1\230\17\11\10\0\2\11\5\0\6\11\1\231\23\11"+
    "\10\0\2\11\5\0\16\11\1\232\13\11\2\0\1\136"+
    "\1\54\2\136\1\141\1\142\2\136\3\54\34\136\2\54"+
    "\1\137\1\55\1\137\1\233\2\55\2\137\3\55\34\137"+
    "\2\55\4\53\1\0\44\53\4\0\1\141\44\0\2\55"+
    "\1\234\1\143\45\55\6\0\2\11\5\0\3\11\1\235"+
    "\26\11\10\0\2\11\5\0\7\11\1\236\1\237\21\11"+
    "\10\0\2\11\5\0\15\11\1\240\14\11\10\0\2\11"+
    "\5\0\11\11\1\241\20\11\10\0\2\11\5\0\16\11"+
    "\1\242\13\11\10\0\2\11\5\0\2\11\1\243\20\11"+
    "\1\244\6\11\10\0\2\11\5\0\3\11\1\245\26\11"+
    "\10\0\2\11\5\0\16\11\1\246\13\11\10\0\2\11"+
    "\5\0\12\11\1\247\17\11\10\0\2\11\5\0\15\11"+
    "\1\250\14\11\10\0\2\11\5\0\5\11\1\251\24\11"+
    "\10\0\2\11\5\0\4\11\1\252\25\11\10\0\2\11"+
    "\5\0\23\11\1\253\6\11\10\0\2\11\5\0\16\11"+
    "\1\254\13\11\10\0\2\11\5\0\1\255\31\11\10\0"+
    "\2\11\5\0\24\11\1\256\5\11\10\0\2\11\5\0"+
    "\16\11\1\257\13\11\10\0\2\11\5\0\3\11\1\260"+
    "\26\11\10\0\2\11\5\0\14\11\1\261\15\11\10\0"+
    "\2\11\5\0\21\11\1\262\10\11\10\0\2\11\5\0"+
    "\1\11\1\263\30\11\10\0\2\11\5\0\1\264\31\11"+
    "\10\0\2\11\5\0\3\11\1\265\26\11\10\0\2\11"+
    "\5\0\7\11\1\266\22\11\10\0\2\11\5\0\21\11"+
    "\1\267\10\11\10\0\2\11\5\0\21\11\1\270\10\11"+
    "\10\0\2\11\5\0\15\11\1\271\14\11\10\0\2\11"+
    "\5\0\2\11\1\272\27\11\10\0\2\11\5\0\2\11"+
    "\1\273\27\11\10\0\2\11\5\0\23\11\1\274\6\11"+
    "\10\0\2\11\5\0\14\11\1\275\15\11\10\0\2\11"+
    "\5\0\14\11\1\276\15\11\10\0\2\11\5\0\3\11"+
    "\1\277\12\11\1\300\13\11\10\0\2\11\5\0\3\11"+
    "\1\301\26\11\10\0\2\11\5\0\15\11\1\302\14\11"+
    "\10\0\2\11\5\0\15\11\1\303\14\11\10\0\2\11"+
    "\5\0\2\11\1\304\25\11\1\305\1\11\10\0\2\11"+
    "\5\0\20\11\1\306\11\11\10\0\2\11\5\0\11\11"+
    "\1\307\20\11\10\0\2\11\5\0\16\11\1\310\13\11"+
    "\10\0\2\11\5\0\4\11\1\311\25\11\10\0\2\11"+
    "\5\0\16\11\1\312\13\11\10\0\2\11\5\0\4\11"+
    "\1\313\25\11\10\0\2\11\5\0\2\11\1\314\27\11"+
    "\10\0\2\11\5\0\11\11\1\315\20\11\10\0\2\11"+
    "\5\0\1\11\1\316\30\11\10\0\2\11\5\0\2\11"+
    "\1\317\27\11\10\0\2\11\5\0\2\11\1\320\17\11"+
    "\1\321\7\11\10\0\2\11\5\0\3\11\1\322\26\11"+
    "\10\0\2\11\5\0\20\11\1\323\2\11\1\324\6\11"+
    "\10\0\2\11\5\0\15\11\1\325\14\11\10\0\2\11"+
    "\5\0\5\11\1\326\24\11\2\0\1\137\1\55\1\51"+
    "\1\233\2\55\2\137\3\55\34\137\2\55\6\0\2\11"+
    "\5\0\4\11\1\327\25\11\10\0\2\11\5\0\1\330"+
    "\31\11\10\0\2\11\5\0\11\11\1\331\20\11\10\0"+
    "\2\11\5\0\11\11\1\332\20\11\10\0\2\11\5\0"+
    "\16\11\1\333\13\11\10\0\2\11\5\0\1\334\31\11"+
    "\10\0\2\11\5\0\3\11\1\335\26\11\10\0\2\11"+
    "\5\0\1\11\1\336\30\11\10\0\2\11\5\0\7\11"+
    "\1\337\22\11\10\0\2\11\5\0\15\11\1\340\14\11"+
    "\10\0\2\11\5\0\2\11\1\341\27\11\10\0\2\11"+
    "\5\0\2\11\1\342\27\11\10\0\2\11\5\0\13\11"+
    "\1\343\16\11\10\0\2\11\5\0\16\11\1\344\13\11"+
    "\10\0\2\11\5\0\13\11\1\345\16\11\10\0\2\11"+
    "\5\0\5\11\1\346\24\11\10\0\2\11\5\0\15\11"+
    "\1\347\14\11\10\0\2\11\5\0\20\11\1\350\11\11"+
    "\10\0\2\11\5\0\23\11\1\351\6\11\10\0\2\11"+
    "\5\0\21\11\1\352\10\11\10\0\2\11\5\0\16\11"+
    "\1\353\13\11\10\0\2\11\5\0\13\11\1\354\16\11"+
    "\10\0\2\11\5\0\15\11\1\355\14\11\10\0\2\11"+
    "\5\0\1\356\31\11\10\0\2\11\5\0\1\357\31\11"+
    "\10\0\2\11\5\0\16\11\1\360\13\11\10\0\2\11"+
    "\5\0\16\11\1\361\13\11\10\0\2\11\5\0\12\11"+
    "\1\362\17\11\10\0\2\11\5\0\21\11\1\363\10\11"+
    "\10\0\2\11\5\0\2\11\1\364\27\11\10\0\2\11"+
    "\5\0\16\11\1\365\13\11\10\0\2\11\5\0\5\11"+
    "\1\366\24\11\10\0\2\11\5\0\13\11\1\367\16\11"+
    "\10\0\2\11\5\0\20\11\1\370\11\11\10\0\2\11"+
    "\5\0\3\11\1\371\26\11\10\0\2\11\5\0\24\11"+
    "\1\372\5\11\10\0\2\11\5\0\20\11\1\373\11\11"+
    "\10\0\2\11\5\0\15\11\1\374\14\11\10\0\2\11"+
    "\5\0\5\11\1\375\24\11\10\0\2\11\5\0\13\11"+
    "\1\376\16\11\10\0\2\11\5\0\5\11\1\377\24\11"+
    "\10\0\2\11\5\0\15\11\1\u0100\14\11\10\0\2\11"+
    "\5\0\4\11\1\u0101\25\11\10\0\2\11\5\0\2\11"+
    "\1\u0102\27\11\10\0\2\11\5\0\15\11\1\u0103\14\11"+
    "\10\0\2\11\5\0\16\11\1\u0104\13\11\10\0\2\11"+
    "\5\0\2\11\1\u0105\27\11\10\0\2\11\5\0\16\11"+
    "\1\u0106\13\11\10\0\2\11\5\0\3\11\1\u0107\26\11"+
    "\10\0\2\11\5\0\16\11\1\u0108\13\11\10\0\2\11"+
    "\5\0\5\11\1\u0109\24\11\10\0\2\11\5\0\2\11"+
    "\1\u010a\27\11\10\0\2\11\5\0\12\11\1\u010b\17\11"+
    "\10\0\2\11\5\0\16\11\1\u010c\13\11\10\0\2\11"+
    "\5\0\5\11\1\u010d\24\11\10\0\2\11\5\0\1\11"+
    "\1\u010e\1\11\1\u010f\26\11\10\0\2\11\5\0\14\11"+
    "\1\u0110\15\11\10\0\2\11\5\0\16\11\1\u0111\13\11"+
    "\10\0\2\11\5\0\16\11\1\u0112\13\11\10\0\2\11"+
    "\5\0\7\11\1\u0113\22\11\10\0\2\11\5\0\3\11"+
    "\1\u0114\26\11\10\0\2\11\5\0\2\11\1\u0115\27\11"+
    "\10\0\2\11\5\0\1\u0116\31\11\10\0\2\11\5\0"+
    "\16\11\1\u0117\13\11\10\0\2\11\5\0\3\11\1\u0118"+
    "\26\11\10\0\2\11\5\0\2\11\1\u0119\27\11\10\0"+
    "\2\11\5\0\24\11\1\u011a\5\11\10\0\2\11\5\0"+
    "\3\11\1\u011b\26\11\10\0\2\11\5\0\25\11\1\u011c"+
    "\4\11\10\0\2\11\5\0\12\11\1\u011d\17\11\10\0"+
    "\2\11\5\0\3\11\1\u011e\26\11\10\0\2\11\5\0"+
    "\12\11\1\u011f\17\11\10\0\2\11\5\0\2\11\1\u0120"+
    "\27\11\10\0\2\11\5\0\2\11\1\u0121\27\11\10\0"+
    "\2\11\5\0\12\11\1\u0122\17\11\10\0\2\11\5\0"+
    "\12\11\1\u0123\17\11\10\0\2\11\5\0\16\11\1\u0124"+
    "\13\11\10\0\2\11\5\0\12\11\1\u0125\17\11\10\0"+
    "\2\11\5\0\22\11\1\u0126\7\11\10\0\2\11\5\0"+
    "\16\11\1\u0127\13\11\10\0\2\11\5\0\16\11\1\u0128"+
    "\13\11\10\0\2\11\5\0\3\11\1\u0129\26\11\10\0"+
    "\2\11\5\0\13\11\1\u012a\16\11\10\0\2\11\5\0"+
    "\3\11\1\u012b\26\11\10\0\2\11\5\0\16\11\1\u012c"+
    "\13\11\10\0\2\11\5\0\20\11\1\u012d\11\11\10\0"+
    "\2\11\5\0\21\11\1\u012e\10\11\10\0\2\11\5\0"+
    "\14\11\1\u012f\15\11\10\0\2\11\5\0\20\11\1\u0130"+
    "\11\11\10\0\2\11\5\0\7\11\1\u0131\22\11\10\0"+
    "\2\11\5\0\3\11\1\u0132\26\11\10\0\2\11\5\0"+
    "\13\11\1\u0133\16\11\10\0\2\11\5\0\13\11\1\u0134"+
    "\16\11\10\0\2\11\5\0\3\11\1\u0135\26\11\10\0"+
    "\2\11\5\0\5\11\1\u0136\24\11\10\0\2\11\5\0"+
    "\10\11\1\u0137\21\11\10\0\2\11\5\0\1\u0138\31\11"+
    "\10\0\2\11\5\0\5\11\1\u0139\24\11\10\0\2\11"+
    "\5\0\2\11\1\u013a\27\11\10\0\2\11\5\0\2\11"+
    "\1\u013b\27\11\10\0\2\11\5\0\5\11\1\u013c\24\11"+
    "\10\0\2\11\5\0\23\11\1\u013d\6\11\10\0\2\11"+
    "\5\0\16\11\1\u013e\13\11\10\0\2\11\5\0\2\11"+
    "\1\u013f\27\11\10\0\2\11\5\0\2\11\1\u0140\27\11"+
    "\10\0\2\11\5\0\7\11\1\u0141\22\11\10\0\2\11"+
    "\5\0\27\11\1\u0142\2\11\10\0\2\11\5\0\1\u0143"+
    "\31\11\10\0\2\11\5\0\1\11\1\u0144\30\11\10\0"+
    "\2\11\5\0\16\11\1\u0145\13\11\10\0\2\11\5\0"+
    "\16\11\1\u0146\13\11\10\0\2\11\5\0\24\11\1\u0147"+
    "\5\11\10\0\2\11\5\0\2\11\1\u0148\27\11\10\0"+
    "\2\11\5\0\3\11\1\u0149\12\11\1\u014a\13\11\10\0"+
    "\2\11\5\0\4\11\1\u014b\25\11\10\0\2\11\5\0"+
    "\16\11\1\u014c\13\11\10\0\2\11\5\0\16\11\1\u014d"+
    "\13\11\10\0\2\11\5\0\3\11\1\u014e\26\11\10\0"+
    "\2\11\5\0\5\11\1\u014f\24\11\10\0\2\11\5\0"+
    "\4\11\1\u0150\25\11\10\0\2\11\5\0\16\11\1\u0151"+
    "\13\11\10\0\2\11\5\0\5\11\1\u0152\24\11\10\0"+
    "\2\11\5\0\3\11\1\u0153\26\11\10\0\2\11\5\0"+
    "\1\u0154\10\11\1\u0155\20\11\10\0\2\11\5\0\20\11"+
    "\1\u0156\11\11\10\0\2\11\5\0\15\11\1\u0157\14\11"+
    "\10\0\2\11\5\0\4\11\1\u0158\25\11\10\0\2\11"+
    "\5\0\16\11\1\u0159\13\11\10\0\2\11\5\0\5\11"+
    "\1\u015a\24\11\10\0\2\11\5\0\4\11\1\u015b\25\11"+
    "\10\0\2\11\5\0\1\11\1\u015c\30\11\10\0\2\11"+
    "\5\0\2\11\1\u015d\27\11\10\0\2\11\5\0\16\11"+
    "\1\u015e\13\11\10\0\2\11\5\0\6\11\1\u015f\23\11"+
    "\10\0\2\11\5\0\15\11\1\u0160\14\11\10\0\2\11"+
    "\5\0\21\11\1\u0161\10\11\10\0\2\11\5\0\1\u0162"+
    "\31\11\10\0\2\11\5\0\1\11\1\u0163\30\11\10\0"+
    "\2\11\5\0\1\u0164\31\11\10\0\2\11\5\0\13\11"+
    "\1\u0165\16\11\10\0\2\11\5\0\11\11\1\u0166\20\11"+
    "\10\0\2\11\5\0\2\11\1\u0167\27\11\10\0\2\11"+
    "\5\0\4\11\1\u0168\25\11\10\0\2\11\5\0\13\11"+
    "\1\u0169\16\11\10\0\2\11\5\0\11\11\1\u016a\20\11"+
    "\10\0\2\11\5\0\11\11\1\u016b\20\11\10\0\2\11"+
    "\5\0\20\11\1\u016c\11\11\10\0\2\11\5\0\1\11"+
    "\1\u016d\30\11\10\0\2\11\5\0\5\11\1\u016e\24\11"+
    "\10\0\2\11\5\0\21\11\1\u016f\10\11\10\0\2\11"+
    "\5\0\14\11\1\u0170\15\11\10\0\2\11\5\0\4\11"+
    "\1\u0171\25\11\10\0\2\11\5\0\24\11\1\u0172\5\11"+
    "\10\0\2\11\5\0\16\11\1\u0173\13\11\10\0\2\11"+
    "\5\0\21\11\1\u0174\10\11\10\0\2\11\5\0\12\11"+
    "\1\u0175\17\11\10\0\2\11\5\0\5\11\1\u0176\24\11"+
    "\10\0\2\11\5\0\5\11\1\u0177\24\11\10\0\2\11"+
    "\5\0\16\11\1\u0178\13\11\10\0\2\11\5\0\13\11"+
    "\1\u0179\16\11\10\0\2\11\5\0\13\11\1\u017a\16\11"+
    "\10\0\2\11\5\0\17\11\1\u017b\12\11\10\0\2\11"+
    "\5\0\2\11\1\u017c\27\11\10\0\2\11\5\0\16\11"+
    "\1\u017d\13\11\10\0\2\11\5\0\2\11\1\u017e\27\11"+
    "\10\0\2\11\5\0\20\11\1\u017f\11\11\10\0\2\11"+
    "\5\0\16\11\1\u0180\13\11\10\0\2\11\5\0\3\11"+
    "\1\u0181\26\11\10\0\2\11\5\0\5\11\1\u0182\24\11"+
    "\10\0\2\11\5\0\6\11\1\u0183\23\11\10\0\2\11"+
    "\5\0\16\11\1\u0184\13\11\10\0\2\11\5\0\16\11"+
    "\1\u0185\13\11\10\0\2\11\5\0\2\11\1\u0186\27\11"+
    "\10\0\2\11\5\0\16\11\1\u0187\13\11\10\0\2\11"+
    "\5\0\21\11\1\u0188\10\11\10\0\2\11\5\0\3\11"+
    "\1\u0189\26\11\10\0\2\11\5\0\5\11\1\u018a\24\11"+
    "\10\0\2\11\5\0\24\11\1\u018b\5\11\10\0\2\11"+
    "\5\0\20\11\1\u018c\11\11\10\0\2\11\5\0\2\11"+
    "\1\u018d\27\11\10\0\2\11\5\0\16\11\1\u018e\13\11"+
    "\10\0\2\11\5\0\21\11\1\u018f\10\11\10\0\2\11"+
    "\5\0\16\11\1\u0190\13\11\10\0\2\11\5\0\6\11"+
    "\1\u0191\23\11\10\0\2\11\5\0\3\11\1\u0192\26\11"+
    "\10\0\2\11\5\0\3\11\1\u0193\26\11\10\0\2\11"+
    "\5\0\3\11\1\u0194\26\11\10\0\2\11\5\0\5\11"+
    "\1\u0195\24\11\10\0\2\11\5\0\4\11\1\u0196\25\11"+
    "\10\0\2\11\5\0\5\11\1\u0197\24\11\10\0\2\11"+
    "\5\0\5\11\1\u0198\24\11\10\0\2\11\5\0\7\11"+
    "\1\u0199\22\11\10\0\2\11\5\0\5\11\1\u019a\24\11"+
    "\10\0\2\11\5\0\21\11\1\u019b\10\11\10\0\2\11"+
    "\5\0\20\11\1\u019c\11\11\10\0\2\11\5\0\4\11"+
    "\1\u019d\25\11\10\0\2\11\5\0\7\11\1\u019e\22\11"+
    "\10\0\2\11\5\0\4\11\1\u019f\25\11\10\0\2\11"+
    "\5\0\4\11\1\u01a0\25\11\10\0\2\11\5\0\4\11"+
    "\1\u01a1\25\11\10\0\2\11\5\0\2\11\1\u01a2\27\11"+
    "\10\0\2\11\5\0\5\11\1\u01a3\24\11\10\0\2\11"+
    "\5\0\2\11\1\u01a4\27\11\10\0\2\11\5\0\2\11"+
    "\1\u01a5\27\11\10\0\2\11\5\0\1\u01a6\31\11\10\0"+
    "\2\11\5\0\20\11\1\u01a7\11\11\10\0\2\11\5\0"+
    "\2\11\1\u01a8\27\11\10\0\2\11\5\0\1\u01a9\31\11"+
    "\10\0\2\11\5\0\3\11\1\u01aa\26\11\10\0\2\11"+
    "\5\0\5\11\1\u01ab\24\11\10\0\2\11\5\0\5\11"+
    "\1\u01ac\24\11\10\0\2\11\5\0\5\11\1\u01ad\24\11"+
    "\10\0\2\11\5\0\20\11\1\u01ae\11\11\10\0\2\11"+
    "\5\0\20\11\1\u01af\11\11\10\0\2\11\5\0\2\11"+
    "\1\u01b0\27\11\10\0\2\11\5\0\2\11\1\u01b1\27\11"+
    "\10\0\2\11\5\0\1\u01b2\31\11\10\0\2\11\5\0"+
    "\14\11\1\u01b3\15\11\10\0\2\11\5\0\14\11\1\u01b4"+
    "\15\11\10\0\2\11\5\0\16\11\1\u01b5\13\11\10\0"+
    "\2\11\5\0\1\u01b6\31\11\10\0\2\11\5\0\14\11"+
    "\1\u01b7\15\11\10\0\2\11\5\0\16\11\1\u01b8\13\11"+
    "\10\0\2\11\5\0\3\11\1\u01b9\26\11\10\0\2\11"+
    "\5\0\5\11\1\u01ba\24\11\10\0\2\11\5\0\2\11"+
    "\1\u01bb\27\11\10\0\2\11\5\0\1\11\1\u01bc\30\11"+
    "\10\0\2\11\5\0\20\11\1\u01bd\11\11\10\0\2\11"+
    "\5\0\16\11\1\u01be\13\11\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15334];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\1\1\11\25\1\2\11\1\1"+
    "\1\11\2\1\2\11\5\1\1\0\57\1\1\11\2\1"+
    "\1\0\1\11\2\0\70\1\1\11\u0122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public YangFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { yybegin(BLACK_BOX_STRING); return Rpc;
          }
        case 82: break;
        case 68: 
          { yybegin(BLACK_BOX_STRING); return OrderedBy;
          }
        case 83: break;
        case 37: 
          { yybegin(BLACK_BOX_STRING); return Output;
          }
        case 84: break;
        case 15: 
          { yybegin(BLACK_BOX_STRING); return Bit;
          }
        case 85: break;
        case 28: 
          { yybegin(BLACK_BOX_STRING); return Input;
          }
        case 86: break;
        case 70: 
          { yybegin(BLACK_BOX_STRING); return YinElement;
          }
        case 87: break;
        case 73: 
          { yybegin(BLACK_BOX_STRING); return Notification;
          }
        case 88: break;
        case 52: 
          { yybegin(BLACK_BOX_STRING); return Pattern;
          }
        case 89: break;
        case 40: 
          { yybegin(BLACK_BOX_STRING); return Refine;
          }
        case 90: break;
        case 10: 
          { yybegin(YYINITIAL); return QuotationMark;
          }
        case 91: break;
        case 79: 
          { yybegin(BLACK_BOX_STRING); return ErrorMessage;
          }
        case 92: break;
        case 59: 
          { yybegin(BLACK_BOX_STRING); return Container;
          }
        case 93: break;
        case 18: 
          { yybegin(BLACK_BOX_STRING); return Case;
          }
        case 94: break;
        case 62: 
          { yybegin(BLACK_BOX_STRING); return Mandatory;
          }
        case 95: break;
        case 77: 
          { yybegin(BLACK_BOX_STRING); return RevisionDate;
          }
        case 96: break;
        case 11: 
          { yybegin(ID_EXPECTED); return Colon;
          }
        case 97: break;
        case 7: 
          { yybegin(IN_EXPRESSION_STRING); return QuotationMark;
          }
        case 98: break;
        case 53: 
          { yybegin(BLACK_BOX_STRING); return Argument;
          }
        case 99: break;
        case 21: 
          { yybegin(BLACK_BOX_STRING); return List;
          }
        case 100: break;
        case 65: 
          { yybegin(BLACK_BOX_STRING); return Extension;
          }
        case 101: break;
        case 66: 
          { yybegin(BLACK_BOX_STRING); return Submodule;
          }
        case 102: break;
        case 63: 
          { yybegin(BLACK_BOX_STRING); return LeafList;
          }
        case 103: break;
        case 33: 
          { yybegin(BLACK_BOX_STRING); return Anyxml;
          }
        case 104: break;
        case 56: 
          { yybegin(BLACK_BOX_STRING); return Grouping;
          }
        case 105: break;
        case 38: 
          { yybegin(BLACK_BOX_STRING); return Module;
          }
        case 106: break;
        case 25: 
          { yybegin(BLACK_BOX_STRING); return Base;
          }
        case 107: break;
        case 78: 
          { yybegin(BLACK_BOX_STRING); return ErrorAppTag;
          }
        case 108: break;
        case 8: 
          { return RULE_ID;
          }
        case 109: break;
        case 76: 
          { yybegin(BLACK_BOX_STRING); return MinElements;
          }
        case 110: break;
        case 13: 
          { return RULE_SL_COMMENT;
          }
        case 111: break;
        case 23: 
          { yybegin(BLACK_BOX_STRING); return Uses;
          }
        case 112: break;
        case 69: 
          { yybegin(BLACK_BOX_STRING); return BelongsTo;
          }
        case 113: break;
        case 44: 
          { yybegin(BLACK_BOX_STRING); return Anydata;
          }
        case 114: break;
        case 72: 
          { yybegin(BLACK_BOX_STRING); return Organization;
          }
        case 115: break;
        case 2: 
          { yybegin(COLON_EXPECTED);  return RULE_ID;
          }
        case 116: break;
        case 50: 
          { yybegin(BLACK_BOX_STRING); return Deviate;
          }
        case 117: break;
        case 47: 
          { yybegin(BLACK_BOX_STRING); return Typedef;
          }
        case 118: break;
        case 54: 
          { yybegin(BLACK_BOX_STRING); return Identity;
          }
        case 119: break;
        case 1: 
          { return RULE_WS;
          }
        case 120: break;
        case 75: 
          { yybegin(BLACK_BOX_STRING); return MaxElements;
          }
        case 121: break;
        case 55: 
          { yybegin(BLACK_BOX_STRING); return Revision;
          }
        case 122: break;
        case 57: 
          { yybegin(BLACK_BOX_STRING); return Position;
          }
        case 123: break;
        case 27: 
          { yybegin(BLACK_BOX_STRING); return When;
          }
        case 124: break;
        case 41: 
          { yybegin(AWAITING_EXPRESSION); return Unique;
          }
        case 125: break;
        case 26: 
          { yybegin(AWAITING_EXPRESSION); return Path;
          }
        case 126: break;
        case 51: 
          { yybegin(BLACK_BOX_STRING); return Feature;
          }
        case 127: break;
        case 34: 
          { yybegin(BLACK_BOX_STRING); return Config;
          }
        case 128: break;
        case 61: 
          { yybegin(AWAITING_EXPRESSION); return Deviation;
          }
        case 129: break;
        case 43: 
          { yybegin(BLACK_BOX_STRING); return Prefix;
          }
        case 130: break;
        case 36: 
          { yybegin(BLACK_BOX_STRING); return Import;
          }
        case 131: break;
        case 48: 
          { yybegin(BLACK_BOX_STRING); return Include;
          }
        case 132: break;
        case 12: 
          { yybegin(BLACK_BOX_STRING); return RULE_ID;
          }
        case 133: break;
        case 19: 
          { yybegin(BLACK_BOX_STRING); return Type;
          }
        case 134: break;
        case 32: 
          { yybegin(BLACK_BOX_STRING); return Action;
          }
        case 135: break;
        case 67: 
          { yybegin(AWAITING_EXPRESSION); return IfFeature;
          }
        case 136: break;
        case 20: 
          { yybegin(AWAITING_EXPRESSION); return Must;
          }
        case 137: break;
        case 74: 
          { yybegin(BLACK_BOX_STRING); return YangVersion;
          }
        case 138: break;
        case 24: 
          { yybegin(BLACK_BOX_STRING); return Enum;
          }
        case 139: break;
        case 29: 
          { yybegin(BLACK_BOX_STRING); return Range;
          }
        case 140: break;
        case 4: 
          { yybegin(YYINITIAL); return Semicolon;
          }
        case 141: break;
        case 81: 
          { yybegin(BLACK_BOX_STRING); return RequireInstance;
          }
        case 142: break;
        case 49: 
          { yybegin(BLACK_BOX_STRING); return Default;
          }
        case 143: break;
        case 6: 
          { yybegin(YYINITIAL); return RULE_ID;
          }
        case 144: break;
        case 80: 
          { yybegin(BLACK_BOX_STRING); return FractionDigits;
          }
        case 145: break;
        case 16: 
          { yybegin(AWAITING_EXPRESSION); return Key;
          }
        case 146: break;
        case 3: 
          { yybegin(YYINITIAL); return RightCurlyBracket;
          }
        case 147: break;
        case 58: 
          { yybegin(BLACK_BOX_STRING); return Presence;
          }
        case 148: break;
        case 71: 
          { yybegin(BLACK_BOX_STRING); return Description;
          }
        case 149: break;
        case 35: 
          { yybegin(BLACK_BOX_STRING); return Choice;
          }
        case 150: break;
        case 46: 
          { yybegin(BLACK_BOX_STRING); return Contact;
          }
        case 151: break;
        case 39: 
          { yybegin(BLACK_BOX_STRING); return Length;
          }
        case 152: break;
        case 31: 
          { yybegin(BLACK_BOX_STRING); return Value;
          }
        case 153: break;
        case 60: 
          { yybegin(BLACK_BOX_STRING); return Namespace;
          }
        case 154: break;
        case 9: 
          { return RULE_STRING;
          }
        case 155: break;
        case 22: 
          { yybegin(BLACK_BOX_STRING); return Leaf;
          }
        case 156: break;
        case 64: 
          { yybegin(BLACK_BOX_STRING); return Reference;
          }
        case 157: break;
        case 5: 
          { yybegin(YYINITIAL); return LeftCurlyBracket;
          }
        case 158: break;
        case 45: 
          { yybegin(BLACK_BOX_STRING); return Augment;
          }
        case 159: break;
        case 42: 
          { yybegin(BLACK_BOX_STRING); return Status;
          }
        case 160: break;
        case 30: 
          { yybegin(BLACK_BOX_STRING); return Units;
          }
        case 161: break;
        case 17: 
          { return RULE_ML_COMMENT;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
