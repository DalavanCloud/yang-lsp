/* The following code was generated by JFlex 1.4.3 on 7/3/17 5:58 PM */

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/3/17 5:58 PM from the specification file
 * <tt>./src/main/java/io/typefox/yang/parser/antlr/lexer/jflex/YangFlexer.flex</tt>
 */
public class YangFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_EXPRESSION_STRING = 4;
  public static final int EXPRESSION = 2;
  public static final int IN_SQ_EXPRESSION_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int ID_EXPECTED = 10;
  public static final int BLACK_BOX_STRING = 12;
  public static final int COLON_EXPECTED = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\2\0\1\5\22\0\1\1\1\32\1\13\4\0"+
    "\1\12\1\55\1\56\1\3\1\30\1\61\1\7\1\16\1\2\1\15"+
    "\1\51\1\53\1\52\1\44\1\15\1\43\1\15\1\50\1\15\1\10"+
    "\1\70\1\33\1\31\1\33\2\0\32\6\1\57\1\14\1\60\1\0"+
    "\1\6\1\0\1\17\1\34\1\42\1\21\1\41\1\47\1\54\1\63"+
    "\1\25\1\6\1\64\1\40\1\24\1\20\1\22\1\45\1\66\1\23"+
    "\1\37\1\36\1\46\1\26\1\67\1\62\1\35\1\65\1\71\1\27"+
    "\1\11\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\1\1\3\25\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\5\10\1\1\1\7\5\10\1\16\1\17\1\20\1\21"+
    "\1\22\1\6\1\23\1\24\1\1\1\10\3\23\1\25"+
    "\63\0\1\14\1\26\3\10\1\7\12\10\1\23\2\0"+
    "\1\27\2\0\2\23\1\25\2\0\1\30\20\0\1\31"+
    "\14\0\1\32\27\0\1\33\1\0\15\10\3\0\2\23"+
    "\1\34\27\0\1\35\6\0\1\36\3\0\1\37\2\0"+
    "\1\40\1\41\1\0\1\42\2\0\1\43\4\0\1\44"+
    "\5\0\1\45\3\0\1\46\2\10\1\47\6\10\1\50"+
    "\6\10\1\0\1\27\1\0\1\27\16\0\1\51\12\0"+
    "\1\52\3\0\1\53\21\0\1\54\4\0\1\10\1\55"+
    "\1\56\1\57\7\10\1\60\1\61\1\10\1\62\2\10"+
    "\2\0\2\27\2\0\1\63\1\0\1\64\10\0\1\65"+
    "\1\0\1\66\5\0\1\67\3\0\1\70\5\0\1\71"+
    "\2\0\1\72\4\0\1\73\1\74\3\0\1\75\1\76"+
    "\3\0\4\10\1\77\1\100\2\10\1\101\1\102\1\103"+
    "\3\0\2\27\2\0\1\27\1\104\1\0\1\105\3\0"+
    "\1\106\1\0\1\107\11\0\1\110\5\0\1\111\6\0"+
    "\1\112\1\113\3\0\1\114\1\0\3\10\1\115\1\116"+
    "\1\10\1\0\1\27\1\0\4\27\3\0\1\27\1\0"+
    "\3\27\1\117\6\0\1\120\4\0\1\121\1\0\1\122"+
    "\12\0\1\123\1\124\1\0\1\125\4\10\2\0\1\27"+
    "\1\0\3\27\1\0\1\27\2\0\1\27\1\0\1\27"+
    "\1\0\1\126\1\0\1\127\4\0\1\130\1\0\1\131"+
    "\6\0\1\132\1\133\2\0\1\134\1\135\1\0\1\136"+
    "\3\10\1\27\2\0\3\27\2\0\1\27\5\0\1\137"+
    "\5\0\1\140\1\141\5\0\3\10\2\27\1\0\1\27"+
    "\1\0\2\27\2\0\1\142\6\0\1\143\3\0\1\10"+
    "\1\144\1\145\2\27\1\0\3\27\1\146\1\147\2\0"+
    "\1\150\1\151\1\152\3\0\1\10\3\27\3\0\1\153"+
    "\1\0\1\154\1\155\1\0\1\10\3\27\2\0\2\27"+
    "\3\0\1\10\1\27\1\0\2\27\1\0\1\156\1\10"+
    "\1\27\1\157\3\10\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[681];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u015c\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u015c\0\u015c\0\u01d0\0\u015c\0\u0706\0\u015c\0\u015c\0\u015c"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u015c\0\u015c"+
    "\0\u015c\0\u015c\0\u015c\0\u015c\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u020a\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u171c"+
    "\0\u015c\0\u1756\0\u1790\0\u17ca\0\u0706\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u015c"+
    "\0\u0a6c\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u015c"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u020a\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270"+
    "\0\u020a\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u020a\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u015c\0\u2c2e\0\u2c68\0\u2ca2"+
    "\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72"+
    "\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042"+
    "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u020a\0\u3164\0\u319e\0\u31d8"+
    "\0\u3212\0\u324c\0\u3286\0\u020a\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\u33a8\0\u33e2\0\u020a\0\u341c\0\u3456\0\u020a\0\u3490\0\u34ca"+
    "\0\u020a\0\u3504\0\u353e\0\u3578\0\u35b2\0\u020a\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\u020a\0\u370e\0\u3748\0\u3782\0\u020a"+
    "\0\u37bc\0\u37f6\0\u0706\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918"+
    "\0\u3952\0\u0706\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae"+
    "\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e"+
    "\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e"+
    "\0\u3e88\0\u3ec2\0\u020a\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u020a\0\u4140\0\u417a"+
    "\0\u41b4\0\u020a\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310"+
    "\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0"+
    "\0\u451a\0\u4554\0\u458e\0\u020a\0\u45c8\0\u4602\0\u463c\0\u4676"+
    "\0\u46b0\0\u0706\0\u0706\0\u0706\0\u46ea\0\u4724\0\u475e\0\u4798"+
    "\0\u47d2\0\u480c\0\u4846\0\u0706\0\u0706\0\u4880\0\u0706\0\u48ba"+
    "\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u020a"+
    "\0\u4a8a\0\u020a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6"+
    "\0\u4c20\0\u4c5a\0\u020a\0\u4c94\0\u020a\0\u4cce\0\u4d08\0\u4d42"+
    "\0\u4d7c\0\u4db6\0\u020a\0\u4df0\0\u4e2a\0\u4e64\0\u020a\0\u4e9e"+
    "\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u020a\0\u4fc0\0\u4ffa\0\u020a"+
    "\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u020a\0\u020a\0\u511c\0\u5156"+
    "\0\u5190\0\u020a\0\u020a\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2"+
    "\0\u52ec\0\u5326\0\u0706\0\u0706\0\u5360\0\u539a\0\u0706\0\u0706"+
    "\0\u0706\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530"+
    "\0\u556a\0\u020a\0\u55a4\0\u020a\0\u55de\0\u5618\0\u5652\0\u020a"+
    "\0\u568c\0\u020a\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8"+
    "\0\u5822\0\u585c\0\u5896\0\u020a\0\u58d0\0\u590a\0\u5944\0\u597e"+
    "\0\u59b8\0\u020a\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14"+
    "\0\u020a\0\u020a\0\u5b4e\0\u5b88\0\u5bc2\0\u020a\0\u5bfc\0\u5c36"+
    "\0\u5c70\0\u5caa\0\u0706\0\u0706\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92"+
    "\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62"+
    "\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u020a\0\u6084\0\u60be\0\u60f8"+
    "\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u621a\0\u6254\0\u628e\0\u62c8"+
    "\0\u020a\0\u6302\0\u020a\0\u633c\0\u6376\0\u63b0\0\u63ea\0\u6424"+
    "\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\u020a\0\u020a\0\u6580"+
    "\0\u020a\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc\0\u6716"+
    "\0\u6750\0\u678a\0\u67c4\0\u67fe\0\u6838\0\u6872\0\u68ac\0\u68e6"+
    "\0\u6920\0\u695a\0\u6994\0\u69ce\0\u020a\0\u6a08\0\u020a\0\u6a42"+
    "\0\u6a7c\0\u6ab6\0\u6af0\0\u020a\0\u6b2a\0\u020a\0\u6b64\0\u6b9e"+
    "\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86\0\u020a\0\u020a\0\u6cc0\0\u6cfa"+
    "\0\u020a\0\u020a\0\u6d34\0\u0706\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c"+
    "\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec"+
    "\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e\0\u020a\0\u7148\0\u7182"+
    "\0\u71bc\0\u71f6\0\u7230\0\u020a\0\u020a\0\u726a\0\u72a4\0\u72de"+
    "\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\u743a\0\u7474\0\u74ae"+
    "\0\u74e8\0\u7522\0\u755c\0\u7596\0\u75d0\0\u760a\0\u020a\0\u7644"+
    "\0\u767e\0\u76b8\0\u76f2\0\u772c\0\u7766\0\u020a\0\u77a0\0\u77da"+
    "\0\u7814\0\u784e\0\u0706\0\u0706\0\u7888\0\u78c2\0\u78fc\0\u7936"+
    "\0\u7970\0\u79aa\0\u020a\0\u020a\0\u79e4\0\u7a1e\0\u020a\0\u020a"+
    "\0\u020a\0\u7a58\0\u7a92\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4"+
    "\0\u7bee\0\u7c28\0\u7c62\0\u020a\0\u7c9c\0\u020a\0\u020a\0\u7cd6"+
    "\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8\0\u7e32\0\u7e6c\0\u7ea6"+
    "\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u803c\0\u8076"+
    "\0\u80b0\0\u020a\0\u80ea\0\u8124\0\u020a\0\u815e\0\u8198\0\u81d2"+
    "\0\u0706";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[681];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\7\2\10\1\12\2\7\1\13"+
    "\5\7\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\5\7\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\7\1\33\1\34\1\35\4\7\1\36\5\7"+
    "\2\12\1\37\2\12\1\40\1\41\1\42\1\7\1\10"+
    "\1\43\1\44\2\10\1\45\1\44\1\46\1\13\1\47"+
    "\1\50\1\7\1\51\1\52\1\53\1\45\1\54\1\55"+
    "\1\45\1\56\1\57\1\45\3\44\1\60\1\61\1\62"+
    "\2\45\1\63\1\64\1\65\1\45\2\51\1\45\1\66"+
    "\1\45\4\51\1\45\1\67\1\70\1\71\1\72\1\73"+
    "\6\45\1\41\1\42\1\7\1\10\1\74\1\44\2\10"+
    "\1\45\1\44\1\46\1\13\1\75\1\76\1\77\1\51"+
    "\1\52\1\53\1\45\1\100\1\55\1\45\1\56\2\45"+
    "\3\44\1\60\1\61\7\45\2\51\3\45\4\51\1\45"+
    "\1\67\1\70\1\71\1\72\1\73\6\45\1\41\1\42"+
    "\1\7\1\10\1\74\1\44\2\10\1\45\1\44\1\46"+
    "\1\13\1\76\1\101\1\7\1\51\1\52\1\53\1\45"+
    "\1\100\1\55\1\45\1\56\2\45\3\44\1\60\1\61"+
    "\7\45\2\51\3\45\4\51\1\45\1\67\1\70\1\71"+
    "\1\72\1\73\6\45\1\41\1\42\1\7\1\10\2\7"+
    "\2\10\3\7\1\13\56\7\1\41\1\42\1\102\1\10"+
    "\1\103\1\102\2\10\3\102\1\13\1\75\1\101\54\102"+
    "\1\41\1\42\73\0\1\10\2\0\2\10\66\0\1\104"+
    "\1\105\74\0\2\106\1\107\4\0\12\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\3\106\1\110"+
    "\2\106\1\111\3\106\5\0\6\106\1\112\3\106\1\113"+
    "\6\106\5\0\6\106\10\0\2\106\1\107\4\0\2\106"+
    "\1\114\2\106\1\115\4\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\116"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\6\106"+
    "\1\117\3\106\5\0\12\106\1\120\6\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\2\106\1\121\7\106\5\0"+
    "\5\106\1\122\3\106\1\123\7\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\124\2\106\1\125\2\106"+
    "\1\126\1\106\5\0\12\106\1\127\6\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\3\106\1\130\1\131\2\106"+
    "\1\132\2\106\5\0\13\106\1\133\5\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\2\106\1\134\7\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\2\106"+
    "\1\135\5\106\1\136\1\106\5\0\5\106\1\137\13\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\2\106\1\140"+
    "\5\106\1\141\1\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\1\106\1\142\17\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\2\106\1\143\7\106\1\144\6\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\10\106\1\145\1\106\5\0\5\106"+
    "\1\146\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\3\106\1\147\2\106\1\150\3\106\5\0\21\106\5\0"+
    "\1\151\5\106\10\0\2\106\1\107\4\0\2\106\1\152"+
    "\2\106\1\153\4\106\5\0\21\106\5\0\1\106\1\154"+
    "\4\106\10\0\2\106\1\107\4\0\2\106\1\155\2\106"+
    "\1\156\1\157\3\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\160\6\106\5\0\3\106"+
    "\1\161\15\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\6\106\1\162\3\106\5\0\5\106\1\163\13\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\6\106\1\164\3\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\5\106\1\165\13\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\21\106\5\0\1\106"+
    "\1\166\4\106\10\0\2\45\5\0\12\45\5\0\21\45"+
    "\5\0\6\45\17\0\1\51\1\167\24\0\2\51\3\0"+
    "\4\51\33\0\1\170\1\171\24\0\2\170\3\0\4\170"+
    "\24\0\2\45\5\0\3\45\1\172\6\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\10\45\1\173\1\45"+
    "\5\0\5\45\1\174\13\45\5\0\6\45\10\0\2\45"+
    "\5\0\6\45\1\175\3\45\5\0\21\45\5\0\6\45"+
    "\10\0\2\45\5\0\5\45\1\172\4\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\3\45\1\176\1\177"+
    "\5\45\5\0\21\45\5\0\6\45\33\0\1\44\46\0"+
    "\2\45\5\0\5\45\1\200\2\45\1\201\1\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\12\45\5\0"+
    "\2\45\1\202\16\45\5\0\6\45\10\0\2\45\5\0"+
    "\12\45\5\0\5\45\1\203\13\45\5\0\6\45\10\0"+
    "\2\45\5\0\3\45\1\204\3\45\1\205\2\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\3\45\1\206"+
    "\4\45\1\207\1\45\5\0\21\45\5\0\6\45\2\0"+
    "\12\75\1\210\57\75\1\0\1\211\1\212\1\0\2\211"+
    "\22\0\1\213\54\0\1\214\64\0\2\45\5\0\10\45"+
    "\1\173\1\45\5\0\21\45\5\0\6\45\2\0\13\101"+
    "\1\210\1\215\55\101\1\102\1\0\2\102\2\0\3\102"+
    "\3\0\54\102\2\0\1\102\1\0\1\216\1\217\2\0"+
    "\3\102\3\0\54\102\2\0\4\104\1\220\1\221\64\104"+
    "\3\105\1\222\66\105\6\0\1\223\10\0\10\223\5\0"+
    "\7\223\2\0\3\223\4\0\1\223\5\0\6\223\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\1\106\1\224\17\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\20\106\1\225\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\2\106\1\226\16\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\20\106\1\227\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\7\106\1\230\2\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\2\106\1\231\16\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\11\106\1\232\5\0\3\106\1\233"+
    "\7\106\1\234\5\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\4\106\1\235\5\106\5\0\20\106\1\236\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\2\106"+
    "\1\237\16\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\3\106\1\240\6\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\11\106\1\241\5\0\13\106\1\242"+
    "\5\106\5\0\4\106\1\243\1\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\6\106\1\244\12\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\3\106\1\245\6\106\5\0"+
    "\21\106\5\0\1\246\5\106\10\0\2\106\1\107\4\0"+
    "\4\106\1\247\5\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\250\6\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\3\106\1\251\15\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\6\106\1\252\2\106\1\253\7\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\5\106\1\254\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\11\106\1\255\7\106\5\0\6\106"+
    "\10\0\1\106\1\256\1\107\4\0\12\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\4\106\1\257\14\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\3\106\1\260\15\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\261"+
    "\16\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\4\106\1\262\14\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\3\106\1\263\6\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\3\106\1\264\6\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\11\106\1\265\7\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\266\7\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\1\267\20\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\3\106\1\270\15\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\271\1\272\6\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\12\106\1\273\6\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\6\106\1\274\3\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\2\106"+
    "\1\275\16\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\3\106\1\276\15\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\277\6\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\5\106\1\300"+
    "\4\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\301\16\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\3\106\1\302"+
    "\15\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\303\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\10\106\1\304\1\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\305\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\2\106\1\306\7\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\307\7\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\5\106\1\310"+
    "\4\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\1\106\1\311\17\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\312"+
    "\13\106\5\0\6\106\17\0\1\170\25\0\2\170\3\0"+
    "\4\170\24\0\2\45\5\0\4\45\1\175\5\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\11\45\1\175"+
    "\5\0\21\45\5\0\6\45\10\0\2\45\5\0\12\45"+
    "\5\0\6\45\1\313\12\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\2\45\1\314\1\315\15\45\5\0"+
    "\6\45\10\0\2\45\5\0\12\45\5\0\5\45\1\316"+
    "\13\45\5\0\6\45\10\0\2\45\5\0\5\45\1\317"+
    "\4\45\5\0\21\45\5\0\6\45\10\0\2\45\5\0"+
    "\3\45\1\320\6\45\5\0\2\45\1\321\16\45\5\0"+
    "\6\45\10\0\2\45\5\0\6\45\1\322\3\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\2\45\1\323"+
    "\7\45\5\0\21\45\5\0\6\45\10\0\2\45\5\0"+
    "\12\45\5\0\12\45\1\324\6\45\5\0\6\45\10\0"+
    "\2\45\5\0\12\45\5\0\11\45\1\325\7\45\5\0"+
    "\6\45\10\0\2\45\5\0\10\45\1\326\1\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\3\45\1\327"+
    "\6\45\5\0\21\45\5\0\6\45\4\0\1\330\1\331"+
    "\67\0\1\213\1\332\1\0\2\213\64\0\13\214\1\0"+
    "\1\333\55\214\4\101\1\0\65\101\1\216\1\104\2\216"+
    "\1\220\1\221\3\216\3\104\54\216\2\104\1\217\1\105"+
    "\1\217\1\334\2\105\3\217\3\105\54\217\2\105\4\0"+
    "\1\220\65\0\2\105\1\335\1\222\66\105\6\0\2\223"+
    "\5\0\12\223\5\0\21\223\5\0\6\223\10\0\2\106"+
    "\1\107\4\0\4\106\1\336\5\106\5\0\21\106\5\0"+
    "\1\337\5\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\12\106\1\340\6\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\10\106\1\341\1\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\7\106\1\342\2\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\343\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\10\106\1\344\1\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\10\106\1\345\1\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\6\106\1\346\12\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\347\7\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\5\106\1\350\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\2\106\1\351\7\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\11\106\1\352"+
    "\7\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\20\106\1\353\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\10\106\1\354\1\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\10\106\1\355\1\106\5\0"+
    "\5\106\1\356\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\12\106\1\357\6\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\4\106\1\360\5\106\5\0"+
    "\21\106\5\0\6\106\10\0\1\106\1\361\1\107\4\0"+
    "\12\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\10\106\1\362\1\106\5\0\12\106\1\363\6\106"+
    "\5\0\6\106\10\0\1\106\1\364\1\107\4\0\12\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\2\106\1\365\16\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\4\106\1\366\14\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\12\106\1\367\6\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\3\106\1\370\6\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\5\106\1\371\4\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\13\106\1\372\5\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\12\106\1\373\6\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\374\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\5\106\1\375\4\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\20\106\1\376\5\0"+
    "\6\106\10\0\1\106\1\377\1\107\4\0\12\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\u0100\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\2\106\1\u0101\16\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\7\106\1\u0102\2\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\2\106\1\u0103\16\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\13\106\1\u0104\5\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\20\106\1\u0105\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\7\106\1\u0106\2\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\5\106\1\u0107\4\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\5\106\1\u0108\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u0109\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u010a"+
    "\10\106\1\u010b\5\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\10\106\1\u010c\1\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u010d"+
    "\16\106\5\0\1\106\1\u010e\4\106\10\0\2\106\1\107"+
    "\4\0\10\106\1\u010f\1\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\3\106\1\u0110"+
    "\7\106\1\u0111\5\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\u0112\16\106\5\0\4\106"+
    "\1\u0113\1\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\3\106\1\u0114\15\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\6\106\1\u0115\12\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u0116"+
    "\16\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\12\106\1\u0117\6\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\3\106\1\u0118\6\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\45\5\0\10\45\1\u0119\1\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\12\45\5\0"+
    "\7\45\1\u011a\4\45\1\u011b\1\u011c\1\u011d\2\45\5\0"+
    "\6\45\10\0\2\45\5\0\12\45\5\0\2\45\1\u011e"+
    "\16\45\5\0\6\45\10\0\2\45\5\0\3\45\1\u011f"+
    "\6\45\5\0\21\45\5\0\6\45\10\0\2\45\5\0"+
    "\12\45\5\0\4\45\1\u0120\14\45\5\0\6\45\10\0"+
    "\2\45\5\0\2\45\1\u0121\7\45\5\0\21\45\5\0"+
    "\6\45\10\0\2\45\5\0\12\45\5\0\3\45\1\u0122"+
    "\15\45\5\0\6\45\10\0\2\45\5\0\10\45\1\u0123"+
    "\1\45\5\0\21\45\5\0\6\45\10\0\2\45\5\0"+
    "\12\45\5\0\13\45\1\u0124\5\45\5\0\6\45\10\0"+
    "\2\45\5\0\7\45\1\u0125\2\45\5\0\21\45\5\0"+
    "\6\45\10\0\2\45\5\0\12\45\5\0\2\45\1\u0126"+
    "\16\45\5\0\6\45\10\0\2\45\5\0\5\45\1\u0127"+
    "\4\45\5\0\21\45\5\0\6\45\10\0\2\45\5\0"+
    "\12\45\5\0\2\45\1\u0128\16\45\5\0\6\45\2\0"+
    "\2\330\1\u0129\1\330\2\211\22\330\1\u012a\41\330\3\331"+
    "\1\u012b\66\331\2\0\1\u012c\1\u012d\101\0\1\210\56\0"+
    "\1\217\1\105\1\102\1\334\2\105\3\217\3\105\54\217"+
    "\2\105\6\0\2\106\1\107\4\0\2\106\1\u012e\7\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\7\106\1\u012f\2\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\7\106\1\u0130\2\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\5\106\1\u0131"+
    "\4\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u0132\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\3\106\1\u0133"+
    "\15\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\13\106\1\u0134\5\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\2\106\1\u0135\7\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\6\106\1\u0136\3\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\12\106\1\u0137\6\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\6\106\1\u0138\3\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\3\106\1\u0139"+
    "\6\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\12\106\1\u013a\6\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u013b"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\3\106\1\u013c\15\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\3\106\1\u013d\6\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\6\106\1\u013e\3\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\10\106\1\u013f\1\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\u0140\7\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\5\106\1\u0141\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\13\106\1\u0142\5\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\4\106\1\u0143"+
    "\14\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\u0144\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\12\106\1\u0145\6\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\2\106"+
    "\1\u0146\16\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\2\106\1\u0147\16\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\6\106\1\u0148\3\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\5\106\1\u0149\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u014a\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\3\106\1\u014b\6\106\5\0"+
    "\21\106\5\0\6\106\10\0\1\106\1\u014c\1\107\4\0"+
    "\12\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u014d\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\4\106\1\u014e\5\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\12\106\1\u014f\6\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\5\106\1\u0150\4\106\5\0\21\106\5\0"+
    "\6\106\10\0\1\106\1\u0151\1\107\4\0\12\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\2\106\1\u0152\16\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\6\106\1\u0153\3\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\3\106\1\u0154\6\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\2\106\1\u0155\7\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\10\106\1\u0156\1\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\6\106\1\u0157\12\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u0158\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u0159"+
    "\16\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\u015a\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\10\106\1\u015b\1\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\3\106"+
    "\1\u015c\15\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\12\106\1\u015d\6\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\2\106\1\u015e\16\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\12\106\1\u015f\6\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\11\106\1\u0160\7\106\5\0\6\106"+
    "\10\0\2\45\5\0\7\45\1\u0161\2\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\12\45\5\0\10\45"+
    "\1\u0162\10\45\5\0\6\45\10\0\2\45\5\0\12\45"+
    "\5\0\7\45\1\u0163\11\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\17\45\1\u0164\1\45\5\0\6\45"+
    "\10\0\2\45\5\0\2\45\1\u0165\7\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\12\45\5\0\2\45"+
    "\1\u0166\16\45\5\0\6\45\10\0\2\45\5\0\12\45"+
    "\5\0\5\45\1\u0167\13\45\5\0\6\45\10\0\2\45"+
    "\5\0\6\45\1\u0168\3\45\5\0\21\45\5\0\6\45"+
    "\10\0\2\45\5\0\3\45\1\u0169\6\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\6\45\1\u016a\3\45"+
    "\5\0\21\45\5\0\6\45\10\0\2\45\5\0\12\45"+
    "\5\0\5\45\1\u016b\13\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\1\45\1\u016c\17\45\5\0\6\45"+
    "\10\0\2\45\5\0\3\45\1\u016d\6\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\12\45\5\0\7\45"+
    "\1\u016e\4\45\1\u016f\1\u0170\1\u0171\2\45\5\0\6\45"+
    "\2\0\2\330\1\u0129\1\u0172\2\211\22\330\1\u012a\42\330"+
    "\1\u012a\1\u0173\1\330\2\u0174\22\330\1\u012a\41\330\2\331"+
    "\1\211\1\u012b\66\331\2\u012c\1\u0175\1\u012c\2\213\64\u012c"+
    "\3\u012d\1\u0176\66\u012d\6\0\2\106\1\107\4\0\12\106"+
    "\5\0\2\106\1\u0177\16\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\4\106\1\u0178\14\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\u0179\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\3\106\1\u017a\6\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\u017b\6\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\11\106\1\u017c\7\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\10\106\1\u017d\1\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u017e"+
    "\16\106\5\0\6\106\10\0\2\106\1\107\4\0\10\106"+
    "\1\u017f\1\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\4\106\1\u0180\14\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\u0181\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\10\106\1\u0182\1\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\2\106\1\u0183\16\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\10\106\1\u0184"+
    "\1\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u0185\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u0186"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\6\106"+
    "\1\u0187\3\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\2\106\1\u0188\16\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\4\106"+
    "\1\u0189\14\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\10\106\1\u018a\1\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\5\106\1\u018b\13\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\4\106\1\u018c\14\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\4\106\1\u018d\5\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\10\106\1\u018e\1\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\2\106\1\u018f\16\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\2\106\1\u0190\7\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\20\106"+
    "\1\u0191\5\0\6\106\10\0\2\106\1\107\4\0\11\106"+
    "\1\u0192\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\4\106\1\u0193\14\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u0194"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\3\106\1\u0195\15\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\4\106\1\u0196\5\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\4\106"+
    "\1\u0197\14\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\21\106\5\0\1\106\1\u0198\4\106\10\0"+
    "\1\106\1\u0199\1\107\4\0\12\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\3\106"+
    "\1\u019a\15\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\10\106\1\u019b\1\106\5\0\6\106\1\u019c\12\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\20\106"+
    "\1\u019d\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\u019e\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\6\106\1\u019f\3\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\10\106\1\u01a0\1\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\3\106\1\u01a1\6\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\21\106\5\0\1\u01a2"+
    "\5\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\u01a3\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\10\106\1\u01a4\1\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\6\106\1\u01a5\3\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\10\106\1\u01a6"+
    "\1\106\5\0\21\106\5\0\6\106\10\0\2\45\5\0"+
    "\2\45\1\u01a7\7\45\5\0\21\45\5\0\6\45\10\0"+
    "\2\45\5\0\3\45\1\u01a8\6\45\5\0\21\45\5\0"+
    "\6\45\10\0\2\45\5\0\10\45\1\u01a9\1\45\5\0"+
    "\21\45\5\0\6\45\10\0\2\45\5\0\2\45\1\u01aa"+
    "\7\45\5\0\21\45\5\0\6\45\10\0\2\45\5\0"+
    "\12\45\5\0\1\45\1\u01ab\17\45\5\0\6\45\10\0"+
    "\2\45\5\0\12\45\5\0\20\45\1\u01ac\5\0\6\45"+
    "\10\0\2\45\5\0\12\45\5\0\5\45\1\u01ad\13\45"+
    "\5\0\6\45\10\0\2\45\5\0\6\45\1\u01ae\3\45"+
    "\5\0\21\45\5\0\6\45\10\0\2\45\5\0\12\45"+
    "\5\0\10\45\1\u01af\10\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\7\45\1\u01b0\11\45\5\0\6\45"+
    "\10\0\2\45\5\0\12\45\5\0\17\45\1\u01b1\1\45"+
    "\5\0\6\45\2\0\2\u0172\1\u01b2\1\u01b3\2\u01b4\22\u0172"+
    "\1\u01b5\41\u0172\2\330\1\u01b6\1\u01b7\2\211\22\330\1\u012a"+
    "\41\330\1\0\1\u0174\1\u01b8\1\0\2\u0174\22\0\1\213"+
    "\41\0\2\u012c\1\u0175\1\u01b9\2\213\64\u012c\2\u012d\1\213"+
    "\1\u0176\66\u012d\6\0\2\106\1\107\4\0\2\106\1\u01ba"+
    "\7\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\3\106\1\u01bb\6\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u01bc"+
    "\16\106\5\0\6\106\10\0\2\106\1\107\4\0\2\106"+
    "\1\u01bd\7\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\6\106\1\u01be\12\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\10\106\1\u01bf\1\106"+
    "\5\0\5\106\1\u01c0\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\11\106\1\u01c1\7\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\2\106"+
    "\1\u01c2\16\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\4\106\1\u01c3\5\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\21\106\5\0\3\106"+
    "\1\u01c4\2\106\10\0\2\106\1\107\4\0\5\106\1\u01c5"+
    "\4\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\3\106\1\u01c6\6\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u01c7"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\5\106"+
    "\1\u01c8\4\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\5\106\1\u01c9\13\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\u01ca\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\5\106\1\u01cb\13\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\5\106\1\u01cc\13\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\2\106\1\u01cd\16\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\u01ce\16\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\3\106\1\u01cf"+
    "\15\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\u01d0\13\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\5\106\1\u01d1\13\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\13\106"+
    "\1\u01d2\5\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\12\106\1\u01d3\6\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\10\106\1\u01d4\1\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\2\106\1\u01d5"+
    "\4\106\1\u01d6\2\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\10\106\1\u01d7\1\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\3\106\1\u01d8"+
    "\6\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\u01d9\16\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\3\106\1\u01da\6\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\5\106"+
    "\1\u01db\4\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\6\106\1\u01dc\12\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\5\106\1\u01dd\4\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\5\106\1\u01de\13\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\u01df\6\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\45\5\0\12\45\5\0\4\45"+
    "\1\u01e0\14\45\5\0\6\45\10\0\2\45\5\0\12\45"+
    "\5\0\6\45\1\u01e1\12\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\2\45\1\u01e2\16\45\5\0\6\45"+
    "\10\0\2\45\5\0\3\45\1\u01e3\6\45\5\0\21\45"+
    "\5\0\6\45\10\0\2\45\5\0\12\45\5\0\13\45"+
    "\1\u01e4\5\45\5\0\6\45\10\0\2\45\5\0\2\45"+
    "\1\u01e5\7\45\5\0\21\45\5\0\6\45\2\0\2\u0172"+
    "\1\u01b2\1\u0172\2\u01b4\22\u0172\1\u01b5\43\u0172\1\u0129\1\u01b3"+
    "\2\u01b4\22\u0172\1\u01b5\41\u0172\1\331\1\u01b4\1\u01e6\1\u012b"+
    "\2\u01b4\22\331\1\u01e7\41\331\1\u0172\1\u01b5\1\u01e8\1\u01b3"+
    "\2\u01e9\22\u0172\1\u01b5\41\u0172\2\u01ea\1\u01eb\1\u01ec\2\u0174"+
    "\64\u01ea\2\u01b7\1\u01ed\1\u01ee\2\u01ef\22\u01b7\1\u01f0\41\u01b7"+
    "\2\0\1\u01ea\1\u01f1\66\0\2\u01b9\1\u01f2\1\u01f3\2\u01f4"+
    "\64\u01b9\6\0\2\106\1\107\4\0\12\106\5\0\2\106"+
    "\1\u01f5\16\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\6\106\1\u01f6\12\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\2\106\1\u01f7\7\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\5\106\1\u01f8"+
    "\4\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\u01f9\16\106\5\0\6\106"+
    "\10\0\1\106\1\u01fa\1\107\4\0\12\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\2\106\1\u01fb"+
    "\7\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\3\106\1\u01fc\6\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\6\106\1\u01fd"+
    "\12\106\5\0\6\106\10\0\1\106\1\u01fe\1\107\4\0"+
    "\12\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\6\106\1\u01ff\3\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\7\106\1\u0200\2\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\6\106"+
    "\1\u0201\3\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\7\106\1\u0202\2\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\1\106"+
    "\1\u0203\17\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\12\106\1\u0204\6\106\5\0\6\106\10\0"+
    "\1\106\1\u0205\1\107\4\0\12\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\6\106\1\u0206\3\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\7\106\1\u0207\2\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\4\106\1\u0208\14\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\3\106\1\u0209\15\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\11\106\1\u020a\7\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u020b"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\5\106"+
    "\1\u020c\4\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\5\106\1\u020d\13\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\3\106\1\u020e\6\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\12\106\5\0\5\106\1\u020f\13\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\u0210\6\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\20\106\1\u0211\5\0\6\106\10\0\2\45\5\0\12\45"+
    "\5\0\7\45\1\u0212\11\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\5\45\1\u0213\13\45\5\0\6\45"+
    "\10\0\2\45\5\0\12\45\5\0\1\45\1\u0214\17\45"+
    "\5\0\6\45\10\0\2\45\5\0\12\45\5\0\2\45"+
    "\1\u0215\16\45\5\0\6\45\2\0\2\331\1\u0172\1\u0216"+
    "\67\331\1\u01e7\1\u0217\1\u012b\2\u01e7\64\331\2\u0172\1\u0218"+
    "\1\u01b7\2\u01b4\22\u0172\1\u01b5\41\u0172\1\331\1\u01e9\1\u0219"+
    "\1\u012b\2\u01e9\22\331\1\u01e7\41\331\2\u01ea\1\u01eb\1\u01ea"+
    "\2\u0174\66\u01ea\1\u01eb\1\u021a\2\u0174\64\u01ea\2\u01ec\1\u021b"+
    "\1\u021c\2\u01e9\64\u01ec\2\u01b7\1\u01ed\1\u021d\2\u01ef\22\u01b7"+
    "\1\u01f0\43\u01b7\1\u021e\1\u01ee\2\u01ef\22\u01b7\1\u01f0\41\u01b7"+
    "\1\u01f1\1\u01ef\1\u021f\1\u0220\2\u01ef\22\u01f1\1\u0221\41\u01f1"+
    "\1\u01b7\1\u01f0\1\u0222\1\u01ee\2\u0223\22\u01b7\1\u01f0\41\u01b7"+
    "\3\u01f1\1\u0220\66\u01f1\2\u01b9\1\u01f2\1\u01b9\2\u01f4\66\u01b9"+
    "\1\u0175\1\u01f3\2\u01f4\64\u01b9\1\u012d\1\u01f4\1\u0224\1\u0176"+
    "\2\u01f4\64\u012d\6\0\2\106\1\107\4\0\12\106\5\0"+
    "\5\106\1\u0225\13\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\u0226\16\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\3\106\1\u0227\6\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\10\106"+
    "\1\u0228\1\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\1\u0229\20\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\2\106\1\u022a"+
    "\16\106\5\0\6\106\10\0\1\106\1\u022b\1\107\4\0"+
    "\12\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u022c\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\10\106\1\u022d\1\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\1\106\1\u022e\17\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\5\106\1\u022f\13\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\5\106"+
    "\1\u0230\13\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\6\106\1\u0231\3\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\2\106\1\u0232\16\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\3\106\1\u0233\15\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\5\106\1\u0234\13\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u0235"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\2\106\1\u0236\16\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\11\106\1\u0237\7\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\3\106"+
    "\1\u0238\15\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\3\106\1\u0239\6\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\6\106\1\u023a\3\106\5\0\21\106"+
    "\5\0\6\106\10\0\1\106\1\u023b\1\107\4\0\12\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\45\5\0\12\45"+
    "\5\0\10\45\1\u023c\10\45\5\0\6\45\10\0\1\45"+
    "\1\u023d\5\0\12\45\5\0\21\45\5\0\6\45\10\0"+
    "\2\45\5\0\6\45\1\u023e\3\45\5\0\21\45\5\0"+
    "\6\45\10\0\2\45\5\0\10\45\1\u023f\1\45\5\0"+
    "\21\45\5\0\6\45\2\0\2\331\1\u01b4\1\u012b\70\331"+
    "\1\u0240\1\u0241\66\331\2\u01ec\1\u021b\1\u01ec\2\u01e9\64\u01ec"+
    "\2\331\1\u01ec\1\u0242\66\331\2\u021a\1\u0243\1\u0244\2\u0223"+
    "\64\u021a\2\u01ec\1\u021b\1\u021a\2\u01e9\66\u01ec\1\u01eb\1\u021c"+
    "\2\u01e9\64\u01ec\2\u01b7\1\u0245\1\u01ee\2\u01ef\22\u01b7\1\u01f0"+
    "\41\u01b7\1\330\1\u012a\1\u0173\1\u0172\2\u0174\22\330\1\u012a"+
    "\41\330\2\u01f1\1\u01b7\1\u0246\70\u01f1\1\u0174\1\u0220\67\u01f1"+
    "\1\u0221\1\u0247\1\u0220\2\u0221\64\u01f1\2\u01b7\1\u0248\1\u0249"+
    "\2\u01ef\22\u01b7\1\u01f0\41\u01b7\1\u01f1\1\u0223\1\u024a\1\u0220"+
    "\2\u0223\22\u01f1\1\u0221\41\u01f1\2\u012d\1\u01b9\1\u024b\66\u012d"+
    "\6\0\2\106\1\107\4\0\10\106\1\u024c\1\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\5\106"+
    "\1\u024d\4\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\1\106\1\u024e\17\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\10\106\1\u024f\1\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\4\106\1\u0250\5\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\3\106\1\u0251\6\106\5\0\21\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\3\106\1\u0252"+
    "\6\106\5\0\21\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\3\106\1\u0253\6\106\5\0\21\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u0254"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\5\106"+
    "\1\u0255\4\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\10\106\1\u0256\1\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\3\106\1\u0257\6\106"+
    "\5\0\21\106\5\0\6\106\10\0\1\106\1\u0258\1\107"+
    "\4\0\12\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\3\106\1\u0259\15\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\4\106\1\u025a\5\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\45\5\0\10\45"+
    "\1\u025b\1\45\5\0\21\45\5\0\6\45\10\0\2\45"+
    "\5\0\12\45\5\0\5\45\1\u025c\13\45\5\0\6\45"+
    "\10\0\2\45\5\0\5\45\1\u025d\4\45\5\0\21\45"+
    "\5\0\6\45\2\0\2\u0240\1\u025e\1\u025f\2\u01e7\64\u0240"+
    "\2\u01f1\1\u0260\1\u0220\70\u01f1\1\u01ef\1\u0220\66\u01f1\2\u021a"+
    "\1\u0243\1\u021a\2\u0223\66\u021a\1\u01eb\1\u0244\2\u0223\64\u021a"+
    "\1\u0172\1\u01b5\1\u01e8\1\u0172\2\u01e9\22\u0172\1\u01b5\41\u0172"+
    "\2\u01f1\1\u01e9\1\u0220\70\u01f1\1\u0261\1\u0262\66\u01f1\2\u021a"+
    "\1\u0243\1\u0263\2\u0223\64\u021a\2\u01b7\1\u0264\1\u01ee\2\u01ef"+
    "\22\u01b7\1\u01f0\41\u01b7\2\u01f1\1\u021a\1\u0265\66\u01f1\2\u012d"+
    "\1\u01f4\1\u0176\66\u012d\6\0\2\106\1\107\4\0\5\106"+
    "\1\u0266\4\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\3\106\1\u0267\6\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\5\106\1\u0268\4\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\2\106\1\u0269\7\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\3\106\1\u026a\15\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\2\106\1\u026b\16\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\2\106\1\u026c\16\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\5\106\1\u026d\4\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\2\106\1\u026e\16\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\2\106\1\u026f\16\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\2\106\1\u0270\7\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\10\106\1\u0271\1\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\45\5\0\4\45\1\u0272\5\45\5\0\21\45\5\0"+
    "\6\45\10\0\2\45\5\0\12\45\5\0\13\45\1\u0273"+
    "\5\45\5\0\6\45\10\0\2\45\5\0\3\45\1\u0274"+
    "\6\45\5\0\21\45\5\0\6\45\2\0\2\u0240\1\u025e"+
    "\1\u0275\2\u01e7\66\u0240\1\u0276\1\u025f\2\u01e7\64\u0240\1\u012d"+
    "\1\u0260\1\u0277\1\u0176\2\u0260\22\u012d\1\u01f4\41\u012d\2\u0261"+
    "\1\u0278\1\u0279\2\u0221\64\u0261\2\u01f1\1\u027a\1\u0220\66\u01f1"+
    "\2\u021a\1\u021b\1\u0244\2\u0223\64\u021a\1\u01b7\1\u01f0\1\u0222"+
    "\1\u021d\2\u0223\22\u01b7\1\u01f0\41\u01b7\2\u01f1\1\u0223\1\u0220"+
    "\66\u01f1\6\0\2\106\1\107\4\0\3\106\1\u027b\6\106"+
    "\5\0\21\106\5\0\6\106\10\0\2\106\1\107\4\0"+
    "\3\106\1\u027c\6\106\5\0\21\106\5\0\6\106\10\0"+
    "\2\106\1\107\4\0\12\106\5\0\2\106\1\u027d\16\106"+
    "\5\0\6\106\10\0\2\106\1\107\4\0\12\106\5\0"+
    "\2\106\1\u027e\16\106\5\0\6\106\10\0\2\106\1\107"+
    "\4\0\12\106\5\0\3\106\1\u027f\15\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\3\106\1\u0280"+
    "\15\106\5\0\6\106\10\0\2\106\1\107\4\0\3\106"+
    "\1\u0281\6\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\2\106\1\u0282\7\106\5\0\21\106\5\0"+
    "\6\106\10\0\2\106\1\107\4\0\12\106\5\0\20\106"+
    "\1\u0283\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\20\106\1\u0284\5\0\6\106\10\0\2\45\5\0"+
    "\12\45\5\0\5\45\1\u0285\13\45\5\0\6\45\2\0"+
    "\2\u0261\1\u0286\1\u0279\2\u0221\64\u0261\1\u012c\1\u0287\1\u0288"+
    "\1\u01b9\2\u0174\64\u012c\2\u012d\1\u0289\1\u028a\66\u012d\2\u0261"+
    "\1\u0278\1\u0275\2\u0221\66\u0261\1\u0276\1\u0279\2\u0221\64\u0261"+
    "\1\u012d\1\u027a\1\u028b\1\u0176\2\u027a\22\u012d\1\u01f4\41\u012d"+
    "\6\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u028c"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\2\106"+
    "\1\u028d\7\106\5\0\21\106\5\0\6\106\10\0\2\106"+
    "\1\107\4\0\12\106\5\0\20\106\1\u028e\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\5\106\1\u028f"+
    "\13\106\5\0\6\106\10\0\2\106\1\107\4\0\10\106"+
    "\1\u0290\1\106\5\0\21\106\5\0\6\106\10\0\2\45"+
    "\5\0\3\45\1\u0291\6\45\5\0\21\45\5\0\6\45"+
    "\2\0\1\u01b9\1\u0292\1\u0293\1\u01b9\2\u027a\64\u01b9\1\u012c"+
    "\1\u0287\1\u0288\1\u012c\2\u0174\66\u012c\1\u0294\1\u0261\2\213"+
    "\64\u012c\2\u0289\1\u0295\1\u0296\2\u0260\22\u0289\1\u0297\41\u0289"+
    "\2\u01f1\1\u01e7\1\u0220\66\u01f1\2\u012d\1\u0298\1\u0299\66\u012d"+
    "\6\0\2\106\1\107\4\0\3\106\1\u029a\6\106\5\0"+
    "\21\106\5\0\6\106\10\0\2\106\1\107\4\0\12\106"+
    "\5\0\2\106\1\u029b\16\106\5\0\6\106\10\0\2\45"+
    "\5\0\12\45\5\0\2\45\1\u029c\16\45\5\0\6\45"+
    "\2\0\1\u01b9\1\u0292\1\u0293\1\u01f3\2\u027a\66\u01b9\1\u029d"+
    "\1\u0261\2\u01f4\64\u01b9\2\u01ea\1\u01eb\1\u0298\2\u0174\64\u01ea"+
    "\2\u0289\1\u0295\1\u021d\2\u0260\22\u0289\1\u0297\43\u0289\1\u021e"+
    "\1\u0296\2\u0260\22\u0289\1\u0297\42\u0289\1\u0297\1\u029e\1\u0296"+
    "\2\u027a\22\u0289\1\u0297\41\u0289\2\u0298\1\u029f\1\u02a0\2\u027a"+
    "\64\u0298\2\u01f1\1\u0221\1\u0220\66\u01f1\6\0\2\106\1\107"+
    "\4\0\12\106\5\0\6\106\1\u02a1\12\106\5\0\6\106"+
    "\10\0\2\106\1\107\4\0\12\106\5\0\3\106\1\u02a2"+
    "\15\106\5\0\6\106\10\0\2\45\5\0\10\45\1\u02a3"+
    "\1\45\5\0\21\45\5\0\6\45\2\0\2\u0298\1\u029f"+
    "\1\u0298\2\u027a\64\u0298\2\u0289\1\u02a4\1\u0249\2\u0260\22\u0289"+
    "\1\u0297\41\u0289\2\u0298\1\u029f\1\u021a\2\u027a\66\u0298\1\u01eb"+
    "\1\u02a0\2\u027a\64\u0298\6\0\2\106\1\107\4\0\12\106"+
    "\5\0\5\106\1\u02a5\13\106\5\0\6\106\10\0\2\45"+
    "\5\0\12\45\5\0\13\45\1\u02a6\5\45\5\0\6\45"+
    "\2\0\2\u0298\1\u029f\1\u0263\2\u027a\64\u0298\6\0\2\45"+
    "\5\0\10\45\1\u02a7\1\45\5\0\21\45\5\0\6\45"+
    "\10\0\2\45\5\0\12\45\5\0\5\45\1\u02a8\13\45"+
    "\5\0\6\45\10\0\2\45\5\0\6\45\1\u02a9\3\45"+
    "\5\0\21\45\5\0\6\45\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\3\1\1\11\25\1\2\11\1\1\1\11"+
    "\1\1\3\11\16\1\6\11\10\1\63\0\1\1\1\11"+
    "\16\1\1\11\2\0\1\1\2\0\2\1\1\11\2\0"+
    "\1\1\20\0\1\1\14\0\1\1\27\0\1\1\1\0"+
    "\15\1\3\0\2\1\1\11\27\0\1\1\6\0\1\1"+
    "\3\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\4\0\1\1\5\0\1\1\3\0\21\1\1\0\1\1"+
    "\1\0\1\1\16\0\1\1\12\0\1\1\3\0\1\1"+
    "\21\0\1\1\4\0\21\1\2\0\2\1\2\0\1\1"+
    "\1\0\1\1\10\0\1\1\1\0\1\1\5\0\1\1"+
    "\3\0\1\1\5\0\1\1\2\0\1\1\4\0\2\1"+
    "\3\0\2\1\3\0\13\1\3\0\2\1\2\0\2\1"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\11\0\1\1"+
    "\5\0\1\1\6\0\2\1\3\0\1\1\1\0\6\1"+
    "\1\0\1\1\1\0\4\1\3\0\1\1\1\0\4\1"+
    "\6\0\1\1\4\0\1\1\1\0\1\1\12\0\2\1"+
    "\1\0\5\1\2\0\1\1\1\0\3\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\1\1\0\1\1\6\0\2\1\2\0\2\1"+
    "\1\0\5\1\2\0\3\1\2\0\1\1\5\0\1\1"+
    "\5\0\2\1\5\0\5\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\6\0\1\1\3\0\5\1\1\0\5\1"+
    "\2\0\3\1\3\0\4\1\3\0\1\1\1\0\2\1"+
    "\1\0\4\1\2\0\2\1\3\0\2\1\1\0\2\1"+
    "\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[681];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public YangFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 95: 
          { yybegin(BLACK_BOX_STRING); return OrderedBy;
          }
        case 113: break;
        case 25: 
          { yybegin(BLACK_BOX_STRING); return Rpc;
          }
        case 114: break;
        case 53: 
          { yybegin(BLACK_BOX_STRING); return Output;
          }
        case 115: break;
        case 39: 
          { return Int8;
          }
        case 116: break;
        case 26: 
          { yybegin(BLACK_BOX_STRING); return Bit;
          }
        case 117: break;
        case 1: 
          { return RULE_ANY_OTHER;
          }
        case 118: break;
        case 99: 
          { yybegin(BLACK_BOX_STRING); return YinElement;
          }
        case 119: break;
        case 42: 
          { yybegin(BLACK_BOX_STRING); return Input;
          }
        case 120: break;
        case 102: 
          { yybegin(BLACK_BOX_STRING); return Notification;
          }
        case 121: break;
        case 75: 
          { yybegin(BLACK_BOX_STRING); return Pattern;
          }
        case 122: break;
        case 109: 
          { yybegin(BLACK_BOX_STRING); return ErrorMessage;
          }
        case 123: break;
        case 93: 
          { yybegin(BLACK_BOX_STRING); return Container;
          }
        case 124: break;
        case 46: 
          { return Int16;
          }
        case 125: break;
        case 81: 
          { yybegin(BLACK_BOX_STRING); return Modifier;
          }
        case 126: break;
        case 35: 
          { yybegin(BLACK_BOX_STRING); return Case;
          }
        case 127: break;
        case 89: 
          { yybegin(BLACK_BOX_STRING); return Mandatory;
          }
        case 128: break;
        case 63: 
          { return Binary;
          }
        case 129: break;
        case 107: 
          { yybegin(BLACK_BOX_STRING); return RevisionDate;
          }
        case 130: break;
        case 79: 
          { yybegin(BLACK_BOX_STRING); return Argument;
          }
        case 131: break;
        case 15: 
          { return RightParenthesis;
          }
        case 132: break;
        case 32: 
          { yybegin(BLACK_BOX_STRING); return List;
          }
        case 133: break;
        case 27: 
          { yybegin(EXPRESSION); return Key;
          }
        case 134: break;
        case 92: 
          { yybegin(BLACK_BOX_STRING); return Extension;
          }
        case 135: break;
        case 12: 
          { return RULE_NUMBER;
          }
        case 136: break;
        case 36: 
          { yybegin(EXPRESSION); return Path;
          }
        case 137: break;
        case 87: 
          { yybegin(EXPRESSION); return Deviation;
          }
        case 138: break;
        case 23: 
          { yybegin(EXPRESSION); return RULE_HIDDEN;
          }
        case 139: break;
        case 90: 
          { yybegin(BLACK_BOX_STRING); return Submodule;
          }
        case 140: break;
        case 91: 
          { yybegin(BLACK_BOX_STRING); return LeafList;
          }
        case 141: break;
        case 85: 
          { yybegin(BLACK_BOX_STRING); return Grouping;
          }
        case 142: break;
        case 51: 
          { yybegin(BLACK_BOX_STRING); return Anyxml;
          }
        case 143: break;
        case 66: 
          { return Uint16;
          }
        case 144: break;
        case 45: 
          { return Int64;
          }
        case 145: break;
        case 112: 
          { return InstanceIdentifier;
          }
        case 146: break;
        case 55: 
          { yybegin(BLACK_BOX_STRING); return Module;
          }
        case 147: break;
        case 30: 
          { yybegin(BLACK_BOX_STRING); return Base;
          }
        case 148: break;
        case 108: 
          { yybegin(BLACK_BOX_STRING); return ErrorAppTag;
          }
        case 149: break;
        case 96: 
          { yybegin(EXPRESSION); return IfFeature;
          }
        case 150: break;
        case 8: 
          { return RULE_ID;
          }
        case 151: break;
        case 64: 
          { return String;
          }
        case 152: break;
        case 24: 
          { yybegin(BLACK_BOX_STRING);  return RULE_EXTENSION_NAME;
          }
        case 153: break;
        case 50: 
          { return Uint8;
          }
        case 154: break;
        case 105: 
          { yybegin(BLACK_BOX_STRING); return MinElements;
          }
        case 155: break;
        case 21: 
          { return RULE_SL_COMMENT;
          }
        case 156: break;
        case 29: 
          { yybegin(EXPRESSION); return Must;
          }
        case 157: break;
        case 97: 
          { yybegin(BLACK_BOX_STRING); return BelongsTo;
          }
        case 158: break;
        case 68: 
          { yybegin(BLACK_BOX_STRING); return Anydata;
          }
        case 159: break;
        case 103: 
          { yybegin(BLACK_BOX_STRING); return Organization;
          }
        case 160: break;
        case 101: 
          { return Enumeration;
          }
        case 161: break;
        case 37: 
          { yybegin(EXPRESSION); return Uses;
          }
        case 162: break;
        case 65: 
          { return Uint64;
          }
        case 163: break;
        case 70: 
          { yybegin(BLACK_BOX_STRING); return Deviate;
          }
        case 164: break;
        case 73: 
          { yybegin(BLACK_BOX_STRING); return Typedef;
          }
        case 165: break;
        case 82: 
          { yybegin(BLACK_BOX_STRING); return Identity;
          }
        case 166: break;
        case 2: 
          { return RULE_WS;
          }
        case 167: break;
        case 104: 
          { yybegin(BLACK_BOX_STRING); return MaxElements;
          }
        case 168: break;
        case 6: 
          { return Solidus;
          }
        case 169: break;
        case 80: 
          { yybegin(BLACK_BOX_STRING); return Revision;
          }
        case 170: break;
        case 83: 
          { yybegin(BLACK_BOX_STRING); return Position;
          }
        case 171: break;
        case 13: 
          { return FullStop;
          }
        case 172: break;
        case 54: 
          { yybegin(EXPRESSION); return Refine;
          }
        case 173: break;
        case 76: 
          { yybegin(BLACK_BOX_STRING); return Feature;
          }
        case 174: break;
        case 20: 
          { yybegin(YYINITIAL); return RULE_HIDDEN;
          }
        case 175: break;
        case 11: 
          { yybegin(IN_EXPRESSION_STRING); return RULE_HIDDEN;
          }
        case 176: break;
        case 59: 
          { yybegin(BLACK_BOX_STRING); return Config;
          }
        case 177: break;
        case 38: 
          { yybegin(EXPRESSION); return When;
          }
        case 178: break;
        case 61: 
          { yybegin(BLACK_BOX_STRING); return Prefix;
          }
        case 179: break;
        case 56: 
          { yybegin(BLACK_BOX_STRING); return Import;
          }
        case 180: break;
        case 48: 
          { return Empty;
          }
        case 181: break;
        case 69: 
          { yybegin(EXPRESSION); return Augment;
          }
        case 182: break;
        case 72: 
          { yybegin(BLACK_BOX_STRING); return Include;
          }
        case 183: break;
        case 14: 
          { return LeftParenthesis;
          }
        case 184: break;
        case 40: 
          { return Bits;
          }
        case 185: break;
        case 7: 
          { return RULE_OPERATOR;
          }
        case 186: break;
        case 49: 
          { return Union;
          }
        case 187: break;
        case 52: 
          { yybegin(BLACK_BOX_STRING); return Action;
          }
        case 188: break;
        case 31: 
          { yybegin(EXPRESSION); return Type;
          }
        case 189: break;
        case 47: 
          { return Int32;
          }
        case 190: break;
        case 106: 
          { yybegin(BLACK_BOX_STRING); return YangVersion;
          }
        case 191: break;
        case 34: 
          { yybegin(BLACK_BOX_STRING); return Enum;
          }
        case 192: break;
        case 9: 
          { return Colon;
          }
        case 193: break;
        case 41: 
          { yybegin(BLACK_BOX_STRING); return Range;
          }
        case 194: break;
        case 4: 
          { yybegin(YYINITIAL); return Semicolon;
          }
        case 195: break;
        case 111: 
          { yybegin(BLACK_BOX_STRING); return RequireInstance;
          }
        case 196: break;
        case 71: 
          { yybegin(BLACK_BOX_STRING); return Default;
          }
        case 197: break;
        case 77: 
          { return Boolean;
          }
        case 198: break;
        case 110: 
          { yybegin(BLACK_BOX_STRING); return FractionDigits;
          }
        case 199: break;
        case 78: 
          { return Leafref;
          }
        case 200: break;
        case 3: 
          { yybegin(YYINITIAL); return RightCurlyBracket;
          }
        case 201: break;
        case 84: 
          { yybegin(BLACK_BOX_STRING); return Presence;
          }
        case 202: break;
        case 67: 
          { return Uint32;
          }
        case 203: break;
        case 10: 
          { yybegin(IN_SQ_EXPRESSION_STRING); return RULE_HIDDEN;
          }
        case 204: break;
        case 62: 
          { yybegin(EXPRESSION); return Unique;
          }
        case 205: break;
        case 98: 
          { yybegin(BLACK_BOX_STRING); return Description;
          }
        case 206: break;
        case 16: 
          { return LeftSquareBracket;
          }
        case 207: break;
        case 74: 
          { yybegin(BLACK_BOX_STRING); return Contact;
          }
        case 208: break;
        case 60: 
          { yybegin(BLACK_BOX_STRING); return Choice;
          }
        case 209: break;
        case 58: 
          { yybegin(BLACK_BOX_STRING); return Length;
          }
        case 210: break;
        case 43: 
          { yybegin(BLACK_BOX_STRING); return Value;
          }
        case 211: break;
        case 86: 
          { yybegin(BLACK_BOX_STRING); return Namespace;
          }
        case 212: break;
        case 100: 
          { return Identityref;
          }
        case 213: break;
        case 17: 
          { return RightSquareBracket;
          }
        case 214: break;
        case 19: 
          { return RULE_STRING;
          }
        case 215: break;
        case 94: 
          { return Decimal64;
          }
        case 216: break;
        case 88: 
          { yybegin(BLACK_BOX_STRING); return Reference;
          }
        case 217: break;
        case 33: 
          { yybegin(BLACK_BOX_STRING); return Leaf;
          }
        case 218: break;
        case 18: 
          { return Comma;
          }
        case 219: break;
        case 22: 
          { return FullStopFullStop;
          }
        case 220: break;
        case 5: 
          { yybegin(YYINITIAL); return LeftCurlyBracket;
          }
        case 221: break;
        case 57: 
          { yybegin(BLACK_BOX_STRING); return Status;
          }
        case 222: break;
        case 44: 
          { yybegin(BLACK_BOX_STRING); return Units;
          }
        case 223: break;
        case 28: 
          { return RULE_ML_COMMENT;
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
