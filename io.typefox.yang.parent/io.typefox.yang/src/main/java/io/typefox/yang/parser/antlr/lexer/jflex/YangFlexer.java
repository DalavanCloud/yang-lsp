/* The following code was generated by JFlex 1.4.3 on 6/29/17 9:37 AM */

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/28/17 10:39 AM from the specification file
 * <tt>./src/main/java/io/typefox/yang/parser/antlr/lexer/jflex/YangFlexer.flex</tt>
 */
public class YangFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_EXPRESSION_STRING = 4;
  public static final int EXPRESSION = 2;
  public static final int IN_SQ_EXPRESSION_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int ID_EXPECTED = 10;
  public static final int BLACK_BOX_STRING = 12;
  public static final int COLON_EXPECTED = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\2\0\1\5\22\0\1\1\1\32\1\12\4\0"+
    "\1\11\1\56\1\57\1\3\1\27\1\62\1\30\1\15\1\2\1\14"+
    "\1\52\1\54\1\53\1\45\1\14\1\44\1\14\1\51\1\14\1\34"+
    "\1\71\1\33\1\31\1\33\2\0\32\6\1\60\1\13\1\61\1\0"+
    "\1\7\1\0\1\16\1\35\1\43\1\20\1\42\1\50\1\55\1\64"+
    "\1\24\1\6\1\65\1\41\1\23\1\17\1\21\1\46\1\67\1\22"+
    "\1\40\1\37\1\47\1\25\1\70\1\63\1\36\1\66\1\72\1\26"+
    "\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\0\1\2\1\3\25\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\5\10"+
    "\1\0\1\7\1\15\5\10\1\16\1\17\1\20\1\21"+
    "\1\22\1\6\1\23\1\24\1\0\1\10\1\23\1\25"+
    "\1\26\2\23\1\27\1\0\57\2\1\0\1\13\1\30"+
    "\3\10\1\7\12\10\1\23\2\0\1\31\2\0\2\23"+
    "\1\27\2\0\20\2\1\32\14\2\1\33\27\2\1\34"+
    "\1\2\15\10\3\0\2\23\1\35\26\2\1\36\6\2"+
    "\1\37\3\2\1\40\2\2\1\41\1\42\1\2\1\43"+
    "\2\2\1\44\4\2\1\45\5\2\1\46\3\2\1\47"+
    "\2\10\1\50\6\10\1\51\6\10\1\0\1\31\1\0"+
    "\1\31\1\0\15\2\1\52\11\2\1\53\3\2\1\54"+
    "\21\2\1\55\4\2\1\10\1\56\1\57\1\60\7\10"+
    "\1\61\1\62\1\10\1\63\2\10\2\0\2\31\1\0"+
    "\1\2\1\64\1\2\1\65\10\2\1\66\1\2\1\67"+
    "\4\2\1\70\3\2\1\71\5\2\1\72\2\2\1\73"+
    "\4\2\1\74\1\75\3\2\1\76\1\77\3\2\4\10"+
    "\1\100\1\101\2\10\1\102\1\103\1\104\3\0\2\31"+
    "\2\0\1\31\1\105\1\2\1\106\3\2\1\107\1\2"+
    "\1\110\10\2\1\111\5\2\1\112\6\2\1\113\1\114"+
    "\3\2\1\115\1\2\3\10\1\116\1\117\1\10\1\0"+
    "\1\31\1\0\4\31\3\0\1\31\1\0\3\31\1\120"+
    "\6\2\1\121\5\2\1\122\12\2\1\123\1\124\1\2"+
    "\1\125\4\10\2\0\1\31\1\0\3\31\1\0\1\31"+
    "\2\0\1\31\1\0\1\31\1\0\1\126\1\2\1\127"+
    "\4\2\1\130\1\2\1\131\6\2\1\132\1\133\2\2"+
    "\1\134\1\135\1\2\1\136\3\10\1\31\2\0\3\31"+
    "\2\0\1\31\3\0\2\2\1\137\5\2\1\140\1\141"+
    "\5\2\3\10\2\31\1\0\1\31\1\0\2\31\1\0"+
    "\1\2\1\142\6\2\1\143\3\2\1\10\1\144\1\145"+
    "\2\31\1\0\3\31\1\146\1\147\2\2\1\150\1\151"+
    "\1\152\3\2\1\10\3\31\3\0\1\153\1\2\1\154"+
    "\1\155\1\2\1\10\3\31\2\0\2\31\1\0\2\2"+
    "\1\10\1\31\1\0\2\31\1\2\1\156\1\10\1\31"+
    "\1\157\3\10\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[675];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u024e\0\u024e\0\u01d8\0\u024e\0\u0760\0\u024e\0\u024e\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0938"+
    "\0\u024e\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u024e\0\u024e"+
    "\0\u024e\0\u024e\0\u024e\0\u024e\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u024e\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17bd"+
    "\0\u024e\0\u17f8\0\u1833\0\u186e\0\u0760\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u024e"+
    "\0\u0ad5\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u024e"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u0213\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u0213"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u0213"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u024e\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u0213\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u332a\0\u0213\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u0213\0\u34c7\0\u3502\0\u0213\0\u353d\0\u3578\0\u0213\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u0213\0\u369f\0\u36da\0\u3715\0\u3750"+
    "\0\u378b\0\u0213\0\u37c6\0\u3801\0\u383c\0\u0213\0\u3877\0\u38b2"+
    "\0\u0760\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u0760"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u0213\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u0213\0\u41ea\0\u4225\0\u4260\0\u0213\0\u429b"+
    "\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473"+
    "\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b"+
    "\0\u0213\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u0760\0\u0760"+
    "\0\u0760\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f"+
    "\0\u0760\0\u0760\0\u494a\0\u0760\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u0213\0\u4b5d\0\u0213\0\u4b98"+
    "\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u0213"+
    "\0\u4d70\0\u0213\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u0213\0\u4e97"+
    "\0\u4ed2\0\u4f0d\0\u0213\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034"+
    "\0\u0213\0\u506f\0\u50aa\0\u0213\0\u50e5\0\u5120\0\u515b\0\u5196"+
    "\0\u0213\0\u0213\0\u51d1\0\u520c\0\u5247\0\u0213\0\u0213\0\u5282"+
    "\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u0760\0\u0760"+
    "\0\u541f\0\u545a\0\u0760\0\u0760\0\u0760\0\u5495\0\u54d0\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u0213\0\u566d\0\u0213"+
    "\0\u56a8\0\u56e3\0\u571e\0\u0213\0\u5759\0\u0213\0\u5794\0\u57cf"+
    "\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u0213\0\u596c"+
    "\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u0213\0\u5a93\0\u5ace\0\u5b09"+
    "\0\u5b44\0\u5b7f\0\u5bba\0\u0213\0\u0213\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u0213\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u0760\0\u0760\0\u5d92"+
    "\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a"+
    "\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\u0213"+
    "\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df"+
    "\0\u631a\0\u6355\0\u6390\0\u63cb\0\u0213\0\u6406\0\u6441\0\u647c"+
    "\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u0213"+
    "\0\u0213\0\u6654\0\u0213\0\u668f\0\u66ca\0\u6705\0\u6740\0\u677b"+
    "\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953"+
    "\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\u0213\0\u6af0"+
    "\0\u0213\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u0213\0\u6c17\0\u0213"+
    "\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u0213\0\u0213"+
    "\0\u6db4\0\u6def\0\u0213\0\u0213\0\u6e2a\0\u0760\0\u6e65\0\u6ea0"+
    "\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078"+
    "\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u0213"+
    "\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u0213\0\u0213\0\u7377"+
    "\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\u754f"+
    "\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727"+
    "\0\u0213\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u0213"+
    "\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u0760\0\u0760\0\u79b0\0\u79eb"+
    "\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u0213\0\u0213\0\u7b12\0\u7b4d"+
    "\0\u0213\0\u0213\0\u0213\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74"+
    "\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u0213\0\u7dd6\0\u0213"+
    "\0\u0213\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73"+
    "\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b"+
    "\0\u8186\0\u81c1\0\u81fc\0\u0213\0\u8237\0\u8272\0\u0213\0\u82ad"+
    "\0\u82e8\0\u8323\0\u0760";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[675];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\10\1\11\1\0\2\10\1\12\1\0\1\13"+
    "\5\0\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\7\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\0\1\33\1\34\1\35\4\0\1\36\5\0"+
    "\2\12\1\37\2\12\1\40\1\41\1\42\1\0\1\10"+
    "\1\43\1\44\2\10\1\45\1\0\1\13\1\46\1\47"+
    "\1\0\1\50\1\51\1\52\1\45\1\53\1\54\1\45"+
    "\1\55\1\56\1\45\4\44\1\57\1\60\1\61\1\62"+
    "\2\45\1\63\1\64\1\65\1\45\2\50\1\45\1\66"+
    "\1\45\4\50\1\45\1\67\1\70\1\71\1\72\1\73"+
    "\6\45\1\41\1\42\1\0\1\10\1\74\1\44\2\10"+
    "\1\45\1\0\1\13\1\75\1\76\1\77\1\50\1\51"+
    "\1\52\1\45\1\100\1\54\1\45\1\55\2\45\4\44"+
    "\1\57\1\60\1\61\7\45\2\50\3\45\4\50\1\45"+
    "\1\67\1\70\1\71\1\72\1\73\6\45\1\41\1\42"+
    "\1\0\1\10\1\74\1\44\2\10\1\45\1\0\1\13"+
    "\1\76\1\101\1\0\1\50\1\51\1\52\1\45\1\100"+
    "\1\54\1\45\1\55\2\45\4\44\1\57\1\60\1\61"+
    "\7\45\2\50\3\45\4\50\1\45\1\67\1\70\1\71"+
    "\1\72\1\73\6\45\1\41\1\42\1\0\1\10\2\0"+
    "\2\10\2\0\1\13\23\0\1\102\34\0\1\41\1\42"+
    "\1\0\1\10\2\0\2\10\1\103\1\0\1\13\5\0"+
    "\10\103\7\0\7\103\2\0\3\103\4\0\1\103\5\0"+
    "\6\103\1\41\1\42\1\104\1\10\1\105\1\104\2\10"+
    "\2\104\1\13\1\75\1\101\56\104\1\41\1\42\1\0"+
    "\1\10\2\0\2\10\67\0\1\106\1\107\75\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\103\0\2\12\4\0\3\12\1\110\2\12\1\111\3\12"+
    "\2\0\1\12\4\0\6\12\1\112\3\12\1\113\6\12"+
    "\5\0\6\12\10\0\2\12\4\0\2\12\1\114\2\12"+
    "\1\115\4\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\116\13\12\5\0\6\12\10\0\2\12\4\0\6\12"+
    "\1\117\3\12\2\0\1\12\4\0\12\12\1\120\6\12"+
    "\5\0\6\12\10\0\2\12\4\0\2\12\1\121\7\12"+
    "\2\0\1\12\4\0\5\12\1\122\3\12\1\123\7\12"+
    "\5\0\6\12\10\0\2\12\4\0\2\12\1\124\2\12"+
    "\1\125\2\12\1\126\1\12\2\0\1\12\4\0\12\12"+
    "\1\127\6\12\5\0\6\12\10\0\2\12\4\0\3\12"+
    "\1\130\1\131\2\12\1\132\2\12\2\0\1\12\4\0"+
    "\13\12\1\133\5\12\5\0\6\12\10\0\2\12\4\0"+
    "\2\12\1\134\7\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\2\12\1\135\5\12\1\136"+
    "\1\12\2\0\1\12\4\0\5\12\1\137\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\2\12\1\140\5\12\1\141"+
    "\1\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\1\12\1\142"+
    "\17\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\143\7\12\1\144\6\12\5\0"+
    "\6\12\10\0\2\12\4\0\10\12\1\145\1\12\2\0"+
    "\1\12\4\0\5\12\1\146\13\12\5\0\6\12\10\0"+
    "\2\12\4\0\3\12\1\147\2\12\1\150\3\12\2\0"+
    "\1\12\4\0\21\12\5\0\1\151\5\12\10\0\2\12"+
    "\4\0\2\12\1\152\2\12\1\153\4\12\2\0\1\12"+
    "\4\0\21\12\5\0\1\12\1\154\4\12\10\0\2\12"+
    "\4\0\2\12\1\155\2\12\1\156\1\157\3\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\3\12\1\160\6\12\2\0\1\12\4\0\3\12\1\161"+
    "\15\12\5\0\6\12\10\0\2\12\4\0\6\12\1\162"+
    "\3\12\2\0\1\12\4\0\5\12\1\163\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\6\12\1\164\3\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\5\12\1\165\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\21\12\5\0\1\12\1\166\4\12\10\0\2\45\4\0"+
    "\12\45\2\0\1\45\4\0\21\45\5\0\6\45\16\0"+
    "\1\50\1\167\26\0\2\50\3\0\4\50\32\0\1\170"+
    "\1\171\26\0\2\170\3\0\4\170\24\0\2\45\4\0"+
    "\3\45\1\172\6\45\2\0\1\45\4\0\21\45\5\0"+
    "\6\45\10\0\2\45\4\0\10\45\1\173\1\45\2\0"+
    "\1\45\4\0\5\45\1\174\13\45\5\0\6\45\10\0"+
    "\2\45\4\0\6\45\1\175\3\45\2\0\1\45\4\0"+
    "\21\45\5\0\6\45\10\0\2\45\4\0\5\45\1\172"+
    "\4\45\2\0\1\45\4\0\21\45\5\0\6\45\10\0"+
    "\2\45\4\0\3\45\1\176\1\177\5\45\2\0\1\45"+
    "\4\0\21\45\5\0\6\45\33\0\1\44\47\0\2\45"+
    "\4\0\5\45\1\200\2\45\1\201\1\45\2\0\1\45"+
    "\4\0\21\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\2\45\1\202\16\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\5\45"+
    "\1\203\13\45\5\0\6\45\10\0\2\45\4\0\3\45"+
    "\1\204\3\45\1\205\2\45\2\0\1\45\4\0\21\45"+
    "\5\0\6\45\10\0\2\45\4\0\3\45\1\206\4\45"+
    "\1\207\1\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\2\0\11\75\1\210\61\75\1\0\1\211\1\212\1\0"+
    "\2\211\21\0\1\213\55\0\1\214\66\0\2\45\4\0"+
    "\10\45\1\173\1\45\2\0\1\45\4\0\21\45\5\0"+
    "\6\45\2\0\12\101\1\210\1\215\57\101\6\0\2\103"+
    "\4\0\12\103\2\0\1\103\4\0\21\103\5\0\6\103"+
    "\2\0\1\104\1\0\2\104\2\0\2\104\3\0\56\104"+
    "\2\0\1\104\1\0\1\216\1\217\2\0\2\104\3\0"+
    "\56\104\2\0\4\106\1\220\1\221\65\106\3\107\1\222"+
    "\67\107\6\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\1\12\1\223\17\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\20\12\1\224\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\2\12"+
    "\1\225\16\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\20\12\1\226\5\0\6\12\10\0"+
    "\2\12\4\0\7\12\1\227\2\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\230\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\11\12\1\231\2\0\1\12\4\0\3\12"+
    "\1\232\7\12\1\233\5\12\5\0\6\12\10\0\2\12"+
    "\4\0\4\12\1\234\5\12\2\0\1\12\4\0\20\12"+
    "\1\235\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\236\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\3\12\1\237\6\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\11\12\1\240"+
    "\2\0\1\12\4\0\13\12\1\241\5\12\5\0\4\12"+
    "\1\242\1\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\6\12\1\243\12\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\244\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\1\245\5\12\10\0\2\12\4\0\4\12\1\246"+
    "\5\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\3\12\1\247\6\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\3\12\1\250\15\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\6\12\1\251"+
    "\2\12\1\252\7\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\5\12\1\253\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\11\12\1\254\7\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\255\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\4\12\1\256"+
    "\14\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\3\12\1\257\15\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\2\12\1\260"+
    "\16\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\4\12\1\261\14\12\5\0\6\12\10\0"+
    "\2\12\4\0\3\12\1\262\6\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\3\12\1\263"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\11\12\1\264"+
    "\7\12\5\0\6\12\10\0\2\12\4\0\2\12\1\265"+
    "\7\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\1\266\20\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\3\12\1\267\15\12\5\0\6\12\10\0\2\12"+
    "\4\0\2\12\1\270\1\271\6\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\12\12\1\272\6\12\5\0\6\12\10\0"+
    "\2\12\4\0\6\12\1\273\3\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\274\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\3\12\1\275"+
    "\15\12\5\0\6\12\10\0\2\12\4\0\3\12\1\276"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\5\12\1\277\4\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\300\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\3\12\1\301"+
    "\15\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\5\12\1\302\13\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\303\1\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\5\12\1\304\13\12\5\0\6\12\10\0"+
    "\2\12\4\0\2\12\1\305\7\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\2\12\1\306"+
    "\7\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\5\12\1\307\4\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\1\12\1\310\17\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\311"+
    "\13\12\5\0\6\12\16\0\1\170\27\0\2\170\3\0"+
    "\4\170\24\0\2\45\4\0\4\45\1\175\5\45\2\0"+
    "\1\45\4\0\21\45\5\0\6\45\10\0\2\45\4\0"+
    "\11\45\1\175\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\6\45"+
    "\1\312\12\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\2\45\1\313\1\314\15\45\5\0"+
    "\6\45\10\0\2\45\4\0\12\45\2\0\1\45\4\0"+
    "\5\45\1\315\13\45\5\0\6\45\10\0\2\45\4\0"+
    "\5\45\1\316\4\45\2\0\1\45\4\0\21\45\5\0"+
    "\6\45\10\0\2\45\4\0\3\45\1\317\6\45\2\0"+
    "\1\45\4\0\2\45\1\320\16\45\5\0\6\45\10\0"+
    "\2\45\4\0\6\45\1\321\3\45\2\0\1\45\4\0"+
    "\21\45\5\0\6\45\10\0\2\45\4\0\2\45\1\322"+
    "\7\45\2\0\1\45\4\0\21\45\5\0\6\45\10\0"+
    "\2\45\4\0\12\45\2\0\1\45\4\0\12\45\1\323"+
    "\6\45\5\0\6\45\10\0\2\45\4\0\12\45\2\0"+
    "\1\45\4\0\11\45\1\324\7\45\5\0\6\45\10\0"+
    "\2\45\4\0\10\45\1\325\1\45\2\0\1\45\4\0"+
    "\21\45\5\0\6\45\10\0\2\45\4\0\3\45\1\326"+
    "\6\45\2\0\1\45\4\0\21\45\5\0\6\45\4\0"+
    "\1\327\1\330\70\0\1\213\1\331\1\0\2\213\65\0"+
    "\12\214\1\0\1\332\57\214\4\101\1\0\66\101\1\216"+
    "\1\106\2\216\1\220\1\221\2\216\3\106\56\216\2\106"+
    "\1\217\1\107\1\217\1\333\2\107\2\217\3\107\56\217"+
    "\2\107\4\0\1\220\66\0\2\107\1\334\1\222\67\107"+
    "\6\0\2\12\4\0\4\12\1\335\5\12\2\0\1\12"+
    "\4\0\21\12\5\0\1\336\5\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\12\12\1\337\6\12\5\0"+
    "\6\12\10\0\2\12\4\0\10\12\1\340\1\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\7\12\1\341\2\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\5\12\1\342\13\12\5\0\6\12\10\0\2\12\4\0"+
    "\10\12\1\343\1\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\10\12\1\344\1\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\6\12\1\345\12\12\5\0"+
    "\6\12\10\0\2\12\4\0\2\12\1\346\7\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\5\12\1\347\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\2\12\1\350\7\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\11\12\1\351\7\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\20\12\1\352\5\0\6\12\10\0\2\12\4\0\10\12"+
    "\1\353\1\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\10\12\1\354\1\12\2\0\1\12"+
    "\4\0\5\12\1\355\13\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\12\12\1\356\6\12"+
    "\5\0\6\12\10\0\2\12\4\0\4\12\1\357\5\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\360\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\12\12"+
    "\1\361\6\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\362\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\2\12\1\363\16\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\4\12\1\364\14\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\12\12\1\365\6\12"+
    "\5\0\6\12\10\0\2\12\4\0\3\12\1\366\6\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\5\12\1\367\4\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\13\12\1\370\5\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\12\12\1\371\6\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\5\12\1\372\13\12\5\0\6\12\10\0\2\12"+
    "\4\0\5\12\1\373\4\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\20\12\1\374\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\375\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\376"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\377\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\7\12\1\u0100\2\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\u0101\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\13\12\1\u0102"+
    "\5\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\20\12\1\u0103\5\0\6\12\10\0\2\12"+
    "\4\0\7\12\1\u0104\2\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\5\12\1\u0105\4\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\5\12\1\u0106\13\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\5\12\1\u0107\13\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\2\12\1\u0108\10\12"+
    "\1\u0109\5\12\5\0\6\12\10\0\2\12\4\0\10\12"+
    "\1\u010a\1\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\2\12"+
    "\1\u010b\16\12\5\0\1\12\1\u010c\4\12\10\0\2\12"+
    "\4\0\10\12\1\u010d\1\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\3\12\1\u010e\7\12\1\u010f\5\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\2\12"+
    "\1\u0110\16\12\5\0\4\12\1\u0111\1\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\3\12\1\u0112\15\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\6\12\1\u0113\12\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\2\12\1\u0114\16\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\12\12\1\u0115\6\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\u0116\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\45\4\0\10\45\1\u0117\1\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\7\45\1\u0118\4\45"+
    "\1\u0119\1\u011a\1\u011b\2\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\2\45\1\u011c\16\45"+
    "\5\0\6\45\10\0\2\45\4\0\3\45\1\u011d\6\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\4\45\1\u011e\14\45"+
    "\5\0\6\45\10\0\2\45\4\0\2\45\1\u011f\7\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\3\45\1\u0120\15\45"+
    "\5\0\6\45\10\0\2\45\4\0\10\45\1\u0121\1\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\13\45\1\u0122\5\45"+
    "\5\0\6\45\10\0\2\45\4\0\7\45\1\u0123\2\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\2\45\1\u0124\16\45"+
    "\5\0\6\45\10\0\2\45\4\0\5\45\1\u0125\4\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\2\45\1\u0126\16\45"+
    "\5\0\6\45\2\0\2\327\1\u0127\1\327\2\211\21\327"+
    "\1\u0128\43\327\3\330\1\u0129\67\330\2\0\1\u012a\1\u012b"+
    "\101\0\1\210\60\0\1\217\1\107\1\104\1\333\2\107"+
    "\2\217\3\107\56\217\2\107\6\0\2\12\4\0\2\12"+
    "\1\u012c\7\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\7\12\1\u012d\2\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\7\12"+
    "\1\u012e\2\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\5\12\1\u012f\4\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u0130\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\3\12"+
    "\1\u0131\15\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\13\12\1\u0132\5\12\5\0\6\12"+
    "\10\0\2\12\4\0\2\12\1\u0133\7\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\6\12"+
    "\1\u0134\3\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\12\12"+
    "\1\u0135\6\12\5\0\6\12\10\0\2\12\4\0\6\12"+
    "\1\u0136\3\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\3\12\1\u0137\6\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\12\12\1\u0138\6\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u0139\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\3\12\1\u013a\15\12\5\0\6\12"+
    "\10\0\2\12\4\0\3\12\1\u013b\6\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\6\12"+
    "\1\u013c\3\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\10\12\1\u013d\1\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\2\12"+
    "\1\u013e\7\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u013f\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\4\12\1\u0140\14\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u0141\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\12\12\1\u0142\6\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\2\12"+
    "\1\u0143\16\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\2\12\1\u0144\16\12\5\0\6\12"+
    "\10\0\2\12\4\0\6\12\1\u0145\3\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u0146\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u0147\13\12\5\0\6\12\10\0\2\12\4\0\3\12"+
    "\1\u0148\6\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\u0149\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\5\12\1\u014a\13\12\5\0\6\12\10\0\2\12"+
    "\4\0\4\12\1\u014b\5\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\12\12\1\u014c\6\12\5\0\6\12\10\0\2\12"+
    "\4\0\5\12\1\u014d\4\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\u014e"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\2\12\1\u014f\16\12\5\0\6\12"+
    "\10\0\2\12\4\0\6\12\1\u0150\3\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\3\12"+
    "\1\u0151\6\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\2\12\1\u0152\7\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\10\12"+
    "\1\u0153\1\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\6\12"+
    "\1\u0154\12\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u0155\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\2\12"+
    "\1\u0156\16\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u0157\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\10\12\1\u0158\1\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\3\12\1\u0159\15\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\12\12"+
    "\1\u015a\6\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\2\12\1\u015b\16\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\12\12"+
    "\1\u015c\6\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\11\12\1\u015d\7\12\5\0\6\12"+
    "\10\0\2\45\4\0\7\45\1\u015e\2\45\2\0\1\45"+
    "\4\0\21\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\10\45\1\u015f\10\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\7\45"+
    "\1\u0160\11\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\17\45\1\u0161\1\45\5\0\6\45"+
    "\10\0\2\45\4\0\2\45\1\u0162\7\45\2\0\1\45"+
    "\4\0\21\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\2\45\1\u0163\16\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\5\45"+
    "\1\u0164\13\45\5\0\6\45\10\0\2\45\4\0\6\45"+
    "\1\u0165\3\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\10\0\2\45\4\0\3\45\1\u0166\6\45\2\0\1\45"+
    "\4\0\21\45\5\0\6\45\10\0\2\45\4\0\6\45"+
    "\1\u0167\3\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\5\45"+
    "\1\u0168\13\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\1\45\1\u0169\17\45\5\0\6\45"+
    "\10\0\2\45\4\0\3\45\1\u016a\6\45\2\0\1\45"+
    "\4\0\21\45\5\0\6\45\10\0\2\45\4\0\12\45"+
    "\2\0\1\45\4\0\7\45\1\u016b\4\45\1\u016c\1\u016d"+
    "\1\u016e\2\45\5\0\6\45\2\0\2\327\1\u0127\1\u016f"+
    "\2\211\21\327\1\u0128\44\327\1\u0128\1\u0170\1\327\2\u0171"+
    "\21\327\1\u0128\43\327\2\330\1\211\1\u0129\67\330\2\u012a"+
    "\1\u0172\1\u012a\2\213\65\u012a\3\u012b\1\u0173\67\u012b\6\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\2\12\1\u0174"+
    "\16\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\4\12\1\u0175\14\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u0176"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\3\12\1\u0177"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\3\12\1\u0178\6\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\11\12\1\u0179\7\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\u017a\1\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\u017b\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\u017c\1\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\4\12\1\u017d\14\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u017e"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\10\12\1\u017f"+
    "\1\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\2\12\1\u0180"+
    "\16\12\5\0\6\12\10\0\2\12\4\0\10\12\1\u0181"+
    "\1\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u0182"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\5\12\1\u0183\13\12\5\0\6\12\10\0"+
    "\2\12\4\0\6\12\1\u0184\3\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\u0185\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\4\12\1\u0186"+
    "\14\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\5\12\1\u0187\13\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\4\12\1\u0188"+
    "\14\12\5\0\6\12\10\0\2\12\4\0\4\12\1\u0189"+
    "\5\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\u018a\1\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\u018b\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\2\12\1\u018c\7\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\20\12\1\u018d\5\0\6\12\10\0\2\12"+
    "\4\0\11\12\1\u018e\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\4\12\1\u018f\14\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\5\12\1\u0190\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\3\12\1\u0191\15\12\5\0\6\12\10\0\2\12\4\0"+
    "\4\12\1\u0192\5\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\4\12\1\u0193\14\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\21\12\5\0\1\12\1\u0194"+
    "\4\12\10\0\2\12\4\0\12\12\2\0\1\u0195\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\3\12\1\u0196\15\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\u0197\1\12\2\0\1\12\4\0"+
    "\6\12\1\u0198\12\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\20\12\1\u0199\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u019a\13\12\5\0\6\12\10\0\2\12\4\0\6\12"+
    "\1\u019b\3\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\10\12\1\u019c\1\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\3\12"+
    "\1\u019d\6\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\21\12"+
    "\5\0\1\u019e\5\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\5\12\1\u019f\13\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\u01a0\1\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\6\12\1\u01a1"+
    "\3\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\10\12\1\u01a2\1\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\45\4\0\2\45\1\u01a3"+
    "\7\45\2\0\1\45\4\0\21\45\5\0\6\45\10\0"+
    "\2\45\4\0\3\45\1\u01a4\6\45\2\0\1\45\4\0"+
    "\21\45\5\0\6\45\10\0\2\45\4\0\10\45\1\u01a5"+
    "\1\45\2\0\1\45\4\0\21\45\5\0\6\45\10\0"+
    "\2\45\4\0\2\45\1\u01a6\7\45\2\0\1\45\4\0"+
    "\21\45\5\0\6\45\10\0\2\45\4\0\12\45\2\0"+
    "\1\45\4\0\1\45\1\u01a7\17\45\5\0\6\45\10\0"+
    "\2\45\4\0\12\45\2\0\1\45\4\0\20\45\1\u01a8"+
    "\5\0\6\45\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\5\45\1\u01a9\13\45\5\0\6\45\10\0\2\45"+
    "\4\0\6\45\1\u01aa\3\45\2\0\1\45\4\0\21\45"+
    "\5\0\6\45\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\10\45\1\u01ab\10\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\7\45\1\u01ac\11\45"+
    "\5\0\6\45\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\17\45\1\u01ad\1\45\5\0\6\45\2\0\2\u016f"+
    "\1\u01ae\1\u01af\2\u01b0\21\u016f\1\u01b1\43\u016f\2\327\1\u01b2"+
    "\1\u01b3\2\211\21\327\1\u0128\43\327\1\0\1\u0171\1\u01b4"+
    "\1\0\2\u0171\21\0\1\213\43\0\2\u012a\1\u0172\1\u01b5"+
    "\2\213\65\u012a\2\u012b\1\213\1\u0173\67\u012b\6\0\2\12"+
    "\4\0\2\12\1\u01b6\7\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\3\12\1\u01b7\6\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\2\12\1\u01b8\16\12"+
    "\5\0\6\12\10\0\2\12\4\0\2\12\1\u01b9\7\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\6\12\1\u01ba\12\12"+
    "\5\0\6\12\10\0\2\12\4\0\10\12\1\u01bb\1\12"+
    "\2\0\1\12\4\0\5\12\1\u01bc\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\11\12"+
    "\1\u01bd\7\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\2\12\1\u01be\16\12\5\0\6\12"+
    "\10\0\2\12\4\0\4\12\1\u01bf\5\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\21\12\5\0\3\12\1\u01c0\2\12"+
    "\10\0\2\12\4\0\5\12\1\u01c1\4\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\3\12"+
    "\1\u01c2\6\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u01c3\13\12\5\0\6\12\10\0\2\12\4\0\5\12"+
    "\1\u01c4\4\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u01c5\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u01c6\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u01c7\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\2\12\1\u01c8\16\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\2\12"+
    "\1\u01c9\16\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\3\12\1\u01ca\15\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u01cb\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u01cc\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\13\12"+
    "\1\u01cd\5\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\12\12\1\u01ce\6\12\5\0\6\12"+
    "\10\0\2\12\4\0\10\12\1\u01cf\1\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\2\12"+
    "\1\u01d0\4\12\1\u01d1\2\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\10\12\1\u01d2\1\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\u01d3\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\2\12\1\u01d4\16\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\u01d5\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\5\12\1\u01d6\4\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\6\12\1\u01d7\12\12"+
    "\5\0\6\12\10\0\2\12\4\0\5\12\1\u01d8\4\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\5\12\1\u01d9\13\12"+
    "\5\0\6\12\10\0\2\12\4\0\3\12\1\u01da\6\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\4\45\1\u01db\14\45"+
    "\5\0\6\45\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\6\45\1\u01dc\12\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\2\45\1\u01dd\16\45"+
    "\5\0\6\45\10\0\2\45\4\0\3\45\1\u01de\6\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\13\45\1\u01df\5\45"+
    "\5\0\6\45\10\0\2\45\4\0\2\45\1\u01e0\7\45"+
    "\2\0\1\45\4\0\21\45\5\0\6\45\2\0\2\u016f"+
    "\1\u01ae\1\u016f\2\u01b0\21\u016f\1\u01b1\45\u016f\1\u0127\1\u01af"+
    "\2\u01b0\21\u016f\1\u01b1\43\u016f\1\330\1\u01b0\1\u01e1\1\u0129"+
    "\2\u01b0\21\330\1\u01e2\43\330\1\u016f\1\u01b1\1\u01e3\1\u01af"+
    "\2\u01e4\21\u016f\1\u01b1\43\u016f\2\u01e5\1\u01e6\1\u01e7\2\u0171"+
    "\65\u01e5\2\u01b3\1\u01e8\1\u01e9\2\u01ea\21\u01b3\1\u01eb\43\u01b3"+
    "\2\0\1\u01e5\1\u01ec\67\0\2\u01b5\1\u01ed\1\u01ee\2\u01ef"+
    "\65\u01b5\6\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u01f0\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\6\12\1\u01f1\12\12\5\0"+
    "\6\12\10\0\2\12\4\0\2\12\1\u01f2\7\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\5\12\1\u01f3\4\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u01f4\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\u01f5\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\2\12\1\u01f6\7\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\3\12\1\u01f7"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\6\12\1\u01f8"+
    "\12\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\u01f9\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\6\12\1\u01fa\3\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\7\12\1\u01fb\2\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\7\12\1\u01fc\2\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\1\12\1\u01fd\17\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\12\12\1\u01fe\6\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\u01ff\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\6\12\1\u0200"+
    "\3\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\7\12\1\u0201\2\12\2\0\1\12\4\0"+
    "\21\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\4\12\1\u0202\14\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\3\12\1\u0203"+
    "\15\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\11\12\1\u0204\7\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u0205"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\5\12\1\u0206"+
    "\4\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u0207"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\3\12\1\u0208"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u0209"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\3\12\1\u020a"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\20\12\1\u020b"+
    "\5\0\6\12\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\7\45\1\u020c\11\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\5\45\1\u020d\13\45"+
    "\5\0\6\45\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\1\45\1\u020e\17\45\5\0\6\45\10\0\2\45"+
    "\4\0\12\45\2\0\1\45\4\0\2\45\1\u020f\16\45"+
    "\5\0\6\45\2\0\2\330\1\u016f\1\u0210\70\330\1\u01e2"+
    "\1\u0211\1\u0129\2\u01e2\65\330\2\u016f\1\u0212\1\u01b3\2\u01b0"+
    "\21\u016f\1\u01b1\43\u016f\1\330\1\u01e4\1\u0213\1\u0129\2\u01e4"+
    "\21\330\1\u01e2\43\330\2\u01e5\1\u01e6\1\u01e5\2\u0171\67\u01e5"+
    "\1\u01e6\1\u0214\2\u0171\65\u01e5\2\u01e7\1\u0215\1\u0216\2\u01e4"+
    "\65\u01e7\2\u01b3\1\u01e8\1\u0217\2\u01ea\21\u01b3\1\u01eb\45\u01b3"+
    "\1\u0218\1\u01e9\2\u01ea\21\u01b3\1\u01eb\43\u01b3\1\u01ec\1\u01ea"+
    "\1\u0219\1\u021a\2\u01ea\21\u01ec\1\u021b\43\u01ec\1\u01b3\1\u01eb"+
    "\1\u021c\1\u01e9\2\u021d\21\u01b3\1\u01eb\43\u01b3\3\u01ec\1\u021a"+
    "\67\u01ec\2\u01b5\1\u01ed\1\u01b5\2\u01ef\67\u01b5\1\u0172\1\u01ee"+
    "\2\u01ef\65\u01b5\1\u012b\1\u01ef\1\u021e\1\u0173\2\u01ef\65\u012b"+
    "\6\0\2\12\4\0\12\12\2\0\1\12\4\0\5\12"+
    "\1\u021f\13\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\2\12\1\u0220\16\12\5\0\6\12"+
    "\10\0\2\12\4\0\3\12\1\u0221\6\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\10\12"+
    "\1\u0222\1\12\2\0\1\12\4\0\21\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\1\u0223"+
    "\20\12\5\0\6\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\4\0\2\12\1\u0224\16\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\u0225\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\5\12\1\u0226\13\12\5\0\6\12\10\0\2\12\4\0"+
    "\10\12\1\u0227\1\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\1\12\1\u0228\17\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\5\12\1\u0229\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\5\12\1\u022a\13\12\5\0\6\12\10\0\2\12\4\0"+
    "\6\12\1\u022b\3\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u022c\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\3\12\1\u022d\15\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\5\12\1\u022e\13\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\5\12\1\u022f\13\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u0230\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\11\12\1\u0231\7\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\3\12\1\u0232\15\12\5\0\6\12\10\0\2\12\4\0"+
    "\3\12\1\u0233\6\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\6\12\1\u0234\3\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\u0235\4\0\21\12\5\0\6\12\10\0"+
    "\2\45\4\0\12\45\2\0\1\45\4\0\10\45\1\u0236"+
    "\10\45\5\0\6\45\10\0\2\45\4\0\12\45\2\0"+
    "\1\u0237\4\0\21\45\5\0\6\45\10\0\2\45\4\0"+
    "\6\45\1\u0238\3\45\2\0\1\45\4\0\21\45\5\0"+
    "\6\45\10\0\2\45\4\0\10\45\1\u0239\1\45\2\0"+
    "\1\45\4\0\21\45\5\0\6\45\2\0\2\330\1\u01b0"+
    "\1\u0129\71\330\1\u023a\1\u023b\67\330\2\u01e7\1\u0215\1\u01e7"+
    "\2\u01e4\65\u01e7\2\330\1\u01e7\1\u023c\67\330\2\u0214\1\u023d"+
    "\1\u023e\2\u021d\65\u0214\2\u01e7\1\u0215\1\u0214\2\u01e4\67\u01e7"+
    "\1\u01e6\1\u0216\2\u01e4\65\u01e7\2\u01b3\1\u023f\1\u01e9\2\u01ea"+
    "\21\u01b3\1\u01eb\43\u01b3\1\327\1\u0128\1\u0170\1\u016f\2\u0171"+
    "\21\327\1\u0128\43\327\2\u01ec\1\u01b3\1\u0240\71\u01ec\1\u0171"+
    "\1\u021a\70\u01ec\1\u021b\1\u0241\1\u021a\2\u021b\65\u01ec\2\u01b3"+
    "\1\u0242\1\u0243\2\u01ea\21\u01b3\1\u01eb\43\u01b3\1\u01ec\1\u021d"+
    "\1\u0244\1\u021a\2\u021d\21\u01ec\1\u021b\43\u01ec\2\u012b\1\u01b5"+
    "\1\u0245\67\u012b\6\0\2\12\4\0\10\12\1\u0246\1\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\5\12\1\u0247\4\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\1\12\1\u0248\17\12\5\0\6\12\10\0\2\12"+
    "\4\0\10\12\1\u0249\1\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\4\12\1\u024a\5\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\u024b\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\3\12\1\u024c\6\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\u024d\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\4\0\5\12\1\u024e\13\12\5\0\6\12\10\0\2\12"+
    "\4\0\5\12\1\u024f\4\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\10\12\1\u0250\1\12"+
    "\2\0\1\12\4\0\21\12\5\0\6\12\10\0\2\12"+
    "\4\0\3\12\1\u0251\6\12\2\0\1\12\4\0\21\12"+
    "\5\0\6\12\10\0\2\12\4\0\12\12\2\0\1\u0252"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\3\12\1\u0253\15\12\5\0\6\12"+
    "\10\0\2\12\4\0\4\12\1\u0254\5\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\45\4\0\10\45"+
    "\1\u0255\1\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\5\45"+
    "\1\u0256\13\45\5\0\6\45\10\0\2\45\4\0\5\45"+
    "\1\u0257\4\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\2\0\2\u023a\1\u0258\1\u0259\2\u01e2\65\u023a\2\u01ec\1\u025a"+
    "\1\u021a\71\u01ec\1\u01ea\1\u021a\67\u01ec\2\u0214\1\u023d\1\u0214"+
    "\2\u021d\67\u0214\1\u01e6\1\u023e\2\u021d\65\u0214\1\u016f\1\u01b1"+
    "\1\u01e3\1\u016f\2\u01e4\21\u016f\1\u01b1\43\u016f\2\u01ec\1\u01e4"+
    "\1\u021a\71\u01ec\1\u025b\1\u025c\67\u01ec\2\u0214\1\u023d\1\u025d"+
    "\2\u021d\65\u0214\2\u01b3\1\u025e\1\u01e9\2\u01ea\21\u01b3\1\u01eb"+
    "\43\u01b3\2\u01ec\1\u0214\1\u025f\67\u01ec\2\u012b\1\u01ef\1\u0173"+
    "\67\u012b\6\0\2\12\4\0\5\12\1\u0260\4\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\3\12\1\u0261\6\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\5\12\1\u0262\4\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\2\12\1\u0263\7\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\3\12\1\u0264\15\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\2\12\1\u0265\16\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u0266\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\5\12\1\u0267\4\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u0268\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\2\12\1\u0269\16\12\5\0"+
    "\6\12\10\0\2\12\4\0\2\12\1\u026a\7\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\10\12\1\u026b\1\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\45\4\0\4\45\1\u026c\5\45\2\0"+
    "\1\45\4\0\21\45\5\0\6\45\10\0\2\45\4\0"+
    "\12\45\2\0\1\45\4\0\13\45\1\u026d\5\45\5\0"+
    "\6\45\10\0\2\45\4\0\3\45\1\u026e\6\45\2\0"+
    "\1\45\4\0\21\45\5\0\6\45\2\0\2\u023a\1\u0258"+
    "\1\u026f\2\u01e2\67\u023a\1\u0270\1\u0259\2\u01e2\65\u023a\1\u012b"+
    "\1\u025a\1\u0271\1\u0173\2\u025a\21\u012b\1\u01ef\43\u012b\2\u025b"+
    "\1\u0272\1\u0273\2\u021b\65\u025b\2\u01ec\1\u0274\1\u021a\67\u01ec"+
    "\2\u0214\1\u0215\1\u023e\2\u021d\65\u0214\1\u01b3\1\u01eb\1\u021c"+
    "\1\u0217\2\u021d\21\u01b3\1\u01eb\43\u01b3\2\u01ec\1\u021d\1\u021a"+
    "\67\u01ec\6\0\2\12\4\0\3\12\1\u0275\6\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\3\12\1\u0276\6\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\2\12\1\u0277\16\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\2\12\1\u0278\16\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\3\12\1\u0279\15\12\5\0\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\4\0\3\12\1\u027a\15\12\5\0"+
    "\6\12\10\0\2\12\4\0\3\12\1\u027b\6\12\2\0"+
    "\1\12\4\0\21\12\5\0\6\12\10\0\2\12\4\0"+
    "\2\12\1\u027c\7\12\2\0\1\12\4\0\21\12\5\0"+
    "\6\12\10\0\2\12\4\0\12\12\2\0\1\12\4\0"+
    "\20\12\1\u027d\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\20\12\1\u027e\5\0\6\12\10\0"+
    "\2\45\4\0\12\45\2\0\1\45\4\0\5\45\1\u027f"+
    "\13\45\5\0\6\45\2\0\2\u025b\1\u0280\1\u0273\2\u021b"+
    "\65\u025b\1\u012a\1\u0281\1\u0282\1\u01b5\2\u0171\65\u012a\2\u012b"+
    "\1\u0283\1\u0284\67\u012b\2\u025b\1\u0272\1\u026f\2\u021b\67\u025b"+
    "\1\u0270\1\u0273\2\u021b\65\u025b\1\u012b\1\u0274\1\u0285\1\u0173"+
    "\2\u0274\21\u012b\1\u01ef\43\u012b\6\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\5\12\1\u0286\13\12\5\0\6\12"+
    "\10\0\2\12\4\0\2\12\1\u0287\7\12\2\0\1\12"+
    "\4\0\21\12\5\0\6\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\20\12\1\u0288\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\5\12\1\u0289"+
    "\13\12\5\0\6\12\10\0\2\12\4\0\10\12\1\u028a"+
    "\1\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\45\4\0\3\45\1\u028b\6\45\2\0\1\45\4\0"+
    "\21\45\5\0\6\45\2\0\1\u01b5\1\u028c\1\u028d\1\u01b5"+
    "\2\u0274\65\u01b5\1\u012a\1\u0281\1\u0282\1\u012a\2\u0171\67\u012a"+
    "\1\u028e\1\u025b\2\213\65\u012a\2\u0283\1\u028f\1\u0290\2\u025a"+
    "\21\u0283\1\u0291\43\u0283\2\u01ec\1\u01e2\1\u021a\67\u01ec\2\u012b"+
    "\1\u0292\1\u0293\67\u012b\6\0\2\12\4\0\3\12\1\u0294"+
    "\6\12\2\0\1\12\4\0\21\12\5\0\6\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\4\0\2\12\1\u0295"+
    "\16\12\5\0\6\12\10\0\2\45\4\0\12\45\2\0"+
    "\1\45\4\0\2\45\1\u0296\16\45\5\0\6\45\2\0"+
    "\1\u01b5\1\u028c\1\u028d\1\u01ee\2\u0274\67\u01b5\1\u0297\1\u025b"+
    "\2\u01ef\65\u01b5\2\u01e5\1\u01e6\1\u0292\2\u0171\65\u01e5\2\u0283"+
    "\1\u028f\1\u0217\2\u025a\21\u0283\1\u0291\45\u0283\1\u0218\1\u0290"+
    "\2\u025a\21\u0283\1\u0291\44\u0283\1\u0291\1\u0298\1\u0290\2\u0274"+
    "\21\u0283\1\u0291\43\u0283\2\u0292\1\u0299\1\u029a\2\u0274\65\u0292"+
    "\2\u01ec\1\u021b\1\u021a\67\u01ec\6\0\2\12\4\0\12\12"+
    "\2\0\1\12\4\0\6\12\1\u029b\12\12\5\0\6\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\4\0\3\12"+
    "\1\u029c\15\12\5\0\6\12\10\0\2\45\4\0\10\45"+
    "\1\u029d\1\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\2\0\2\u0292\1\u0299\1\u0292\2\u0274\65\u0292\2\u0283\1\u029e"+
    "\1\u0243\2\u025a\21\u0283\1\u0291\43\u0283\2\u0292\1\u0299\1\u0214"+
    "\2\u0274\67\u0292\1\u01e6\1\u029a\2\u0274\65\u0292\6\0\2\12"+
    "\4\0\12\12\2\0\1\12\4\0\5\12\1\u029f\13\12"+
    "\5\0\6\12\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\4\0\13\45\1\u02a0\5\45\5\0\6\45\2\0\2\u0292"+
    "\1\u0299\1\u025d\2\u0274\65\u0292\6\0\2\45\4\0\10\45"+
    "\1\u02a1\1\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\10\0\2\45\4\0\12\45\2\0\1\45\4\0\5\45"+
    "\1\u02a2\13\45\5\0\6\45\10\0\2\45\4\0\6\45"+
    "\1\u02a3\3\45\2\0\1\45\4\0\21\45\5\0\6\45"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\0\1\1\1\11\25\1\2\11\1\1"+
    "\1\11\1\1\2\11\7\1\1\0\1\1\1\11\5\1"+
    "\6\11\2\1\1\0\2\1\1\11\4\1\1\0\57\1"+
    "\1\0\1\1\1\11\16\1\1\11\2\0\1\1\2\0"+
    "\2\1\1\11\2\0\104\1\3\0\2\1\1\11\112\1"+
    "\1\0\1\1\1\0\1\1\1\0\103\1\2\0\2\1"+
    "\1\0\72\1\3\0\2\1\2\0\54\1\1\0\1\1"+
    "\1\0\4\1\3\0\1\1\1\0\43\1\2\0\1\1"+
    "\1\0\3\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\34\1\2\0\3\1\2\0\1\1\3\0\24\1"+
    "\1\0\1\1\1\0\2\1\1\0\21\1\1\0\21\1"+
    "\3\0\11\1\2\0\2\1\1\0\4\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[675];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public YangFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 95: 
          { yybegin(BLACK_BOX_STRING); return OrderedBy;
          }
        case 113: break;
        case 26: 
          { yybegin(BLACK_BOX_STRING); return Rpc;
          }
        case 114: break;
        case 54: 
          { yybegin(BLACK_BOX_STRING); return Output;
          }
        case 115: break;
        case 40: 
          { return Int8;
          }
        case 116: break;
        case 27: 
          { yybegin(BLACK_BOX_STRING); return Bit;
          }
        case 117: break;
        case 99: 
          { yybegin(BLACK_BOX_STRING); return YinElement;
          }
        case 118: break;
        case 43: 
          { yybegin(BLACK_BOX_STRING); return Input;
          }
        case 119: break;
        case 102: 
          { yybegin(BLACK_BOX_STRING); return Notification;
          }
        case 120: break;
        case 76: 
          { yybegin(BLACK_BOX_STRING); return Pattern;
          }
        case 121: break;
        case 109: 
          { yybegin(BLACK_BOX_STRING); return ErrorMessage;
          }
        case 122: break;
        case 93: 
          { yybegin(BLACK_BOX_STRING); return Container;
          }
        case 123: break;
        case 47: 
          { return Int16;
          }
        case 124: break;
        case 36: 
          { yybegin(BLACK_BOX_STRING); return Case;
          }
        case 125: break;
        case 89: 
          { yybegin(BLACK_BOX_STRING); return Mandatory;
          }
        case 126: break;
        case 64: 
          { return Binary;
          }
        case 127: break;
        case 107: 
          { yybegin(BLACK_BOX_STRING); return RevisionDate;
          }
        case 128: break;
        case 21: 
          { yybegin(ID_EXPECTED); return Colon;
          }
        case 129: break;
        case 80: 
          { yybegin(BLACK_BOX_STRING); return Argument;
          }
        case 130: break;
        case 15: 
          { return RightParenthesis;
          }
        case 131: break;
        case 33: 
          { yybegin(BLACK_BOX_STRING); return List;
          }
        case 132: break;
        case 28: 
          { yybegin(EXPRESSION); return Key;
          }
        case 133: break;
        case 92: 
          { yybegin(BLACK_BOX_STRING); return Extension;
          }
        case 134: break;
        case 11: 
          { return RULE_NUMBER;
          }
        case 135: break;
        case 37: 
          { yybegin(EXPRESSION); return Path;
          }
        case 136: break;
        case 87: 
          { yybegin(EXPRESSION); return Deviation;
          }
        case 137: break;
        case 25: 
          { yybegin(EXPRESSION); return RULE_HIDDEN;
          }
        case 138: break;
        case 90: 
          { yybegin(BLACK_BOX_STRING); return Submodule;
          }
        case 139: break;
        case 91: 
          { yybegin(BLACK_BOX_STRING); return LeafList;
          }
        case 140: break;
        case 85: 
          { yybegin(BLACK_BOX_STRING); return Grouping;
          }
        case 141: break;
        case 52: 
          { yybegin(BLACK_BOX_STRING); return Anyxml;
          }
        case 142: break;
        case 67: 
          { return Uint16;
          }
        case 143: break;
        case 46: 
          { return Int64;
          }
        case 144: break;
        case 112: 
          { return InstanceIdentifier;
          }
        case 145: break;
        case 56: 
          { yybegin(BLACK_BOX_STRING); return Module;
          }
        case 146: break;
        case 31: 
          { yybegin(BLACK_BOX_STRING); return Base;
          }
        case 147: break;
        case 108: 
          { yybegin(BLACK_BOX_STRING); return ErrorAppTag;
          }
        case 148: break;
        case 96: 
          { yybegin(EXPRESSION); return IfFeature;
          }
        case 149: break;
        case 8: 
          { return RULE_ID;
          }
        case 150: break;
        case 65: 
          { return String;
          }
        case 151: break;
        case 51: 
          { return Uint8;
          }
        case 152: break;
        case 105: 
          { yybegin(BLACK_BOX_STRING); return MinElements;
          }
        case 153: break;
        case 23: 
          { return RULE_SL_COMMENT;
          }
        case 154: break;
        case 30: 
          { yybegin(EXPRESSION); return Must;
          }
        case 155: break;
        case 97: 
          { yybegin(BLACK_BOX_STRING); return BelongsTo;
          }
        case 156: break;
        case 69: 
          { yybegin(BLACK_BOX_STRING); return Anydata;
          }
        case 157: break;
        case 103: 
          { yybegin(BLACK_BOX_STRING); return Organization;
          }
        case 158: break;
        case 2: 
          { yybegin(COLON_EXPECTED);  return RULE_ID;
          }
        case 159: break;
        case 101: 
          { return Enumeration;
          }
        case 160: break;
        case 38: 
          { yybegin(EXPRESSION); return Uses;
          }
        case 161: break;
        case 66: 
          { return Uint64;
          }
        case 162: break;
        case 71: 
          { yybegin(BLACK_BOX_STRING); return Deviate;
          }
        case 163: break;
        case 74: 
          { yybegin(BLACK_BOX_STRING); return Typedef;
          }
        case 164: break;
        case 82: 
          { yybegin(BLACK_BOX_STRING); return Identity;
          }
        case 165: break;
        case 1: 
          { return RULE_WS;
          }
        case 166: break;
        case 104: 
          { yybegin(BLACK_BOX_STRING); return MaxElements;
          }
        case 167: break;
        case 6: 
          { return Solidus;
          }
        case 168: break;
        case 81: 
          { yybegin(BLACK_BOX_STRING); return Revision;
          }
        case 169: break;
        case 83: 
          { yybegin(BLACK_BOX_STRING); return Position;
          }
        case 170: break;
        case 12: 
          { return FullStop;
          }
        case 171: break;
        case 55: 
          { yybegin(EXPRESSION); return Refine;
          }
        case 172: break;
        case 77: 
          { yybegin(BLACK_BOX_STRING); return Feature;
          }
        case 173: break;
        case 20: 
          { yybegin(YYINITIAL); return RULE_HIDDEN;
          }
        case 174: break;
        case 10: 
          { yybegin(IN_EXPRESSION_STRING); return RULE_HIDDEN;
          }
        case 175: break;
        case 60: 
          { yybegin(BLACK_BOX_STRING); return Config;
          }
        case 176: break;
        case 39: 
          { yybegin(EXPRESSION); return When;
          }
        case 177: break;
        case 62: 
          { yybegin(BLACK_BOX_STRING); return Prefix;
          }
        case 178: break;
        case 57: 
          { yybegin(BLACK_BOX_STRING); return Import;
          }
        case 179: break;
        case 49: 
          { return Empty;
          }
        case 180: break;
        case 70: 
          { yybegin(EXPRESSION); return Augment;
          }
        case 181: break;
        case 73: 
          { yybegin(BLACK_BOX_STRING); return Include;
          }
        case 182: break;
        case 14: 
          { return LeftParenthesis;
          }
        case 183: break;
        case 22: 
          { yybegin(BLACK_BOX_STRING); return RULE_ID;
          }
        case 184: break;
        case 41: 
          { return Bits;
          }
        case 185: break;
        case 7: 
          { return RULE_OPERATOR;
          }
        case 186: break;
        case 50: 
          { return Union;
          }
        case 187: break;
        case 53: 
          { yybegin(BLACK_BOX_STRING); return Action;
          }
        case 188: break;
        case 32: 
          { yybegin(EXPRESSION); return Type;
          }
        case 189: break;
        case 48: 
          { return Int32;
          }
        case 190: break;
        case 106: 
          { yybegin(BLACK_BOX_STRING); return YangVersion;
          }
        case 191: break;
        case 35: 
          { yybegin(BLACK_BOX_STRING); return Enum;
          }
        case 192: break;
        case 13: 
          { return Colon;
          }
        case 193: break;
        case 42: 
          { yybegin(BLACK_BOX_STRING); return Range;
          }
        case 194: break;
        case 4: 
          { yybegin(YYINITIAL); return Semicolon;
          }
        case 195: break;
        case 111: 
          { yybegin(BLACK_BOX_STRING); return RequireInstance;
          }
        case 196: break;
        case 72: 
          { yybegin(BLACK_BOX_STRING); return Default;
          }
        case 197: break;
        case 78: 
          { return Boolean;
          }
        case 198: break;
        case 110: 
          { yybegin(BLACK_BOX_STRING); return FractionDigits;
          }
        case 199: break;
        case 79: 
          { return Leafref;
          }
        case 200: break;
        case 3: 
          { yybegin(YYINITIAL); return RightCurlyBracket;
          }
        case 201: break;
        case 84: 
          { yybegin(BLACK_BOX_STRING); return Presence;
          }
        case 202: break;
        case 68: 
          { return Uint32;
          }
        case 203: break;
        case 9: 
          { yybegin(IN_SQ_EXPRESSION_STRING); return RULE_HIDDEN;
          }
        case 204: break;
        case 63: 
          { yybegin(EXPRESSION); return Unique;
          }
        case 205: break;
        case 98: 
          { yybegin(BLACK_BOX_STRING); return Description;
          }
        case 206: break;
        case 16: 
          { return LeftSquareBracket;
          }
        case 207: break;
        case 75: 
          { yybegin(BLACK_BOX_STRING); return Contact;
          }
        case 208: break;
        case 61: 
          { yybegin(BLACK_BOX_STRING); return Choice;
          }
        case 209: break;
        case 59: 
          { yybegin(BLACK_BOX_STRING); return Length;
          }
        case 210: break;
        case 44: 
          { yybegin(BLACK_BOX_STRING); return Value;
          }
        case 211: break;
        case 86: 
          { yybegin(BLACK_BOX_STRING); return Namespace;
          }
        case 212: break;
        case 100: 
          { return Identityref;
          }
        case 213: break;
        case 17: 
          { return RightSquareBracket;
          }
        case 214: break;
        case 19: 
          { return RULE_STRING;
          }
        case 215: break;
        case 94: 
          { return Decimal64;
          }
        case 216: break;
        case 88: 
          { yybegin(BLACK_BOX_STRING); return Reference;
          }
        case 217: break;
        case 34: 
          { yybegin(BLACK_BOX_STRING); return Leaf;
          }
        case 218: break;
        case 18: 
          { return Comma;
          }
        case 219: break;
        case 24: 
          { return FullStopFullStop;
          }
        case 220: break;
        case 5: 
          { yybegin(YYINITIAL); return LeftCurlyBracket;
          }
        case 221: break;
        case 58: 
          { yybegin(BLACK_BOX_STRING); return Status;
          }
        case 222: break;
        case 45: 
          { yybegin(BLACK_BOX_STRING); return Units;
          }
        case 223: break;
        case 29: 
          { return RULE_ML_COMMENT;
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
