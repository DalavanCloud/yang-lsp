/* The following code was generated by JFlex 1.4.3 on 6/2/17 11:46 AM */

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/2/17 11:46 AM from the specification file
 * <tt>./src/main/java/io/typefox/yang/parser/antlr/lexer/jflex/YangFlexer.flex</tt>
 */
public class YangFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_EXPRESSION_STRING = 4;
  public static final int AWAITING_EXPRESSION = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\2\0\1\5\22\0\1\1\1\0\1\11\4\0"+
    "\1\10\2\0\1\3\2\0\1\35\1\7\1\2\12\7\1\0\1\46"+
    "\5\0\32\6\1\0\1\13\2\0\1\7\1\0\1\14\1\33\1\15"+
    "\1\23\1\32\1\37\1\30\1\36\1\17\1\6\1\42\1\26\1\25"+
    "\1\21\1\20\1\40\1\44\1\27\1\34\1\16\1\31\1\41\1\45"+
    "\1\24\1\22\1\43\1\47\1\0\1\12\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\2\1\1\4\25\3"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\3\1"+
    "\1\13\2\1\1\13\1\0\57\3\1\14\1\0\1\14"+
    "\1\0\1\1\1\13\43\3\1\15\7\3\1\16\11\3"+
    "\1\17\1\3\1\0\5\3\1\20\3\3\1\21\23\3"+
    "\1\22\1\23\1\24\11\3\1\25\1\26\2\3\1\27"+
    "\6\3\1\30\4\3\1\31\1\32\12\3\1\33\23\3"+
    "\1\34\5\3\1\35\14\3\1\36\1\37\1\3\1\40"+
    "\4\3\1\41\1\42\3\3\1\43\3\3\1\44\12\3"+
    "\1\45\1\3\1\46\1\47\4\3\1\50\3\3\1\51"+
    "\6\3\1\52\1\53\1\3\1\54\1\55\1\3\1\56"+
    "\1\57\11\3\1\60\1\3\1\61\16\3\1\62\1\63"+
    "\2\3\1\64\1\3\1\65\16\3\1\66\1\3\1\67"+
    "\6\3\1\70\1\71\1\72\3\3\1\73\4\3\1\74"+
    "\1\75\2\3\1\76\1\77\2\3\1\100\3\3\1\101"+
    "\1\3\1\102\1\103\13\3\1\104\4\3\1\105\1\106"+
    "\7\3\1\107\1\110\1\111\1\112\1\113\5\3\1\114"+
    "\1\3\1\115\1\116\4\3\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u0168"+
    "\0\u0168\0\u04d8\0\u0500\0\u0168\0\u0528\0\u0168\0\u0550\0\u0578"+
    "\0\u05a0\0\u05c8\0\u0168\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690"+
    "\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0"+
    "\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50"+
    "\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90"+
    "\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0"+
    "\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0168"+
    "\0\u0e10\0\u0e38\0\u0168\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00"+
    "\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040"+
    "\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180"+
    "\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0"+
    "\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\360\0\u13d8"+
    "\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\360\0\u14f0"+
    "\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\360\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748"+
    "\0\360\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860"+
    "\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0"+
    "\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0"+
    "\0\360\0\360\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0"+
    "\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\360\0\360\0\u1c98\0\u1cc0"+
    "\0\360\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\360"+
    "\0\u1dd8\0\u1e00\0\u1e28\0\u1e50\0\360\0\u0168\0\u1e78\0\u1ea0"+
    "\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0"+
    "\0\360\0\u2008\0\u2030\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8"+
    "\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238"+
    "\0\u2260\0\u2288\0\u22b0\0\u22d8\0\360\0\u2300\0\u2328\0\u2350"+
    "\0\u2378\0\u23a0\0\360\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468"+
    "\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580\0\360"+
    "\0\360\0\u25a8\0\360\0\u25d0\0\u25f8\0\u2620\0\u2648\0\360"+
    "\0\360\0\u2670\0\u2698\0\u26c0\0\360\0\u26e8\0\u2710\0\u2738"+
    "\0\360\0\u2760\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\u2850"+
    "\0\u2878\0\u28a0\0\u28c8\0\360\0\u28f0\0\360\0\360\0\u2918"+
    "\0\u2940\0\u2968\0\u2990\0\360\0\u29b8\0\u29e0\0\u2a08\0\360"+
    "\0\u2a30\0\u2a58\0\u2a80\0\u2aa8\0\u2ad0\0\u2af8\0\360\0\360"+
    "\0\u2b20\0\360\0\360\0\u2b48\0\360\0\360\0\u2b70\0\u2b98"+
    "\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u2c88\0\u2cb0\0\360"+
    "\0\u2cd8\0\360\0\u2d00\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8"+
    "\0\u2df0\0\u2e18\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08"+
    "\0\360\0\360\0\u2f30\0\u2f58\0\360\0\u2f80\0\360\0\u2fa8"+
    "\0\u2fd0\0\u2ff8\0\u3020\0\u3048\0\u3070\0\u3098\0\u30c0\0\u30e8"+
    "\0\u3110\0\u3138\0\u3160\0\u3188\0\u31b0\0\u31d8\0\u3200\0\360"+
    "\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0\0\360\0\360"+
    "\0\360\0\u3318\0\u3340\0\u3368\0\360\0\u3390\0\u33b8\0\u33e0"+
    "\0\u3408\0\360\0\360\0\u3430\0\u3458\0\360\0\360\0\u3480"+
    "\0\u34a8\0\360\0\u34d0\0\u34f8\0\u3520\0\360\0\u3548\0\360"+
    "\0\360\0\u3570\0\u3598\0\u35c0\0\u35e8\0\u3610\0\u3638\0\u3660"+
    "\0\u3688\0\u36b0\0\u36d8\0\u3700\0\360\0\u3728\0\u3750\0\u3778"+
    "\0\u37a0\0\360\0\360\0\u37c8\0\u37f0\0\u3818\0\u3840\0\u3868"+
    "\0\u3890\0\u38b8\0\360\0\360\0\360\0\360\0\360\0\u38e0"+
    "\0\u3908\0\u3930\0\u3958\0\u3980\0\360\0\u39a8\0\360\0\360"+
    "\0\u39d0\0\u39f8\0\u3a20\0\u3a48\0\360\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\2\5\1\7\1\4\1\10"+
    "\1\11\1\12\1\4\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\7\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\4\1\7\1\33\1\34"+
    "\1\35\1\36\2\7\1\37\1\40\1\41\1\0\1\5"+
    "\1\42\1\0\2\5\1\43\2\0\1\44\1\12\1\0"+
    "\21\43\1\0\10\43\1\40\1\41\1\0\1\5\2\0"+
    "\2\5\1\45\2\0\1\46\1\12\1\0\21\45\1\0"+
    "\10\45\1\40\1\41\1\4\1\0\2\4\2\0\2\4"+
    "\3\0\33\4\3\0\1\5\2\0\2\5\42\0\1\4"+
    "\1\0\1\47\1\50\2\0\2\4\3\0\33\4\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\32\7"+
    "\2\0\6\51\1\52\1\51\1\53\3\51\21\52\1\51"+
    "\10\52\2\51\6\54\1\55\2\54\1\53\1\54\1\56"+
    "\21\55\1\54\10\55\2\54\50\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\7\1\57\3\7\1\60"+
    "\5\7\1\61\1\7\1\62\14\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\1\63\3\7\1\64"+
    "\15\7\1\65\7\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\6\7\1\66\23\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\67"+
    "\1\7\1\70\1\7\1\71\11\7\1\72\6\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\13\7"+
    "\1\73\1\7\1\74\14\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\75\3\7\1\76\25\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\1\77\2\7\1\100\26\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\101\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\1\102"+
    "\2\7\1\103\1\104\10\7\1\105\14\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\3\7\1\106"+
    "\12\7\1\107\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\110\15\7\1\111\5\7\1\112"+
    "\5\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\13\7\1\113\16\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\5\7\1\114\12\7\1\115"+
    "\11\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\5\7\1\116\2\7\1\117\2\7\1\120\16\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\1\121\2\7\1\122\12\7\1\123\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\2\7\1\124"+
    "\12\7\1\125\14\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\13\7\1\126\2\7\1\127\13\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\1\130\3\7\1\131\6\7\1\132\16\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\133\31\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\134\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\22\7\1\135\7\7\4\0\1\136"+
    "\1\137\52\0\2\43\4\0\32\43\10\0\2\45\4\0"+
    "\32\45\2\0\1\47\1\136\2\47\1\140\1\141\2\47"+
    "\3\136\33\47\2\136\1\50\1\137\1\50\1\142\2\137"+
    "\2\50\3\137\33\50\2\137\10\51\1\53\45\51\2\52"+
    "\1\143\3\51\32\52\2\51\11\54\1\53\1\54\1\56"+
    "\42\54\2\55\1\54\1\143\1\54\1\56\32\55\6\54"+
    "\1\0\43\54\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\2\7\1\144\27\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\6\7\1\145\23\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\14\7"+
    "\1\146\15\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\14\7\1\147\15\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\20\7\1\150\11\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\5\7\1\151\24\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\4\7\1\152\25\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\24\7\1\153"+
    "\5\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\7\1\154\22\7\1\155\5\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\16\7\1\156"+
    "\13\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\24\7\1\157\5\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\21\7\1\160\10\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\7\7"+
    "\1\161\4\7\1\162\15\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\2\7\1\163\27\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\11\7"+
    "\1\164\20\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\2\7\1\165\27\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\5\7\1\166\24\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\5\7\1\167\24\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\20\7\1\170\2\7\1\171\1\7"+
    "\1\172\4\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\5\7\1\173\2\7\1\174\21\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\5\7"+
    "\1\175\24\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\7\7\1\176\22\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\20\7\1\177\11\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\20\7\1\200\11\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\201\4\7\1\202\24\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\5\7"+
    "\1\203\24\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\23\7\1\204\1\7\1\205\2\7\1\206"+
    "\1\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\7\1\207\30\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\4\7\1\210\25\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\3\7"+
    "\1\211\26\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\16\7\1\212\13\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\15\7\1\213\14\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\2\7\1\214\27\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\13\7\1\215\16\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\20\7\1\216"+
    "\11\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\2\7\1\217\27\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\12\7\1\220\17\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\1\221"+
    "\31\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\17\7\1\222\12\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\223\31\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\224\31\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\2\7\1\225\27\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\20\7\1\226\11\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\16\7\1\227"+
    "\13\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\12\7\1\230\17\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\6\7\1\231\23\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\232\13\7\2\0\4\136\1\140\1\141\42\136\3\137"+
    "\1\233\44\137\4\0\1\140\43\0\1\50\1\137\1\4"+
    "\1\142\2\137\2\50\3\137\33\50\2\137\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\3\7\1\234\26\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\7\7\1\235\1\236\21\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\15\7\1\237\14\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\11\7"+
    "\1\240\20\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\16\7\1\241\13\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\2\7\1\242\20\7"+
    "\1\243\6\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\3\7\1\244\26\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\16\7\1\245\13\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\12\7\1\246\17\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\15\7\1\247\14\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\250"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\4\7\1\251\25\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\23\7\1\252\6\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\253\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\1\254\31\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\24\7\1\255\5\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\256\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\3\7\1\257\26\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\14\7\1\260\15\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\21\7\1\261\10\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\7\1\262\30\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\263\31\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\3\7\1\264\26\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\7\7\1\265\22\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\21\7\1\266"+
    "\10\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\21\7\1\267\10\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\15\7\1\270\14\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\2\7"+
    "\1\271\27\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\2\7\1\272\27\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\23\7\1\273\6\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\14\7\1\274\15\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\14\7\1\275\15\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\3\7\1\276"+
    "\12\7\1\277\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\3\7\1\300\26\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\15\7\1\301"+
    "\14\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\15\7\1\302\14\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\2\7\1\303\25\7\1\304"+
    "\1\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\20\7\1\305\11\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\11\7\1\306\20\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\307\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\4\7\1\310\25\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\16\7\1\311\13\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\4\7\1\312\25\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\313\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\11\7\1\314"+
    "\20\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\7\1\315\30\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\2\7\1\316\27\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\2\7"+
    "\1\317\17\7\1\320\7\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\3\7\1\321\26\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\20\7"+
    "\1\322\2\7\1\323\6\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\15\7\1\324\14\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\5\7"+
    "\1\325\24\7\2\0\2\137\1\326\1\233\44\137\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\4\7\1\327"+
    "\25\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\330\31\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\11\7\1\331\20\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\11\7\1\332"+
    "\20\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\16\7\1\333\13\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\334\31\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\3\7\1\335"+
    "\26\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\7\1\336\30\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\7\7\1\337\22\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\15\7"+
    "\1\340\14\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\2\7\1\341\27\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\2\7\1\342\27\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\13\7\1\343\16\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\16\7\1\344\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\13\7\1\345"+
    "\16\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\5\7\1\346\24\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\15\7\1\347\14\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\20\7"+
    "\1\350\11\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\23\7\1\351\6\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\21\7\1\352\10\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\353\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\13\7\1\354\16\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\15\7\1\355"+
    "\14\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\356\31\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\357\31\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\16\7\1\360\13\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\361\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\12\7\1\362\17\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\21\7\1\363"+
    "\10\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\2\7\1\364\27\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\365\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\5\7"+
    "\1\366\24\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\13\7\1\367\16\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\20\7\1\370\11\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\3\7\1\371\26\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\24\7\1\372\5\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\20\7\1\373"+
    "\11\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\15\7\1\374\14\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\5\7\1\375\24\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\13\7"+
    "\1\376\16\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\5\7\1\377\24\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\15\7\1\u0100\14\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\4\7\1\u0101\25\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u0102\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\15\7\1\u0103"+
    "\14\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\16\7\1\u0104\13\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\2\7\1\u0105\27\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\u0106\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\3\7\1\u0107\26\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\16\7\1\u0108\13\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\5\7\1\u0109\24\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u010a\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\12\7\1\u010b"+
    "\17\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\16\7\1\u010c\13\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\5\7\1\u010d\24\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\1\7"+
    "\1\u010e\1\7\1\u010f\26\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\14\7\1\u0110\15\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\u0111\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\16\7\1\u0112\13\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\7\7\1\u0113\22\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\3\7\1\u0114\26\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u0115\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\u0116\31\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u0117\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\3\7\1\u0118\26\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\2\7\1\u0119"+
    "\27\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\24\7\1\u011a\5\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\3\7\1\u011b\26\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\25\7"+
    "\1\u011c\4\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\12\7\1\u011d\17\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\3\7\1\u011e\26\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\12\7\1\u011f\17\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u0120\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\2\7\1\u0121"+
    "\27\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\12\7\1\u0122\17\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\12\7\1\u0123\17\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\u0124\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\12\7\1\u0125\17\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\22\7\1\u0126\7\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u0127\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\16\7\1\u0128\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\3\7\1\u0129"+
    "\26\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\13\7\1\u012a\16\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\3\7\1\u012b\26\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\u012c\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\20\7\1\u012d\11\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\21\7\1\u012e\10\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\14\7\1\u012f\15\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\20\7\1\u0130\11\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\7\7\1\u0131"+
    "\22\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\3\7\1\u0132\26\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\13\7\1\u0133\16\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\13\7"+
    "\1\u0134\16\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\3\7\1\u0135\26\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\5\7\1\u0136\24\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\10\7\1\u0137\21\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\u0138\31\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\5\7\1\u0139\24\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\2\7\1\u013a\27\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u013b\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\u013c"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\23\7\1\u013d\6\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\u013e\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\2\7"+
    "\1\u013f\27\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\2\7\1\u0140\27\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\7\7\1\u0141\22\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\27\7\1\u0142\2\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\u0143\31\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\1\7\1\u0144\30\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u0145\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\16\7\1\u0146\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\24\7\1\u0147"+
    "\5\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\2\7\1\u0148\27\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\3\7\1\u0149\12\7\1\u014a"+
    "\13\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\4\7\1\u014b\25\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\u014c\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\16\7"+
    "\1\u014d\13\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\3\7\1\u014e\26\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\5\7\1\u014f\24\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\4\7\1\u0150\25\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\16\7\1\u0151\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\u0152"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\3\7\1\u0153\26\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\u0154\10\7\1\u0155\20\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\20\7\1\u0156\11\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\15\7\1\u0157\14\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\4\7\1\u0158"+
    "\25\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\16\7\1\u0159\13\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\5\7\1\u015a\24\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\4\7"+
    "\1\u015b\25\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\1\7\1\u015c\30\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\2\7\1\u015d\27\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u015e\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\6\7\1\u015f\23\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\15\7\1\u0160"+
    "\14\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\21\7\1\u0161\10\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\u0162\31\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\7\1\u0163"+
    "\30\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\1\u0164\31\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\13\7\1\u0165\16\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\11\7\1\u0166"+
    "\20\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\2\7\1\u0167\27\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\4\7\1\u0168\25\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\13\7"+
    "\1\u0169\16\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\11\7\1\u016a\20\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\11\7\1\u016b\20\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\20\7\1\u016c\11\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\7\1\u016d\30\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\u016e"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\21\7\1\u016f\10\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\14\7\1\u0170\15\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\4\7"+
    "\1\u0171\25\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\24\7\1\u0172\5\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\16\7\1\u0173\13\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\21\7\1\u0174\10\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\12\7\1\u0175\17\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\u0176"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\5\7\1\u0177\24\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\u0178\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\13\7"+
    "\1\u0179\16\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\13\7\1\u017a\16\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\17\7\1\u017b\12\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\2\7\1\u017c\27\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\16\7\1\u017d\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\2\7\1\u017e"+
    "\27\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\20\7\1\u017f\11\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\u0180\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\3\7"+
    "\1\u0181\26\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\5\7\1\u0182\24\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\6\7\1\u0183\23\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u0184\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\16\7\1\u0185\13\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\2\7\1\u0186"+
    "\27\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\16\7\1\u0187\13\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\21\7\1\u0188\10\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\3\7"+
    "\1\u0189\26\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\5\7\1\u018a\24\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\24\7\1\u018b\5\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\20\7\1\u018c\11\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u018d\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\16\7\1\u018e"+
    "\13\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\21\7\1\u018f\10\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\16\7\1\u0190\13\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\6\7"+
    "\1\u0191\23\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\3\7\1\u0192\26\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\3\7\1\u0193\26\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\3\7\1\u0194\26\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\5\7\1\u0195\24\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\4\7\1\u0196"+
    "\25\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\5\7\1\u0197\24\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\5\7\1\u0198\24\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\7\7"+
    "\1\u0199\22\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\5\7\1\u019a\24\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\21\7\1\u019b\10\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\20\7\1\u019c\11\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\4\7\1\u019d\25\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\7\7\1\u019e"+
    "\22\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\4\7\1\u019f\25\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\4\7\1\u01a0\25\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\4\7"+
    "\1\u01a1\25\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\2\7\1\u01a2\27\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\5\7\1\u01a3\24\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\2\7\1\u01a4\27\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u01a5\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\u01a6\31\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\20\7\1\u01a7\11\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\2\7\1\u01a8\27\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\1\u01a9\31\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\3\7\1\u01aa\26\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\5\7\1\u01ab\24\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\u01ac"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\5\7\1\u01ad\24\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\20\7\1\u01ae\11\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\20\7"+
    "\1\u01af\11\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\2\7\1\u01b0\27\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\2\7\1\u01b1\27\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\1\u01b2\31\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\14\7\1\u01b3\15\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\14\7\1\u01b4\15\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u01b5\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\1\u01b6\31\7\2\0\1\4\1\0"+
    "\2\4\2\0\2\7\3\0\1\4\14\7\1\u01b7\15\7"+
    "\2\0\1\4\1\0\2\4\2\0\2\7\3\0\1\4"+
    "\16\7\1\u01b8\13\7\2\0\1\4\1\0\2\4\2\0"+
    "\2\7\3\0\1\4\3\7\1\u01b9\26\7\2\0\1\4"+
    "\1\0\2\4\2\0\2\7\3\0\1\4\5\7\1\u01ba"+
    "\24\7\2\0\1\4\1\0\2\4\2\0\2\7\3\0"+
    "\1\4\2\7\1\u01bb\27\7\2\0\1\4\1\0\2\4"+
    "\2\0\2\7\3\0\1\4\1\7\1\u01bc\30\7\2\0"+
    "\1\4\1\0\2\4\2\0\2\7\3\0\1\4\20\7"+
    "\1\u01bd\11\7\2\0\1\4\1\0\2\4\2\0\2\7"+
    "\3\0\1\4\16\7\1\u01be\13\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\6\1\1\11\25\1\2\11\1\0\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\2\1\1\0\60\1\1\0"+
    "\1\11\1\0\1\1\1\11\67\1\1\0\72\1\1\11"+
    "\350\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public YangFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 49: 
          { return Deviate;
          }
        case 81: break;
        case 37: 
          { return Module;
          }
        case 82: break;
        case 17: 
          { return Type;
          }
        case 83: break;
        case 5: 
          { return Semicolon;
          }
        case 84: break;
        case 10: 
          { yybegin(YYINITIAL); return QuotationMark;
          }
        case 85: break;
        case 63: 
          { return Reference;
          }
        case 86: break;
        case 43: 
          { return Anydata;
          }
        case 87: break;
        case 52: 
          { return Argument;
          }
        case 88: break;
        case 46: 
          { return Typedef;
          }
        case 89: break;
        case 22: 
          { return Enum;
          }
        case 90: break;
        case 67: 
          { return OrderedBy;
          }
        case 91: break;
        case 59: 
          { return Namespace;
          }
        case 92: break;
        case 62: 
          { return LeafList;
          }
        case 93: break;
        case 8: 
          { yybegin(IN_EXPRESSION_STRING); return QuotationMark;
          }
        case 94: break;
        case 55: 
          { return Grouping;
          }
        case 95: break;
        case 47: 
          { return Include;
          }
        case 96: break;
        case 50: 
          { return Feature;
          }
        case 97: break;
        case 77: 
          { return ErrorAppTag;
          }
        case 98: break;
        case 33: 
          { return Config;
          }
        case 99: break;
        case 61: 
          { return Mandatory;
          }
        case 100: break;
        case 42: 
          { return Prefix;
          }
        case 101: break;
        case 35: 
          { return Import;
          }
        case 102: break;
        case 9: 
          { return RULE_ID;
          }
        case 103: break;
        case 48: 
          { return Default;
          }
        case 104: break;
        case 20: 
          { return Leaf;
          }
        case 105: break;
        case 12: 
          { return RULE_SL_COMMENT;
          }
        case 106: break;
        case 64: 
          { return Extension;
          }
        case 107: break;
        case 53: 
          { return Identity;
          }
        case 108: break;
        case 58: 
          { return Container;
          }
        case 109: break;
        case 65: 
          { return Submodule;
          }
        case 110: break;
        case 31: 
          { return Action;
          }
        case 111: break;
        case 13: 
          { return Rpc;
          }
        case 112: break;
        case 75: 
          { return MinElements;
          }
        case 113: break;
        case 54: 
          { return Revision;
          }
        case 114: break;
        case 72: 
          { return Notification;
          }
        case 115: break;
        case 3: 
          { yybegin(YYINITIAL); return RULE_YANG_ID;
          }
        case 116: break;
        case 56: 
          { return Position;
          }
        case 117: break;
        case 14: 
          { return Bit;
          }
        case 118: break;
        case 2: 
          { return RULE_WS;
          }
        case 119: break;
        case 28: 
          { return Range;
          }
        case 120: break;
        case 74: 
          { return MaxElements;
          }
        case 121: break;
        case 69: 
          { return YinElement;
          }
        case 122: break;
        case 44: 
          { return Augment;
          }
        case 123: break;
        case 40: 
          { yybegin(AWAITING_EXPRESSION); return Unique;
          }
        case 124: break;
        case 24: 
          { yybegin(AWAITING_EXPRESSION); return Path;
          }
        case 125: break;
        case 16: 
          { return Case;
          }
        case 126: break;
        case 6: 
          { return LeftCurlyBracket;
          }
        case 127: break;
        case 45: 
          { return Contact;
          }
        case 128: break;
        case 60: 
          { yybegin(AWAITING_EXPRESSION); return Deviation;
          }
        case 129: break;
        case 78: 
          { return ErrorMessage;
          }
        case 130: break;
        case 34: 
          { return Choice;
          }
        case 131: break;
        case 38: 
          { return Length;
          }
        case 132: break;
        case 19: 
          { return List;
          }
        case 133: break;
        case 76: 
          { return RevisionDate;
          }
        case 134: break;
        case 30: 
          { return Value;
          }
        case 135: break;
        case 11: 
          { return RULE_YANG_ID;
          }
        case 136: break;
        case 51: 
          { return Pattern;
          }
        case 137: break;
        case 79: 
          { return FractionDigits;
          }
        case 138: break;
        case 41: 
          { return Status;
          }
        case 139: break;
        case 68: 
          { return BelongsTo;
          }
        case 140: break;
        case 66: 
          { yybegin(AWAITING_EXPRESSION); return IfFeature;
          }
        case 141: break;
        case 29: 
          { return Units;
          }
        case 142: break;
        case 18: 
          { yybegin(AWAITING_EXPRESSION); return Must;
          }
        case 143: break;
        case 36: 
          { return Output;
          }
        case 144: break;
        case 23: 
          { return Base;
          }
        case 145: break;
        case 73: 
          { return YangVersion;
          }
        case 146: break;
        case 7: 
          { yybegin(YYINITIAL); return RULE_ID;
          }
        case 147: break;
        case 57: 
          { return Presence;
          }
        case 148: break;
        case 21: 
          { return Uses;
          }
        case 149: break;
        case 27: 
          { return Input;
          }
        case 150: break;
        case 39: 
          { return Refine;
          }
        case 151: break;
        case 15: 
          { yybegin(AWAITING_EXPRESSION); return Key;
          }
        case 152: break;
        case 80: 
          { return RequireInstance;
          }
        case 153: break;
        case 71: 
          { return Organization;
          }
        case 154: break;
        case 70: 
          { return Description;
          }
        case 155: break;
        case 4: 
          { return RightCurlyBracket;
          }
        case 156: break;
        case 1: 
          { return RULE_STRING;
          }
        case 157: break;
        case 25: 
          { return When;
          }
        case 158: break;
        case 32: 
          { return Anyxml;
          }
        case 159: break;
        case 26: 
          { return RULE_ML_COMMENT;
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
