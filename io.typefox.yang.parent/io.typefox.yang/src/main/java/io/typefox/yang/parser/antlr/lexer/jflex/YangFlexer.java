/* The following code was generated by JFlex 1.4.3 on 6/28/17 1:22 PM */

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/28/17 10:39 AM from the specification file
 * <tt>./src/main/java/io/typefox/yang/parser/antlr/lexer/jflex/YangFlexer.flex</tt>
 */
public class YangFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_EXPRESSION_STRING = 4;
  public static final int EXPRESSION = 2;
  public static final int IN_SQ_EXPRESSION_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int ID_EXPECTED = 10;
  public static final int BLACK_BOX_STRING = 12;
  public static final int COLON_EXPECTED = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\2\0\1\5\22\0\1\1\1\32\1\12\4\0"+
    "\1\11\1\35\1\36\1\3\1\27\1\41\1\30\1\15\1\2\12\14"+
    "\1\34\1\63\1\33\1\31\1\33\2\0\32\6\1\37\1\13\1\40"+
    "\1\0\1\7\1\0\1\16\1\52\1\42\1\20\1\51\1\55\1\47"+
    "\1\54\1\24\1\6\1\57\1\46\1\23\1\17\1\21\1\56\1\61"+
    "\1\22\1\53\1\43\1\50\1\25\1\62\1\45\1\44\1\60\1\64"+
    "\1\26\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\0\1\2\1\3\25\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\4\10"+
    "\1\0\1\7\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\6\1\23\1\24\1\0\1\23\1\25\1\26\2\23"+
    "\1\27\1\0\57\2\1\0\1\13\1\30\2\10\1\7"+
    "\1\23\2\0\1\31\2\0\2\23\1\27\2\0\20\2"+
    "\1\32\33\2\1\33\10\2\1\34\1\2\3\0\2\23"+
    "\1\35\26\2\1\36\6\2\1\37\3\2\1\40\2\2"+
    "\1\41\1\42\4\2\1\43\1\44\2\2\1\45\6\2"+
    "\1\46\3\2\1\47\1\0\1\31\1\0\1\31\1\0"+
    "\15\2\1\50\11\2\1\51\3\2\1\52\11\2\1\53"+
    "\14\2\2\0\2\31\1\0\1\2\1\54\1\2\1\55"+
    "\10\2\1\56\1\2\1\57\4\2\1\60\3\2\1\61"+
    "\3\2\1\62\1\63\4\2\1\64\1\2\1\65\3\2"+
    "\1\66\6\2\1\67\3\0\2\31\2\0\1\31\1\70"+
    "\1\2\1\71\3\2\1\72\1\2\1\73\10\2\1\74"+
    "\3\2\1\75\1\76\12\2\1\77\1\100\2\2\1\0"+
    "\1\31\1\0\4\31\3\0\1\31\1\0\3\31\1\101"+
    "\6\2\1\102\5\2\1\103\5\2\1\104\6\2\1\105"+
    "\1\106\2\0\1\31\1\0\3\31\1\0\1\31\2\0"+
    "\1\31\1\0\1\31\1\0\1\107\1\2\1\110\4\2"+
    "\1\111\1\2\1\112\3\2\1\113\2\2\1\114\2\2"+
    "\1\115\1\2\1\116\1\2\1\31\2\0\3\31\2\0"+
    "\1\31\3\0\2\2\1\117\5\2\1\120\4\2\1\121"+
    "\1\2\2\31\1\0\1\31\1\0\2\31\1\0\1\2"+
    "\1\122\6\2\1\123\3\2\2\31\1\0\3\31\1\124"+
    "\1\125\2\2\1\126\1\127\1\130\3\2\3\31\3\0"+
    "\1\131\1\2\1\132\1\133\1\2\3\31\2\0\2\31"+
    "\1\0\2\2\1\31\1\0\2\31\1\2\1\134\1\31"+
    "\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u0212\0\u0212\0\u01a8\0\u0212\0\u06a0\0\u0212\0\u0212\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0813\0\u0212"+
    "\0\u0212\0\u0212\0\u0212\0\u0212\0\u0212\0\u0212\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u0212\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u13e0\0\u0212\0\u1415\0\u144a\0\u06a0\0\u0212\0\u087d\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u0212\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u01dd\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05"+
    "\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u01dd\0\u1f0e\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u01dd\0\u20b6\0\u20eb"+
    "\0\u2120\0\u2155\0\u218a\0\u21bf\0\u0212\0\u21f4\0\u2229\0\u225e"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u264d\0\u01dd\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\u2756\0\u278b\0\u01dd\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894"+
    "\0\u28c9\0\u01dd\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u01dd"+
    "\0\u01dd\0\u2a07\0\u2a3c\0\u01dd\0\u2a71\0\u2aa6\0\u2adb\0\u2b10"+
    "\0\u2b45\0\u2b7a\0\u01dd\0\u2baf\0\u2be4\0\u2c19\0\u01dd\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e"+
    "\0\u2fd3\0\u01dd\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\u01dd\0\u31e5\0\u321a\0\u324f\0\u01dd"+
    "\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7"+
    "\0\u342c\0\u01dd\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a"+
    "\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712"+
    "\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u01dd\0\u381b\0\u01dd\0\u3850"+
    "\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u01dd"+
    "\0\u39f8\0\u01dd\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u01dd\0\u3b01"+
    "\0\u3b36\0\u3b6b\0\u01dd\0\u3ba0\0\u3bd5\0\u3c0a\0\u01dd\0\u01dd"+
    "\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u01dd\0\u3d13\0\u01dd\0\u3d48"+
    "\0\u3d7d\0\u3db2\0\u01dd\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb"+
    "\0\u3ef0\0\u01dd\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e"+
    "\0\u4063\0\u4098\0\u01dd\0\u40cd\0\u01dd\0\u4102\0\u4137\0\u416c"+
    "\0\u01dd\0\u41a1\0\u01dd\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa"+
    "\0\u42df\0\u4314\0\u4349\0\u01dd\0\u437e\0\u43b3\0\u43e8\0\u01dd"+
    "\0\u01dd\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b"+
    "\0\u4590\0\u45c5\0\u45fa\0\u01dd\0\u01dd\0\u462f\0\u4664\0\u4699"+
    "\0\u46ce\0\u4703\0\u4738\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841"+
    "\0\u4876\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\u01dd\0\u49b4"+
    "\0\u49e9\0\u4a1e\0\u4a53\0\u4a88\0\u4abd\0\u4af2\0\u4b27\0\u4b5c"+
    "\0\u4b91\0\u4bc6\0\u4bfb\0\u01dd\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf"+
    "\0\u4d04\0\u01dd\0\u4d39\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42"+
    "\0\u01dd\0\u01dd\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u4f80"+
    "\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\u5089\0\u50be\0\u50f3\0\u5128"+
    "\0\u515d\0\u01dd\0\u5192\0\u01dd\0\u51c7\0\u51fc\0\u5231\0\u5266"+
    "\0\u01dd\0\u529b\0\u01dd\0\u52d0\0\u5305\0\u533a\0\u01dd\0\u536f"+
    "\0\u53a4\0\u01dd\0\u53d9\0\u540e\0\u01dd\0\u5443\0\u01dd\0\u5478"+
    "\0\u54ad\0\u54e2\0\u5517\0\u554c\0\u5581\0\u55b6\0\u55eb\0\u5620"+
    "\0\u5655\0\u568a\0\u56bf\0\u56f4\0\u5729\0\u575e\0\u01dd\0\u5793"+
    "\0\u57c8\0\u57fd\0\u5832\0\u5867\0\u01dd\0\u589c\0\u58d1\0\u5906"+
    "\0\u593b\0\u01dd\0\u5970\0\u59a5\0\u59da\0\u5a0f\0\u5a44\0\u5a79"+
    "\0\u5aae\0\u5ae3\0\u5b18\0\u5b4d\0\u01dd\0\u5b82\0\u5bb7\0\u5bec"+
    "\0\u5c21\0\u5c56\0\u5c8b\0\u01dd\0\u5cc0\0\u5cf5\0\u5d2a\0\u5d5f"+
    "\0\u5d94\0\u5dc9\0\u5dfe\0\u5e33\0\u5e68\0\u01dd\0\u01dd\0\u5e9d"+
    "\0\u5ed2\0\u01dd\0\u01dd\0\u01dd\0\u5f07\0\u5f3c\0\u5f71\0\u5fa6"+
    "\0\u5fdb\0\u6010\0\u6045\0\u607a\0\u60af\0\u01dd\0\u60e4\0\u01dd"+
    "\0\u01dd\0\u6119\0\u614e\0\u6183\0\u61b8\0\u61ed\0\u6222\0\u6257"+
    "\0\u628c\0\u62c1\0\u62f6\0\u632b\0\u6360\0\u6395\0\u63ca\0\u63ff"+
    "\0\u6434\0\u01dd\0\u6469\0\u01dd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\10\1\11\1\0\2\10\1\12\1\0\1\13"+
    "\5\0\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\14\0\1\24\1\25\1\26\1\12\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\12\1\35\1\36\1\37"+
    "\2\12\1\40\1\41\1\42\1\0\1\10\1\43\1\44"+
    "\2\10\1\45\1\0\1\13\1\46\1\47\1\0\1\50"+
    "\1\51\1\52\1\45\1\53\1\54\1\45\1\55\2\45"+
    "\4\44\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\21\45\1\41\1\42\1\0\1\10\1\66\1\44"+
    "\2\10\1\45\1\0\1\13\1\67\1\70\1\71\1\50"+
    "\1\51\1\52\1\45\1\53\1\54\1\45\1\55\2\45"+
    "\4\44\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\21\45\1\41\1\42\1\0\1\10\1\66\1\44"+
    "\2\10\1\45\1\0\1\13\1\70\1\72\1\0\1\50"+
    "\1\51\1\52\1\45\1\53\1\54\1\45\1\55\2\45"+
    "\4\44\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\21\45\1\41\1\42\1\0\1\10\2\0\2\10"+
    "\2\0\1\13\23\0\1\73\26\0\1\41\1\42\1\0"+
    "\1\10\2\0\2\10\1\74\1\0\1\13\5\0\10\74"+
    "\14\0\21\74\1\41\1\42\1\75\1\10\1\76\1\75"+
    "\2\10\2\75\1\13\1\67\1\72\50\75\1\41\1\42"+
    "\1\0\1\10\2\0\2\10\61\0\1\77\1\100\67\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\21\12\75\0"+
    "\2\12\4\0\3\12\1\101\2\12\1\102\3\12\2\0"+
    "\1\12\11\0\1\103\5\12\1\104\12\12\10\0\2\12"+
    "\4\0\2\12\1\105\2\12\1\106\4\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\7\12\1\107\11\12\10\0\2\12\4\0\6\12"+
    "\1\110\3\12\2\0\1\12\11\0\6\12\1\111\12\12"+
    "\10\0\2\12\4\0\2\12\1\112\7\12\2\0\1\12"+
    "\11\0\7\12\1\113\4\12\1\114\4\12\10\0\2\12"+
    "\4\0\2\12\1\115\2\12\1\116\2\12\1\117\1\12"+
    "\2\0\1\12\11\0\6\12\1\120\12\12\10\0\2\12"+
    "\4\0\3\12\1\121\1\122\2\12\1\123\2\12\2\0"+
    "\1\12\11\0\13\12\1\124\5\12\10\0\2\12\4\0"+
    "\2\12\1\125\7\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\2\12\1\126\2\12\1\127\4\12\2\0"+
    "\1\12\11\0\12\12\1\130\6\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\2\12\1\131\16\12\10\0"+
    "\2\12\4\0\2\12\1\132\5\12\1\133\1\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\10\12\1\134"+
    "\1\12\2\0\1\12\11\0\7\12\1\135\11\12\10\0"+
    "\2\12\4\0\6\12\1\136\3\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\3\12\1\137\6\12\2\0"+
    "\1\12\11\0\11\12\1\140\7\12\10\0\2\12\4\0"+
    "\3\12\1\141\2\12\1\142\3\12\2\0\1\12\11\0"+
    "\3\12\1\143\15\12\10\0\2\12\4\0\2\12\1\144"+
    "\5\12\1\145\1\12\2\0\1\12\11\0\7\12\1\146"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\147\4\12\1\150\12\12\10\0\2\12\4\0"+
    "\6\12\1\151\3\12\2\0\1\12\11\0\7\12\1\152"+
    "\11\12\10\0\2\12\4\0\2\12\1\153\2\12\1\154"+
    "\1\155\3\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\156\11\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\12\12"+
    "\1\157\6\12\10\0\2\45\4\0\12\45\2\0\1\45"+
    "\11\0\21\45\16\0\1\50\1\160\63\0\1\161\1\162"+
    "\55\0\2\45\4\0\3\45\1\163\6\45\2\0\1\45"+
    "\11\0\21\45\10\0\2\45\4\0\10\45\1\164\1\45"+
    "\2\0\1\45\11\0\21\45\10\0\2\45\4\0\6\45"+
    "\1\165\3\45\2\0\1\45\11\0\21\45\10\0\2\45"+
    "\4\0\5\45\1\163\4\45\2\0\1\45\11\0\21\45"+
    "\33\0\1\44\33\0\11\67\1\166\53\67\1\0\1\167"+
    "\1\170\1\0\2\167\21\0\1\171\47\0\1\172\52\0"+
    "\12\72\1\166\1\173\51\72\6\0\2\74\4\0\12\74"+
    "\2\0\1\74\11\0\21\74\2\0\1\75\1\0\2\75"+
    "\2\0\2\75\3\0\50\75\2\0\1\75\1\0\1\174"+
    "\1\175\2\0\2\75\3\0\50\75\2\0\4\77\1\176"+
    "\1\177\57\77\3\100\1\200\61\100\6\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\2\12\1\201\16\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\5\12\1\202"+
    "\13\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\203\17\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\5\12\1\204\13\12\10\0\2\12\4\0"+
    "\7\12\1\205\2\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\1\12\1\206"+
    "\17\12\10\0\2\12\4\0\11\12\1\207\2\0\1\12"+
    "\11\0\11\12\1\210\1\12\1\211\5\12\10\0\2\12"+
    "\4\0\4\12\1\212\5\12\2\0\1\12\11\0\5\12"+
    "\1\213\13\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\12\1\214\17\12\10\0\2\12\4\0\3\12"+
    "\1\215\6\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\11\12\1\216\2\0\1\12\11\0\13\12\1\217"+
    "\3\12\1\220\1\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\221\20\12\10\0\2\12\4\0\3\12"+
    "\1\222\6\12\2\0\1\12\11\0\3\12\1\223\15\12"+
    "\10\0\2\12\4\0\4\12\1\224\5\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\3\12\1\225\6\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\11\12\1\226\7\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\1\227\13\12\1\230"+
    "\4\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\231\11\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\14\12\1\232\4\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\233\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\4\12\1\234\14\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\11\12\1\235"+
    "\7\12\10\0\2\12\4\0\3\12\1\236\6\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\5\12\1\237"+
    "\4\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\14\12\1\240\4\12\10\0"+
    "\2\12\4\0\3\12\1\241\6\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\3\12\1\242\6\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\11\12\1\243\7\12\10\0\2\12\4\0"+
    "\2\12\1\244\1\245\6\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\5\12\1\246\4\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\10\12\1\247\1\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\7\12\1\250\11\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\6\12\1\251\12\12"+
    "\10\0\2\12\4\0\6\12\1\252\3\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\12\1\253\17\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\11\12\1\254\7\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\1\12\1\255\17\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\4\12"+
    "\1\256\14\12\10\0\2\12\4\0\2\12\1\257\7\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\10\12\1\260\10\12\10\0\2\12"+
    "\4\0\2\12\1\261\7\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\2\12\1\262\7\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\12\1\263\17\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\11\12\1\264\7\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\265\11\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\2\12"+
    "\1\266\16\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\7\12\1\267\11\12\16\0\1\161\56\0\2\45"+
    "\4\0\4\45\1\165\5\45\2\0\1\45\11\0\21\45"+
    "\10\0\2\45\4\0\11\45\1\165\2\0\1\45\11\0"+
    "\21\45\4\0\1\270\1\271\62\0\1\171\1\272\1\0"+
    "\2\171\57\0\12\172\1\0\1\273\51\172\4\72\1\0"+
    "\60\72\1\174\1\77\2\174\1\176\1\177\2\174\3\77"+
    "\50\174\2\77\1\175\1\100\1\175\1\274\2\100\2\175"+
    "\3\100\50\175\2\100\4\0\1\176\60\0\2\100\1\275"+
    "\1\200\61\100\6\0\2\12\4\0\4\12\1\276\5\12"+
    "\2\0\1\12\11\0\3\12\1\277\15\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\6\12\1\300\12\12"+
    "\10\0\2\12\4\0\10\12\1\301\1\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\7\12\1\302\2\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\7\12\1\303\11\12\10\0\2\12"+
    "\4\0\10\12\1\304\1\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\10\12\1\305\1\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\306\20\12\10\0\2\12\4\0\2\12\1\307"+
    "\7\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\310\11\12\10\0"+
    "\2\12\4\0\2\12\1\311\7\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\14\12\1\312\4\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\5\12\1\313\13\12\10\0\2\12\4\0"+
    "\10\12\1\314\1\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\10\12\1\315\1\12\2\0\1\12\11\0"+
    "\7\12\1\316\11\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\6\12\1\317\12\12\10\0\2\12\4\0"+
    "\4\12\1\320\5\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\321\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\6\12\1\322"+
    "\12\12\10\0\2\12\4\0\12\12\2\0\1\323\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\324\17\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\4\12\1\325\14\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\6\12\1\326\12\12\10\0"+
    "\2\12\4\0\3\12\1\327\6\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\5\12\1\330\4\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\13\12\1\331\5\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\6\12\1\332\12\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\333"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\334\11\12\1\335\5\12\10\0\2\12\4\0"+
    "\10\12\1\336\1\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\337"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\5\12\1\340\13\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\341\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\342\17\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\13\12\1\343\5\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\5\12\1\344"+
    "\13\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\6\12\1\345\12\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\346\15\12\1\347\1\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\11\12\1\350"+
    "\7\12\10\0\2\12\4\0\7\12\1\351\2\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\5\12\1\352"+
    "\4\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\353\11\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\354"+
    "\11\12\10\0\2\12\4\0\5\12\1\355\4\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\356\17\12\10\0\2\12\4\0"+
    "\7\12\1\357\2\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\1\360\20\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\1\12"+
    "\1\361\17\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\12\1\362\10\12\1\363\6\12\10\0\2\12"+
    "\4\0\10\12\1\364\1\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\11\12"+
    "\1\365\1\12\1\366\5\12\10\0\2\12\4\0\3\12"+
    "\1\367\6\12\2\0\1\12\11\0\21\12\2\0\2\270"+
    "\1\370\1\270\2\167\21\270\1\371\35\270\3\271\1\372"+
    "\61\271\2\0\1\373\1\374\73\0\1\166\52\0\1\175"+
    "\1\100\1\75\1\274\2\100\2\175\3\100\50\175\2\100"+
    "\6\0\2\12\4\0\2\12\1\375\7\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\7\12\1\376\2\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\7\12"+
    "\1\377\2\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\5\12\1\u0100\4\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\7\12"+
    "\1\u0101\11\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\11\12\1\u0102\7\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\13\12\1\u0103\5\12\10\0\2\12"+
    "\4\0\2\12\1\u0104\7\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\6\12\1\u0105\3\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\6\12\1\u0106\12\12\10\0\2\12\4\0\6\12"+
    "\1\u0107\3\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\3\12\1\u0108\6\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\6\12"+
    "\1\u0109\12\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\7\12\1\u010a\11\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\11\12\1\u010b\7\12\10\0\2\12"+
    "\4\0\3\12\1\u010c\6\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\6\12\1\u010d\3\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\10\12\1\u010e\1\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\2\12"+
    "\1\u010f\7\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u0110\11\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\4\12"+
    "\1\u0111\14\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\7\12\1\u0112\11\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\6\12\1\u0113\12\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\1\12\1\u0114\17\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\1\12"+
    "\1\u0115\17\12\10\0\2\12\4\0\6\12\1\u0116\3\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\7\12\1\u0117\11\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u0118\11\12"+
    "\10\0\2\12\4\0\2\12\1\u0119\7\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\10\12\1\u011a\1\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\1\u011b\20\12\10\0\2\12\4\0"+
    "\4\12\1\u011c\5\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\u011d\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\u011e"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\u011f\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\u0120\17\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\14\12\1\u0121\4\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\11\12\1\u0122\7\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\6\12\1\u0123"+
    "\12\12\10\0\2\12\4\0\6\12\1\u0124\3\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\3\12\1\u0125"+
    "\6\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\3\12\1\u0126\6\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\6\12\1\u0127"+
    "\12\12\10\0\2\12\4\0\5\12\1\u0128\4\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u0129\17\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\6\12\1\u012a\12\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\u012b"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\u012c\17\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\7\12\1\u012d\11\12\10\0\2\12\4\0"+
    "\10\12\1\u012e\1\12\2\0\1\12\11\0\21\12\2\0"+
    "\2\270\1\370\1\u012f\2\167\21\270\1\371\36\270\1\371"+
    "\1\u0130\1\270\2\u0131\21\270\1\371\35\270\2\271\1\167"+
    "\1\372\61\271\2\373\1\u0132\1\373\2\171\57\373\3\374"+
    "\1\u0133\61\374\6\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\12\1\u0134\17\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\4\12\1\u0135\14\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u0136\11\12"+
    "\10\0\2\12\4\0\3\12\1\u0137\6\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\3\12\1\u0138\6\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\14\12\1\u0139\4\12\10\0\2\12"+
    "\4\0\10\12\1\u013a\1\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\1\12"+
    "\1\u013b\17\12\10\0\2\12\4\0\10\12\1\u013c\1\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\4\12\1\u013d\14\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u013e\11\12"+
    "\10\0\2\12\4\0\10\12\1\u013f\1\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\1\12\1\u0140\17\12\10\0\2\12\4\0\10\12"+
    "\1\u0141\1\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u0142\11\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\7\12"+
    "\1\u0143\11\12\10\0\2\12\4\0\6\12\1\u0144\3\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\1\12\1\u0145\17\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\4\12\1\u0146\14\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\7\12"+
    "\1\u0147\11\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\4\12\1\u0148\14\12\10\0\2\12\4\0\4\12"+
    "\1\u0149\5\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\10\12\1\u014a\1\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\1\12"+
    "\1\u014b\17\12\10\0\2\12\4\0\2\12\1\u014c\7\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\10\12"+
    "\1\u014d\1\12\2\0\1\12\11\0\1\u014e\20\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\5\12\1\u014f"+
    "\13\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\u0150\11\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\7\12\1\u0151\11\12\10\0\2\12\4\0"+
    "\11\12\1\u0152\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\4\12\1\u0153\14\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\4\12"+
    "\1\u0154\14\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\12\12\1\u0155\6\12\10\0\2\12\4\0\10\12"+
    "\1\u0156\1\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u0157\11\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\u0158\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\11\12"+
    "\1\u0159\7\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\5\12\1\u015a\13\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\11\12\1\u015b\7\12\10\0\2\12"+
    "\4\0\4\12\1\u015c\5\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\10\12\1\u015d\1\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\6\12\1\u015e\3\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\6\12"+
    "\1\u015f\3\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\10\12\1\u0160\1\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\3\12\1\u0161\6\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\3\12\1\u0162\15\12\2\0\2\u012f\1\u0163\1\u0164"+
    "\2\u0165\21\u012f\1\u0166\35\u012f\2\270\1\u0167\1\u0168\2\167"+
    "\21\270\1\371\35\270\1\0\1\u0131\1\u0169\1\0\2\u0131"+
    "\21\0\1\171\35\0\2\373\1\u0132\1\u016a\2\171\57\373"+
    "\2\374\1\171\1\u0133\61\374\6\0\2\12\4\0\2\12"+
    "\1\u016b\7\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\3\12\1\u016c\6\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\1\12"+
    "\1\u016d\17\12\10\0\2\12\4\0\2\12\1\u016e\7\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\1\u016f\20\12\10\0\2\12\4\0"+
    "\10\12\1\u0170\1\12\2\0\1\12\11\0\7\12\1\u0171"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\14\12\1\u0172\4\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u0173\17\12\10\0\2\12\4\0"+
    "\4\12\1\u0174\5\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\16\12\1\u0175"+
    "\2\12\10\0\2\12\4\0\5\12\1\u0176\4\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\3\12\1\u0177"+
    "\6\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\u0178\11\12\10\0"+
    "\2\12\4\0\5\12\1\u0179\4\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\u017a\11\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\7\12\1\u017b\11\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\u017c\11\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\1\12\1\u017d"+
    "\17\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\u017e\17\12\10\0\2\12\4\0\3\12\1\u017f"+
    "\6\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\1\12\1\u0180\17\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\13\12\1\u0181"+
    "\5\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\u0182\11\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\7\12\1\u0183\11\12\10\0\2\12\4\0"+
    "\10\12\1\u0184\1\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\3\12\1\u0185\6\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\2\12\1\u0186\4\12\1\u0187"+
    "\2\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\10\12\1\u0188\1\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\11\12\1\u0189"+
    "\7\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\6\12\1\u018a\12\12\10\0\2\12\4\0\5\12\1\u018b"+
    "\4\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\u018c\11\12\10\0"+
    "\2\12\4\0\3\12\1\u018d\6\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\5\12\1\u018e\4\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\u018f\20\12\2\0\2\u012f\1\u0163\1\u012f"+
    "\2\u0165\21\u012f\1\u0166\37\u012f\1\370\1\u0164\2\u0165\21\u012f"+
    "\1\u0166\35\u012f\1\271\1\u0165\1\u0190\1\372\2\u0165\21\271"+
    "\1\u0191\35\271\1\u012f\1\u0166\1\u0192\1\u0164\2\u0193\21\u012f"+
    "\1\u0166\35\u012f\2\u0194\1\u0195\1\u0196\2\u0131\57\u0194\2\u0168"+
    "\1\u0197\1\u0198\2\u0199\21\u0168\1\u019a\35\u0168\2\0\1\u0194"+
    "\1\u019b\61\0\2\u016a\1\u019c\1\u019d\2\u019e\57\u016a\6\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\1\12\1\u019f"+
    "\17\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\u01a0\20\12\10\0\2\12\4\0\2\12\1\u01a1\7\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\5\12"+
    "\1\u01a2\4\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\1\12\1\u01a3\17\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\u01a4\11\0\21\12"+
    "\10\0\2\12\4\0\2\12\1\u01a5\7\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\3\12\1\u01a6\6\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\1\u01a7\20\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\u01a8\11\0\21\12\10\0\2\12\4\0"+
    "\6\12\1\u01a9\3\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\7\12\1\u01aa\2\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\7\12\1\u01ab\2\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\2\12\1\u01ac\16\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\6\12\1\u01ad\12\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\u01ae"+
    "\11\12\10\0\2\12\4\0\6\12\1\u01af\3\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\7\12\1\u01b0"+
    "\2\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\11\12\1\u01b1\7\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\5\12\1\u01b2"+
    "\13\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\14\12\1\u01b3\4\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\7\12\1\u01b4\11\12\10\0\2\12\4\0"+
    "\5\12\1\u01b5\4\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\u01b6\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\4\12\1\u01b7"+
    "\14\12\10\0\2\12\4\0\3\12\1\u01b8\6\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\3\12\1\u01b9"+
    "\6\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\u01ba\11\12\2\0"+
    "\2\271\1\u012f\1\u01bb\62\271\1\u0191\1\u01bc\1\372\2\u0191"+
    "\57\271\2\u012f\1\u01bd\1\u0168\2\u0165\21\u012f\1\u0166\35\u012f"+
    "\1\271\1\u0193\1\u01be\1\372\2\u0193\21\271\1\u0191\35\271"+
    "\2\u0194\1\u0195\1\u0194\2\u0131\61\u0194\1\u0195\1\u01bf\2\u0131"+
    "\57\u0194\2\u0196\1\u01c0\1\u01c1\2\u0193\57\u0196\2\u0168\1\u0197"+
    "\1\u01c2\2\u0199\21\u0168\1\u019a\37\u0168\1\u01c3\1\u0198\2\u0199"+
    "\21\u0168\1\u019a\35\u0168\1\u019b\1\u0199\1\u01c4\1\u01c5\2\u0199"+
    "\21\u019b\1\u01c6\35\u019b\1\u0168\1\u019a\1\u01c7\1\u0198\2\u01c8"+
    "\21\u0168\1\u019a\35\u0168\3\u019b\1\u01c5\61\u019b\2\u016a\1\u019c"+
    "\1\u016a\2\u019e\61\u016a\1\u0132\1\u019d\2\u019e\57\u016a\1\374"+
    "\1\u019e\1\u01c9\1\u0133\2\u019e\57\374\6\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\u01ca\11\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\1\12\1\u01cb"+
    "\17\12\10\0\2\12\4\0\3\12\1\u01cc\6\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\10\12\1\u01cd"+
    "\1\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\10\12\1\u01ce\10\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\1\12\1\u01cf"+
    "\17\12\10\0\2\12\4\0\12\12\2\0\1\u01d0\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\u01d1\11\12\10\0\2\12\4\0\10\12\1\u01d2"+
    "\1\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\2\12\1\u01d3\16\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\7\12\1\u01d4"+
    "\11\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\u01d5\11\12\10\0\2\12\4\0\6\12\1\u01d6"+
    "\3\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\6\12\1\u01d7\3\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\11\12\1\u01d8"+
    "\7\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\7\12\1\u01d9\11\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u01da\17\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\14\12\1\u01db\4\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\11\12\1\u01dc"+
    "\7\12\10\0\2\12\4\0\3\12\1\u01dd\6\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u01de\17\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\7\12\1\u01df\11\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\u01e0\11\0\21\12\2\0"+
    "\2\271\1\u0165\1\372\63\271\1\u01e1\1\u01e2\61\271\2\u0196"+
    "\1\u01c0\1\u0196\2\u0193\57\u0196\2\271\1\u0196\1\u01e3\61\271"+
    "\2\u01bf\1\u01e4\1\u01e5\2\u01c8\57\u01bf\2\u0196\1\u01c0\1\u01bf"+
    "\2\u0193\61\u0196\1\u0195\1\u01c1\2\u0193\57\u0196\2\u0168\1\u01e6"+
    "\1\u0198\2\u0199\21\u0168\1\u019a\35\u0168\1\270\1\371\1\u0130"+
    "\1\u012f\2\u0131\21\270\1\371\35\270\2\u019b\1\u0168\1\u01e7"+
    "\63\u019b\1\u0131\1\u01c5\62\u019b\1\u01c6\1\u01e8\1\u01c5\2\u01c6"+
    "\57\u019b\2\u0168\1\u01e9\1\u01ea\2\u0199\21\u0168\1\u019a\35\u0168"+
    "\1\u019b\1\u01c8\1\u01eb\1\u01c5\2\u01c8\21\u019b\1\u01c6\35\u019b"+
    "\2\374\1\u016a\1\u01ec\61\374\6\0\2\12\4\0\10\12"+
    "\1\u01ed\1\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\5\12\1\u01ee\4\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\2\12"+
    "\1\u01ef\16\12\10\0\2\12\4\0\10\12\1\u01f0\1\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\4\12"+
    "\1\u01f1\5\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\3\12\1\u01f2\6\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\3\12\1\u01f3\6\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\3\12\1\u01f4\6\12"+
    "\2\0\1\12\11\0\21\12\10\0\2\12\4\0\12\12"+
    "\2\0\1\12\11\0\7\12\1\u01f5\11\12\10\0\2\12"+
    "\4\0\10\12\1\u01f6\1\12\2\0\1\12\11\0\21\12"+
    "\10\0\2\12\4\0\3\12\1\u01f7\6\12\2\0\1\12"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\u01f8"+
    "\11\0\21\12\10\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\11\12\1\u01f9\7\12\10\0\2\12\4\0\5\12"+
    "\1\u01fa\4\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\4\12\1\u01fb\5\12\2\0\1\12\11\0\21\12"+
    "\2\0\2\u01e1\1\u01fc\1\u01fd\2\u0191\57\u01e1\2\u019b\1\u01fe"+
    "\1\u01c5\63\u019b\1\u0199\1\u01c5\61\u019b\2\u01bf\1\u01e4\1\u01bf"+
    "\2\u01c8\61\u01bf\1\u0195\1\u01e5\2\u01c8\57\u01bf\1\u012f\1\u0166"+
    "\1\u0192\1\u012f\2\u0193\21\u012f\1\u0166\35\u012f\2\u019b\1\u0193"+
    "\1\u01c5\63\u019b\1\u01ff\1\u0200\61\u019b\2\u01bf\1\u01e4\1\u0201"+
    "\2\u01c8\57\u01bf\2\u0168\1\u0202\1\u0198\2\u0199\21\u0168\1\u019a"+
    "\35\u0168\2\u019b\1\u01bf\1\u0203\61\u019b\2\374\1\u019e\1\u0133"+
    "\61\374\6\0\2\12\4\0\5\12\1\u0204\4\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\3\12\1\u0205"+
    "\6\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\5\12\1\u0206\4\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\2\12\1\u0207\7\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\11\12\1\u0208\7\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u0209\17\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\1\12\1\u020a\17\12\10\0"+
    "\2\12\4\0\5\12\1\u020b\4\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\u020c\17\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u020d\17\12\10\0\2\12\4\0"+
    "\2\12\1\u020e\7\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\10\12\1\u020f\1\12\2\0\1\12\11\0"+
    "\21\12\2\0\2\u01e1\1\u01fc\1\u0210\2\u0191\61\u01e1\1\u0211"+
    "\1\u01fd\2\u0191\57\u01e1\1\374\1\u01fe\1\u0212\1\u0133\2\u01fe"+
    "\21\374\1\u019e\35\374\2\u01ff\1\u0213\1\u0214\2\u01c6\57\u01ff"+
    "\2\u019b\1\u0215\1\u01c5\61\u019b\2\u01bf\1\u01c0\1\u01e5\2\u01c8"+
    "\57\u01bf\1\u0168\1\u019a\1\u01c7\1\u01c2\2\u01c8\21\u0168\1\u019a"+
    "\35\u0168\2\u019b\1\u01c8\1\u01c5\61\u019b\6\0\2\12\4\0"+
    "\3\12\1\u0216\6\12\2\0\1\12\11\0\21\12\10\0"+
    "\2\12\4\0\3\12\1\u0217\6\12\2\0\1\12\11\0"+
    "\21\12\10\0\2\12\4\0\12\12\2\0\1\12\11\0"+
    "\1\12\1\u0218\17\12\10\0\2\12\4\0\12\12\2\0"+
    "\1\12\11\0\1\12\1\u0219\17\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\11\12\1\u021a\7\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\11\12\1\u021b"+
    "\7\12\10\0\2\12\4\0\3\12\1\u021c\6\12\2\0"+
    "\1\12\11\0\21\12\10\0\2\12\4\0\2\12\1\u021d"+
    "\7\12\2\0\1\12\11\0\21\12\10\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\5\12\1\u021e\13\12\10\0"+
    "\2\12\4\0\12\12\2\0\1\12\11\0\5\12\1\u021f"+
    "\13\12\2\0\2\u01ff\1\u0220\1\u0214\2\u01c6\57\u01ff\1\373"+
    "\1\u0221\1\u0222\1\u016a\2\u0131\57\373\2\374\1\u0223\1\u0224"+
    "\61\374\2\u01ff\1\u0213\1\u0210\2\u01c6\61\u01ff\1\u0211\1\u0214"+
    "\2\u01c6\57\u01ff\1\374\1\u0215\1\u0225\1\u0133\2\u0215\21\374"+
    "\1\u019e\35\374\6\0\2\12\4\0\12\12\2\0\1\12"+
    "\11\0\7\12\1\u0226\11\12\10\0\2\12\4\0\2\12"+
    "\1\u0227\7\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\5\12\1\u0228\13\12"+
    "\10\0\2\12\4\0\12\12\2\0\1\12\11\0\7\12"+
    "\1\u0229\11\12\10\0\2\12\4\0\10\12\1\u022a\1\12"+
    "\2\0\1\12\11\0\21\12\2\0\1\u016a\1\u022b\1\u022c"+
    "\1\u016a\2\u0215\57\u016a\1\373\1\u0221\1\u0222\1\373\2\u0131"+
    "\61\373\1\u022d\1\u01ff\2\171\57\373\2\u0223\1\u022e\1\u022f"+
    "\2\u01fe\21\u0223\1\u0230\35\u0223\2\u019b\1\u0191\1\u01c5\61\u019b"+
    "\2\374\1\u0231\1\u0232\61\374\6\0\2\12\4\0\3\12"+
    "\1\u0233\6\12\2\0\1\12\11\0\21\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\1\12\1\u0234\17\12"+
    "\2\0\1\u016a\1\u022b\1\u022c\1\u019d\2\u0215\61\u016a\1\u0235"+
    "\1\u01ff\2\u019e\57\u016a\2\u0194\1\u0195\1\u0231\2\u0131\57\u0194"+
    "\2\u0223\1\u022e\1\u01c2\2\u01fe\21\u0223\1\u0230\37\u0223\1\u01c3"+
    "\1\u022f\2\u01fe\21\u0223\1\u0230\36\u0223\1\u0230\1\u0236\1\u022f"+
    "\2\u0215\21\u0223\1\u0230\35\u0223\2\u0231\1\u0237\1\u0238\2\u0215"+
    "\57\u0231\2\u019b\1\u01c6\1\u01c5\61\u019b\6\0\2\12\4\0"+
    "\12\12\2\0\1\12\11\0\1\u0239\20\12\10\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\11\12\1\u023a\7\12"+
    "\2\0\2\u0231\1\u0237\1\u0231\2\u0215\57\u0231\2\u0223\1\u023b"+
    "\1\u01ea\2\u01fe\21\u0223\1\u0230\35\u0223\2\u0231\1\u0237\1\u01bf"+
    "\2\u0215\61\u0231\1\u0195\1\u0238\2\u0215\57\u0231\6\0\2\12"+
    "\4\0\12\12\2\0\1\12\11\0\7\12\1\u023c\11\12"+
    "\2\0\2\u0231\1\u0237\1\u0201\2\u0215\57\u0231";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\0\1\1\1\11\25\1\2\11\1\1"+
    "\1\11\1\1\2\11\6\1\1\0\1\1\7\11\2\1"+
    "\1\0\1\1\1\11\4\1\1\0\57\1\1\0\1\1"+
    "\1\11\3\1\1\11\2\0\1\1\2\0\2\1\1\11"+
    "\2\0\67\1\3\0\2\1\1\11\72\1\1\0\1\1"+
    "\1\0\1\1\1\0\62\1\2\0\2\1\1\0\57\1"+
    "\3\0\2\1\2\0\46\1\1\0\1\1\1\0\4\1"+
    "\3\0\1\1\1\0\37\1\2\0\1\1\1\0\3\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\30\1"+
    "\2\0\3\1\2\0\1\1\3\0\21\1\1\0\1\1"+
    "\1\0\2\1\1\0\16\1\1\0\20\1\3\0\10\1"+
    "\2\0\2\1\1\0\3\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public YangFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 79: 
          { yybegin(BLACK_BOX_STRING); return OrderedBy;
          }
        case 94: break;
        case 26: 
          { yybegin(BLACK_BOX_STRING); return Rpc;
          }
        case 95: break;
        case 46: 
          { yybegin(BLACK_BOX_STRING); return Output;
          }
        case 96: break;
        case 27: 
          { yybegin(BLACK_BOX_STRING); return Bit;
          }
        case 97: break;
        case 83: 
          { yybegin(BLACK_BOX_STRING); return YinElement;
          }
        case 98: break;
        case 41: 
          { yybegin(BLACK_BOX_STRING); return Input;
          }
        case 99: break;
        case 84: 
          { yybegin(BLACK_BOX_STRING); return Notification;
          }
        case 100: break;
        case 64: 
          { yybegin(BLACK_BOX_STRING); return Pattern;
          }
        case 101: break;
        case 47: 
          { yybegin(BLACK_BOX_STRING); return Refine;
          }
        case 102: break;
        case 91: 
          { yybegin(BLACK_BOX_STRING); return ErrorMessage;
          }
        case 103: break;
        case 75: 
          { yybegin(BLACK_BOX_STRING); return Container;
          }
        case 104: break;
        case 31: 
          { yybegin(BLACK_BOX_STRING); return Case;
          }
        case 105: break;
        case 74: 
          { yybegin(BLACK_BOX_STRING); return Mandatory;
          }
        case 106: break;
        case 89: 
          { yybegin(BLACK_BOX_STRING); return RevisionDate;
          }
        case 107: break;
        case 21: 
          { yybegin(ID_EXPECTED); return Colon;
          }
        case 108: break;
        case 15: 
          { return RightParenthesis;
          }
        case 109: break;
        case 65: 
          { yybegin(BLACK_BOX_STRING); return Argument;
          }
        case 110: break;
        case 33: 
          { yybegin(BLACK_BOX_STRING); return List;
          }
        case 111: break;
        case 28: 
          { yybegin(EXPRESSION); return Key;
          }
        case 112: break;
        case 77: 
          { yybegin(BLACK_BOX_STRING); return Extension;
          }
        case 113: break;
        case 11: 
          { return RULE_NUMBER;
          }
        case 114: break;
        case 38: 
          { yybegin(EXPRESSION); return Path;
          }
        case 115: break;
        case 72: 
          { yybegin(EXPRESSION); return Deviation;
          }
        case 116: break;
        case 25: 
          { yybegin(EXPRESSION); return RULE_HIDDEN;
          }
        case 117: break;
        case 78: 
          { yybegin(BLACK_BOX_STRING); return Submodule;
          }
        case 118: break;
        case 76: 
          { yybegin(BLACK_BOX_STRING); return LeafList;
          }
        case 119: break;
        case 44: 
          { yybegin(BLACK_BOX_STRING); return Anyxml;
          }
        case 120: break;
        case 68: 
          { yybegin(BLACK_BOX_STRING); return Grouping;
          }
        case 121: break;
        case 48: 
          { yybegin(BLACK_BOX_STRING); return Module;
          }
        case 122: break;
        case 37: 
          { yybegin(BLACK_BOX_STRING); return Base;
          }
        case 123: break;
        case 90: 
          { yybegin(BLACK_BOX_STRING); return ErrorAppTag;
          }
        case 124: break;
        case 80: 
          { yybegin(EXPRESSION); return IfFeature;
          }
        case 125: break;
        case 8: 
          { return RULE_ID;
          }
        case 126: break;
        case 87: 
          { yybegin(BLACK_BOX_STRING); return MinElements;
          }
        case 127: break;
        case 23: 
          { return RULE_SL_COMMENT;
          }
        case 128: break;
        case 30: 
          { yybegin(EXPRESSION); return Must;
          }
        case 129: break;
        case 81: 
          { yybegin(BLACK_BOX_STRING); return BelongsTo;
          }
        case 130: break;
        case 56: 
          { yybegin(BLACK_BOX_STRING); return Anydata;
          }
        case 131: break;
        case 85: 
          { yybegin(BLACK_BOX_STRING); return Organization;
          }
        case 132: break;
        case 2: 
          { yybegin(COLON_EXPECTED);  return RULE_ID;
          }
        case 133: break;
        case 35: 
          { yybegin(EXPRESSION); return Uses;
          }
        case 134: break;
        case 58: 
          { yybegin(BLACK_BOX_STRING); return Deviate;
          }
        case 135: break;
        case 62: 
          { yybegin(BLACK_BOX_STRING); return Typedef;
          }
        case 136: break;
        case 67: 
          { yybegin(BLACK_BOX_STRING); return Identity;
          }
        case 137: break;
        case 1: 
          { return RULE_WS;
          }
        case 138: break;
        case 86: 
          { yybegin(BLACK_BOX_STRING); return MaxElements;
          }
        case 139: break;
        case 6: 
          { return Solidus;
          }
        case 140: break;
        case 66: 
          { yybegin(BLACK_BOX_STRING); return Revision;
          }
        case 141: break;
        case 12: 
          { return FullStop;
          }
        case 142: break;
        case 69: 
          { yybegin(BLACK_BOX_STRING); return Position;
          }
        case 143: break;
        case 20: 
          { yybegin(YYINITIAL); return RULE_HIDDEN;
          }
        case 144: break;
        case 63: 
          { yybegin(BLACK_BOX_STRING); return Feature;
          }
        case 145: break;
        case 10: 
          { yybegin(IN_EXPRESSION_STRING); return RULE_HIDDEN;
          }
        case 146: break;
        case 50: 
          { yybegin(BLACK_BOX_STRING); return Config;
          }
        case 147: break;
        case 39: 
          { yybegin(EXPRESSION); return When;
          }
        case 148: break;
        case 55: 
          { yybegin(BLACK_BOX_STRING); return Prefix;
          }
        case 149: break;
        case 49: 
          { yybegin(BLACK_BOX_STRING); return Import;
          }
        case 150: break;
        case 60: 
          { yybegin(BLACK_BOX_STRING); return Include;
          }
        case 151: break;
        case 14: 
          { return LeftParenthesis;
          }
        case 152: break;
        case 22: 
          { yybegin(BLACK_BOX_STRING); return RULE_ID;
          }
        case 153: break;
        case 32: 
          { yybegin(BLACK_BOX_STRING); return Type;
          }
        case 154: break;
        case 7: 
          { return RULE_OPERATOR;
          }
        case 155: break;
        case 45: 
          { yybegin(BLACK_BOX_STRING); return Action;
          }
        case 156: break;
        case 88: 
          { yybegin(BLACK_BOX_STRING); return YangVersion;
          }
        case 157: break;
        case 36: 
          { yybegin(BLACK_BOX_STRING); return Enum;
          }
        case 158: break;
        case 13: 
          { return Colon;
          }
        case 159: break;
        case 40: 
          { yybegin(BLACK_BOX_STRING); return Range;
          }
        case 160: break;
        case 4: 
          { yybegin(YYINITIAL); return Semicolon;
          }
        case 161: break;
        case 93: 
          { yybegin(BLACK_BOX_STRING); return RequireInstance;
          }
        case 162: break;
        case 59: 
          { yybegin(BLACK_BOX_STRING); return Default;
          }
        case 163: break;
        case 92: 
          { yybegin(BLACK_BOX_STRING); return FractionDigits;
          }
        case 164: break;
        case 3: 
          { yybegin(YYINITIAL); return RightCurlyBracket;
          }
        case 165: break;
        case 70: 
          { yybegin(BLACK_BOX_STRING); return Presence;
          }
        case 166: break;
        case 9: 
          { yybegin(IN_SQ_EXPRESSION_STRING); return RULE_HIDDEN;
          }
        case 167: break;
        case 53: 
          { yybegin(EXPRESSION); return Unique;
          }
        case 168: break;
        case 82: 
          { yybegin(BLACK_BOX_STRING); return Description;
          }
        case 169: break;
        case 16: 
          { return LeftSquareBracket;
          }
        case 170: break;
        case 51: 
          { yybegin(BLACK_BOX_STRING); return Choice;
          }
        case 171: break;
        case 61: 
          { yybegin(BLACK_BOX_STRING); return Contact;
          }
        case 172: break;
        case 52: 
          { yybegin(BLACK_BOX_STRING); return Length;
          }
        case 173: break;
        case 42: 
          { yybegin(BLACK_BOX_STRING); return Value;
          }
        case 174: break;
        case 71: 
          { yybegin(BLACK_BOX_STRING); return Namespace;
          }
        case 175: break;
        case 17: 
          { return RightSquareBracket;
          }
        case 176: break;
        case 19: 
          { return RULE_STRING;
          }
        case 177: break;
        case 73: 
          { yybegin(BLACK_BOX_STRING); return Reference;
          }
        case 178: break;
        case 34: 
          { yybegin(BLACK_BOX_STRING); return Leaf;
          }
        case 179: break;
        case 18: 
          { return Comma;
          }
        case 180: break;
        case 24: 
          { return FullStopFullStop;
          }
        case 181: break;
        case 5: 
          { yybegin(YYINITIAL); return LeftCurlyBracket;
          }
        case 182: break;
        case 57: 
          { yybegin(BLACK_BOX_STRING); return Augment;
          }
        case 183: break;
        case 54: 
          { yybegin(BLACK_BOX_STRING); return Status;
          }
        case 184: break;
        case 43: 
          { yybegin(BLACK_BOX_STRING); return Units;
          }
        case 185: break;
        case 29: 
          { return RULE_ML_COMMENT;
          }
        case 186: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
