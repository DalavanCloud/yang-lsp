/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.validation

import com.google.inject.Inject
import com.google.inject.Singleton
import io.typefox.yang.yang.Import
import io.typefox.yang.yang.Module
import io.typefox.yang.yang.Statement
import io.typefox.yang.yang.YangVersion
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check

import static com.google.common.base.CaseFormat.*
import static io.typefox.yang.validation.YangIssueCodes.*
import static io.typefox.yang.yang.YangPackage.Literals.*

/**
 * This class contains custom validation rules for the YANG language. 
 */
@Singleton
class YangValidator extends AbstractYangValidator {

	@Inject
	YangCardinalitiesHelper cardinalitiesHelper;

	@Check
	def void checkVersion(YangVersion it) {
		if (yangVersion != "1.1") {
			error("The version must be '1.1'.", it, YANG_VERSION__YANG_VERSION, INCORRECT_VERSION);
		}
	}

	@Check
	def void checkModuleCardinalities(Module module) {
		checkCardinalities(module, MODULE_SUB_STATEMENT_CARDINALITY, [module -> MODULE__NAME]);
	}

	@Check
	def void checkImportCardinalities(Import _import) {
		checkCardinalities(_import, IMPORT_SUB_STATEMENT_CARDINALITY, [_import -> IMPORT__MODULE]);
	}

	private def <S extends Statement> checkCardinalities(S container, String issueCode,
		(S)=>Pair<? extends EObject, ? extends EStructuralFeature> issueLocationProvider) {

		val allStatements = container.subStatements;
		cardinalitiesHelper.getCardinalitiesFor(container.eClass).entrySet.forEach [
			val clazz = key.instanceClass;
			val statements = allStatements.filter(clazz);
			val actualCardinality = statements.size;
			val expectedCardinality = value;
			if (!expectedCardinality.contains(actualCardinality)) {
				val statementName = UPPER_CAMEL.converterTo(LOWER_HYPHEN).convert(clazz.simpleName);
				val containerName = container.eClass.instanceClass.simpleName.toLowerCase;
				val message = '''Expected '«statementName»' with «expectedCardinality» cardinality for «containerName». Got «actualCardinality» instead.''';
				if (actualCardinality === 0) {
					val issueLocation = issueLocationProvider.apply(container);
					error(message, issueLocation.key, issueLocation.value, issueCode);
				} else {
					statements.forEach [
						val index = allStatements.indexOf(it);
						error(message, container, STATEMENT__SUB_STATEMENTS, index, issueCode);
					];
				}
			}
		];
	}

}
