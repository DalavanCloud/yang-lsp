/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.validation

import com.google.inject.Inject
import com.google.inject.Singleton
import io.typefox.yang.yang.Statement
import io.typefox.yang.yang.YangVersion
import org.eclipse.xtext.validation.Check

import static io.typefox.yang.utils.YangExtensions.*
import static io.typefox.yang.validation.IssueCodes.*
import static io.typefox.yang.yang.YangPackage.Literals.*

/**
 * This class contains custom validation rules for the YANG language. 
 */
@Singleton
class YangValidator extends AbstractYangValidator {

	@Inject
	SubstatementRuleProvider substatementRuleProvider;
	
	@Inject
	SubstatementFeatureMapper featureMapper;

	@Check
	def void checkVersion(YangVersion it) {
<<<<<<< Upstream, based on branch 'GH-12' of https://github.com/yang-tools/yang-lsp.git
		if (yangVersion != YANG_1 && yangVersion != YANG_1_1) {
			error('''The version must be either '«YANG_1»' or '«YANG_1_1»'.''', it, YANG_VERSION__YANG_VERSION, INCORRECT_VERSION);
=======
		if (yangVersion != "1.1" || yangVersion != "1") {
			error("The version must be either '1' or '1.1'.", it, YANG_VERSION__YANG_VERSION, INCORRECT_VERSION);
>>>>>>> 2b286b5 some minor fixes for substatement validation
		}
	}

	@Check
	def void checkSubstatements(Statement it) {
		substatementRuleProvider.get(eClass)?.checkSubstatements(it, this, featureMapper);
	}

}
