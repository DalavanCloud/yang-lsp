/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.scoping

import com.google.inject.Inject
import io.typefox.yang.yang.AbstractModule
import io.typefox.yang.yang.YangPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScopeProvider

/**
 * Scope provider for YANG, which is based on single batch processing and subsequently caching scopes
 */
class YangScopeProvider implements IScopeProvider {
	
	@Inject ScopeContextProvider provider

	override getScope(EObject context, EReference reference) {
		val ctx = findScopeInAdapters(context, reference)
		switch reference.eClass {
			case YangPackage.Literals.ABSTRACT_MODULE : {
				return ctx.moduleScope
			}
			case YangPackage.Literals.GROUPING : {
				return ctx.groupingScope
			}
			case YangPackage.Literals.TYPE : {
				return ctx.typeScope
			}
			case YangPackage.Literals.FEATURE : {
				return ctx.featureScope
			}
			case YangPackage.Literals.IDENTITY : {
				return ctx.identityScope
			}
			case YangPackage.Literals.EXTENSION : {
				return ctx.extensionScope
			}
			default : {
				return ctx.nodeScope
			}
		}
	}
	
	protected def IScopeContext findScopeInAdapters(EObject object, EReference reference) {
		val m = object.eResource.contents.head as AbstractModule
		return provider.getScopeContext(m)
	}
	
}


